openapi: 3.0.0
info:
  title: Milestone Integration Platform VMS RESTful API
  description: VMS Configuration and control for XProtect
  version: 1.0.0
  contact:
    name: MIP SDK Forum
    url: https://developer.milestonesys.com
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
tags:
  - name: Core
    description: Core product information
  - name: Grouping
    description: Device group configuration
  - name: Events
    description: Event configuration
  - name: VAP
    description: Value added products configuration
  - name: DeviceConfig
    description: Device configurations
  - name: Rule
    description: Rule related configuration
  - name: Role
    description: Role configuration
  - name: Client
    description: Smart Client related configuration
  - name: RecordingServer
    description: Recording server specific configuration
servers:
  - url: https://localhost/API/rest/v1
    description: API Gateway entry point
security:
  - bearerAuth: []

paths:
  /accessControlSystems:
    get:
      tags:
      - VAP
      description: 'Access control systems'
      operationId: getAllaccessControlSystems
      summary: 'Get array of all Access control systems'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/accessControlSystems'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /accessControlSystems/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '80fe8f7e-473b-4aeb-a9e8-1ea7dcc335e6'
    get:
      tags:
      - VAP
      description: 'Access control systems'
      operationId: getaccessControlSystemsById
      summary: 'Get specific object of Access control systems'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/accessControlSystems'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    put:
      tags:
      - VAP
      description: 'Access control systems'
      operationId: putaccessControlSystemsById
      summary: 'Update all fields on Access control systems'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accessControlSystems'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/accessControlSystems'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    patch:
      tags:
      - VAP
      description: 'Access control systems'
      operationId: patchaccessControlSystemsById
      summary: 'Update provided fields on Access control systems'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accessControlSystems'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/accessControlSystems'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - VAP
      summary: 'Perform a task'
      description: 'Access control systems'
      operationId: postTaskForaccessControlSystems
      parameters:
        - name: 'task'
          in: 'query'
          description: |
            task=GetInternalUnitPath
                 GetInternalUnitPath - Get internal unit path
          required: true
          schema:
            type: 'string'
            example: 'GetInternalUnitPath'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/getInternalUnitPath_RequestBody'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/getInternalUnitPathServerTask'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'
  /accessControlSystems/{id}/accessControlUnits:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the accessControlSystem object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '80fe8f7e-473b-4aeb-a9e8-1ea7dcc335e6'
    get:
      tags:
      - VAP
      description: 'Access control systems'
      operationId: getAllaccessControlUnitsInAaccessControlSystems
      summary: 'Get array of all accessControlUnits'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/accessControlUnits'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /accessControlUnits/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'e4d81a4d-b0cc-4033-be19-2b50a4469548'
    get:
      tags:
      - VAP
      description: 'Access control units'
      operationId: getaccessControlUnitsById
      summary: 'Get specific object of Access control units'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/accessControlUnits'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    put:
      tags:
      - VAP
      description: 'Access control units'
      operationId: putaccessControlUnitsById
      summary: 'Update all fields on Access control units'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accessControlUnits'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/accessControlUnits'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    patch:
      tags:
      - VAP
      description: 'Access control units'
      operationId: patchaccessControlUnitsById
      summary: 'Update provided fields on Access control units'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accessControlUnits'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/accessControlUnits'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /accessControlUnits/{id}/accessControlUnits:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the accessControlUnit object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'e4d81a4d-b0cc-4033-be19-2b50a4469548'
    get:
      tags:
      - VAP
      description: 'Access control units'
      operationId: getAllaccessControlUnitsInAaccessControlUnits
      summary: 'Get array of all accessControlUnits'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/accessControlUnits'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /alarmDefinitions:
    get:
      tags:
      - VAP
      description: 'Alarm definitions. To include disabled items add ?disabled to the request.'
      operationId: getAllalarmDefinitions
      summary: 'Get array of all enabled Alarm definitions'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/alarmDefinitions'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - VAP
      description: 'Alarm definitions'
      operationId: postalarmDefinitionsById
      summary: 'Add new alarmDefinitions'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/alarmDefinitions'
      responses:
        '201':
          description: 'Created'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/alarmDefinitions'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /alarmDefinitions/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '9094284b-34c3-4e53-a3d7-8e7e3652567b'
    get:
      tags:
      - VAP
      description: 'Alarm definitions'
      operationId: getalarmDefinitionsById
      summary: 'Get specific object of Alarm definitions'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/alarmDefinitions'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    put:
      tags:
      - VAP
      description: 'Alarm definitions'
      operationId: putalarmDefinitionsById
      summary: 'Update all fields on Alarm definitions'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/alarmDefinitions'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/alarmDefinitions'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    patch:
      tags:
      - VAP
      description: 'Alarm definitions'
      operationId: patchalarmDefinitionsById
      summary: 'Update provided fields on Alarm definitions'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/alarmDefinitions'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/alarmDefinitions'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    delete:
      tags:
      - VAP
      description: 'Alarm definitions'
      operationId: deletealarmDefinitionsById
      summary: 'Delete a alarmDefinitions'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/alarmDefinitions'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /analyticsEvents:
    get:
      tags:
      - Events
      description: 'Analytics event'
      operationId: getAllanalyticsEvents
      summary: 'Get array of all Analytics event'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/analyticsEvents'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - Events
      description: 'Analytics event'
      operationId: postanalyticsEventsById
      summary: 'Add new analyticsEvents'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/analyticsEvents'
      responses:
        '201':
          description: 'Created'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/analyticsEvents'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /analyticsEvents/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'a03af6dd-262b-431c-864a-e92e567248e2'
    get:
      tags:
      - Events
      description: 'Analytics event'
      operationId: getanalyticsEventsById
      summary: 'Get specific object of Analytics event'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/analyticsEvents'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    put:
      tags:
      - Events
      description: 'Analytics event'
      operationId: putanalyticsEventsById
      summary: 'Update all fields on Analytics event'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/analyticsEvents'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/analyticsEvents'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    patch:
      tags:
      - Events
      description: 'Analytics event'
      operationId: patchanalyticsEventsById
      summary: 'Update provided fields on Analytics event'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/analyticsEvents'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/analyticsEvents'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    delete:
      tags:
      - Events
      description: 'Analytics event'
      operationId: deleteanalyticsEventsById
      summary: 'Delete a analyticsEvents'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/analyticsEvents'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /archiveStorages/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'a0136b02-f0ba-4da1-890a-d5818541287d'
    get:
      tags:
      - RecordingServer
      description: 'Archives'
      operationId: getarchiveStoragesById
      summary: 'Get specific object of Archives'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/archiveStorages'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    put:
      tags:
      - RecordingServer
      description: 'Archives'
      operationId: putarchiveStoragesById
      summary: 'Update all fields on Archives'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/archiveStorages'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/archiveStorages'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    patch:
      tags:
      - RecordingServer
      description: 'Archives'
      operationId: patcharchiveStoragesById
      summary: 'Update provided fields on Archives'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/archiveStorages'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/archiveStorages'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - RecordingServer
      summary: 'Perform a task'
      description: 'Archives'
      operationId: postTaskForarchiveStorages
      parameters:
        - name: 'task'
          in: 'query'
          description: |
            task=ReadArchiveStorageInformation, or task=SetFramerateReductionArchiveStorage, or task=MoveArchiveStorage
                 ReadArchiveStorageInformation - Read archive storage information
                 SetFramerateReductionArchiveStorage - Enable/disable frame rate reduction on archive
                 MoveArchiveStorage - Move archive
          required: true
          schema:
            type: 'string'
            example: 'MoveArchiveStorage'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              oneOf:
                - $ref: '#/components/schemas/setFramerateReductionArchiveStorage_RequestBody'
                - $ref: '#/components/schemas/moveArchiveStorage_RequestBody'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  result:
                    type: object
                    oneOf:
                    - $ref: '#/components/schemas/serverTask'
                    - $ref: '#/components/schemas/setFramerateReductionArchiveStorageServerTask'
                    - $ref: '#/components/schemas/moveArchiveStorageServerTask'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'
  /archiveStorageInformation/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '23aac652-e051-4108-a169-9c74cdd76fb3'
    get:
      tags:
      - RecordingServer
      description: 'Get specific object of archiveStorageInformation'
      operationId: getarchiveStorageInformationById
      summary: 'Get specific object of archiveStorageInformation'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/archiveStorageInformation'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    put:
      tags:
      - RecordingServer
      description: 'Update all fields on archiveStorageInformation'
      operationId: putarchiveStorageInformationById
      summary: 'Update all fields on archiveStorageInformation'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/archiveStorageInformation'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/archiveStorageInformation'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    patch:
      tags:
      - RecordingServer
      description: 'Update provided fields on archiveStorageInformation'
      operationId: patcharchiveStorageInformationById
      summary: 'Update provided fields on archiveStorageInformation'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/archiveStorageInformation'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/archiveStorageInformation'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /audioMessages:
    get:
      tags:
      - Rule
      description: 'Audio message'
      operationId: getAllaudioMessages
      summary: 'Get array of all Audio message'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/audioMessages'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - Rule
      description: 'Audio message'
      operationId: postaudioMessagesById
      summary: 'Add new audioMessages'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/audioMessages'
      responses:
        '201':
          description: 'Created'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/audioMessages'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /audioMessages/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '58556053-ccdc-4315-a82f-dccc0685b593'
    get:
      tags:
      - Rule
      description: 'Audio message'
      operationId: getaudioMessagesById
      summary: 'Get specific object of Audio message'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/audioMessages'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    put:
      tags:
      - Rule
      description: 'Audio message'
      operationId: putaudioMessagesById
      summary: 'Update all fields on Audio message'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/audioMessages'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/audioMessages'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    patch:
      tags:
      - Rule
      description: 'Audio message'
      operationId: patchaudioMessagesById
      summary: 'Update provided fields on Audio message'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/audioMessages'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/audioMessages'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    delete:
      tags:
      - Rule
      description: 'Audio message'
      operationId: deleteaudioMessagesById
      summary: 'Delete a audioMessages'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/audioMessages'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - Rule
      summary: 'Perform a task'
      description: 'Audio message'
      operationId: postTaskForaudioMessages
      parameters:
        - name: 'task'
          in: 'query'
          description: |
            task=GetAudioMessageContent, or task=SetAudioMessageContent
                 GetAudioMessageContent - Get audio message content
                 SetAudioMessageContent - Set audio message content
          required: true
          schema:
            type: 'string'
            example: 'SetAudioMessageContent'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/serverTask'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'
  /owner:
    get:
      tags:
      - Core
      description: 'Basic Owner Information'
      operationId: getAllowner
      summary: 'Get array of all Basic Owner Information'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/owner'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /owner/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'f0ad19f5-3d26-4fde-a31f-92e8195f480a'
    get:
      tags:
      - Core
      description: 'Basic Owner Information'
      operationId: getownerById
      summary: 'Get specific object of Basic Owner Information'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/owner'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    put:
      tags:
      - Core
      description: 'Basic Owner Information'
      operationId: putownerById
      summary: 'Update all fields on Basic Owner Information'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/owner'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/owner'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    patch:
      tags:
      - Core
      description: 'Basic Owner Information'
      operationId: patchownerById
      summary: 'Update provided fields on Basic Owner Information'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/owner'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/owner'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - Core
      summary: 'Perform a task'
      description: 'Basic Owner Information'
      operationId: postTaskForowner
      parameters:
        - name: 'task'
          in: 'query'
          description: |
            task=AddBasicOwnerInfo, or task=RemoveBasicOwnerInfo
                 AddBasicOwnerInfo - Add basic owner information
                 RemoveBasicOwnerInfo - Remove basic owner tag
          required: true
          schema:
            type: 'string'
            example: 'RemoveBasicOwnerInfo'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              oneOf:
                - $ref: '#/components/schemas/addBasicOwnerInfo_RequestBody'
                - $ref: '#/components/schemas/removeBasicOwnerInfo_RequestBody'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  result:
                    type: object
                    oneOf:
                    - $ref: '#/components/schemas/addBasicOwnerInfoServerTask'
                    - $ref: '#/components/schemas/removeBasicOwnerInfoServerTask'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'
  /basicUsers:
    get:
      tags:
      - Role
      description: 'Basic user'
      operationId: getAllbasicUsers
      summary: 'Get array of all Basic user'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/basicUsers'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - Role
      description: 'Basic user'
      operationId: postbasicUsersById
      summary: 'Add new basicUsers'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/basicUsers'
      responses:
        '201':
          description: 'Created'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/basicUsers'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /basicUsers/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '3d7bc850-a0a9-465e-a362-b4d4c07c09b3'
    get:
      tags:
      - Role
      description: 'Basic user'
      operationId: getbasicUsersById
      summary: 'Get specific object of Basic user'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/basicUsers'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    put:
      tags:
      - Role
      description: 'Basic user'
      operationId: putbasicUsersById
      summary: 'Update all fields on Basic user'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/basicUsers'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/basicUsers'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    patch:
      tags:
      - Role
      description: 'Basic user'
      operationId: patchbasicUsersById
      summary: 'Update provided fields on Basic user'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/basicUsers'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/basicUsers'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    delete:
      tags:
      - Role
      description: 'Basic user'
      operationId: deletebasicUsersById
      summary: 'Delete a basicUsers'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/basicUsers'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - Role
      summary: 'Perform a task'
      description: 'Basic user'
      operationId: postTaskForbasicUsers
      parameters:
        - name: 'task'
          in: 'query'
          description: |
            task=ChangePasswordBasicUser
                 ChangePasswordBasicUser - Change basic user password
          required: true
          schema:
            type: 'string'
            example: 'ChangePasswordBasicUser'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/changePasswordBasicUser_RequestBody'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/changePasswordBasicUserServerTask'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'
  /basicUsers/{id}/claims:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the basicUser object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '3d7bc850-a0a9-465e-a362-b4d4c07c09b3'
    get:
      tags:
      - Role
      description: 'Basic user'
      operationId: getAllclaimsInAbasicUsers
      summary: 'Get array of all claims'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/claims'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /cameras:
    get:
      tags:
      - DeviceConfig
      description: 'Camera. To include disabled items add ?disabled to the request.'
      operationId: getAllcameras
      summary: 'Get array of all enabled Camera'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/cameras'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /cameras/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '638bc8f1-cf28-4329-b8e6-5bba37bdb48f'
    get:
      tags:
      - DeviceConfig
      description: 'Camera'
      operationId: getcamerasById
      summary: 'Get specific object of Camera'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/cameras'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    put:
      tags:
      - DeviceConfig
      description: 'Camera'
      operationId: putcamerasById
      summary: 'Update all fields on Camera'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/cameras'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/cameras'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    patch:
      tags:
      - DeviceConfig
      description: 'Camera'
      operationId: patchcamerasById
      summary: 'Update provided fields on Camera'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/cameras'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/cameras'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - DeviceConfig
      summary: 'Perform a task'
      description: 'Camera'
      operationId: postTaskForcameras
      parameters:
        - name: 'task'
          in: 'query'
          description: |
            task=GetOtherRecordingServersWithMedia, or task=GetOtherRecordingStoragesWithMedia, or task=RetrieveEdgeStorage, or task=TruncateStorage, or task=TruncateStorageOnOtherRecordingServer, or task=ChangeDeviceRecordingStorage, or task=ChangeSecurityPermissions
                 GetOtherRecordingServersWithMedia - Get recording servers with media
                 GetOtherRecordingStoragesWithMedia - [DEPRECATED] This function is deprecated and should not be used. As an alternative, use the value of the 'RecordingStorage' property to get the configured recording storage for the device.
                 RetrieveEdgeStorage - Retrieve recordings from edge storage
                 TruncateStorage - Delete all recordings for device on storage
                 TruncateStorageOnOtherRecordingServer - Delete all recordings for device on another recording server
                 ChangeDeviceRecordingStorage - Change storage for device
                 ChangeSecurityPermissions - Edit permissions
          required: true
          schema:
            type: 'string'
            example: 'ChangeSecurityPermissions'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              oneOf:
                - $ref: '#/components/schemas/retrieveEdgeStorage_RequestBody'
                - $ref: '#/components/schemas/truncateStorageOnOtherRecordingServer_RequestBody'
                - $ref: '#/components/schemas/changeDeviceRecordingStorage_RequestBody'
                - $ref: '#/components/schemas/changeSecurityPermissions_RequestBody'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  result:
                    type: object
                    oneOf:
                    - $ref: '#/components/schemas/classCollectionServerTask'
                    - $ref: '#/components/schemas/retrieveEdgeStorageServerTask'
                    - $ref: '#/components/schemas/serverTask'
                    - $ref: '#/components/schemas/truncateStorageOnOtherRecordingServerServerTask'
                    - $ref: '#/components/schemas/changeDeviceRecordingStorageServerTask'
                    - $ref: '#/components/schemas/changeSecurityPermissionsServerTask'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'
  /cameras/{id}/clientSettings:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the camera object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '638bc8f1-cf28-4329-b8e6-5bba37bdb48f'
    get:
      tags:
      - DeviceConfig
      description: 'Camera'
      operationId: getAllclientSettingsInAcameras
      summary: 'Get array of all clientSettings'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/clientSettings'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /cameras/{idParent}/clientSettings/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of the camera object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '638bc8f1-cf28-4329-b8e6-5bba37bdb48f'
      - name: 'id'
        in: 'path'
        description: 'Id of the clientSetting object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '638bc8f1-cf28-4329-b8e6-5bba37bdb48f'
    get:
      tags:
      - DeviceConfig
      description: 'Camera'
      operationId: getOneclientSettingsInAcameras
      summary: 'Get specific clientSettings'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/clientSettings'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /cameras/{id}/customProperties:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the camera object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '638bc8f1-cf28-4329-b8e6-5bba37bdb48f'
    get:
      tags:
      - DeviceConfig
      description: 'Camera'
      operationId: getAllcustomPropertiesInAcameras
      summary: 'Get array of all customProperties'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/customProperties'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /cameras/{idParent}/customProperties/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of the camera object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '638bc8f1-cf28-4329-b8e6-5bba37bdb48f'
      - name: 'id'
        in: 'path'
        description: 'Id of the customPropertie object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '638bc8f1-cf28-4329-b8e6-5bba37bdb48f'
    get:
      tags:
      - DeviceConfig
      description: 'Camera'
      operationId: getOnecustomPropertiesInAcameras
      summary: 'Get specific customProperties'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/customProperties'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /cameras/{id}/settings:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the camera object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '638bc8f1-cf28-4329-b8e6-5bba37bdb48f'
    get:
      tags:
      - DeviceConfig
      description: 'Camera'
      operationId: getAllsettingsInAcameras
      summary: 'Get array of all settings'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/settings'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /cameras/{idParent}/settings/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of the camera object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '638bc8f1-cf28-4329-b8e6-5bba37bdb48f'
      - name: 'id'
        in: 'path'
        description: 'Id of the setting object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '638bc8f1-cf28-4329-b8e6-5bba37bdb48f'
    get:
      tags:
      - DeviceConfig
      description: 'Camera'
      operationId: getOnesettingsInAcameras
      summary: 'Get specific settings'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/settings'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /cameras/{id}/hardwareDeviceEvents:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the camera object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '638bc8f1-cf28-4329-b8e6-5bba37bdb48f'
    get:
      tags:
      - DeviceConfig
      description: 'Camera'
      operationId: getAllhardwareDeviceEventsInAcameras
      summary: 'Get array of all hardwareDeviceEvents'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/hardwareDeviceEvents'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /cameras/{idParent}/hardwareDeviceEvents/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of the camera object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '638bc8f1-cf28-4329-b8e6-5bba37bdb48f'
      - name: 'id'
        in: 'path'
        description: 'Id of the hardwareDeviceEvent object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '638bc8f1-cf28-4329-b8e6-5bba37bdb48f'
    get:
      tags:
      - DeviceConfig
      description: 'Camera'
      operationId: getOnehardwareDeviceEventsInAcameras
      summary: 'Get specific hardwareDeviceEvents'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/hardwareDeviceEvents'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /cameras/{id}/motionDetections:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the camera object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '638bc8f1-cf28-4329-b8e6-5bba37bdb48f'
    get:
      tags:
      - DeviceConfig
      description: 'Camera'
      operationId: getAllmotionDetectionsInAcameras
      summary: 'Get array of all motionDetections'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/motionDetections'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /cameras/{idParent}/motionDetections/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of the camera object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '638bc8f1-cf28-4329-b8e6-5bba37bdb48f'
      - name: 'id'
        in: 'path'
        description: 'Id of the motionDetection object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '638bc8f1-cf28-4329-b8e6-5bba37bdb48f'
    get:
      tags:
      - DeviceConfig
      description: 'Camera'
      operationId: getOnemotionDetectionsInAcameras
      summary: 'Get specific motionDetections'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/motionDetections'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /cameras/{id}/patrollingProfiles:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the camera object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '638bc8f1-cf28-4329-b8e6-5bba37bdb48f'
    get:
      tags:
      - DeviceConfig
      description: 'Camera'
      operationId: getAllpatrollingProfilesInAcameras
      summary: 'Get array of all patrollingProfiles'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/patrollingProfiles'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - DeviceConfig
      description: 'Camera'
      operationId: postcamerasByIdpatrollingProfiles
      summary: 'Add a patrollingProfiles to a cameras'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/patrollingProfiles'
      responses:
        '201':
          description: 'Created'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/patrollingProfiles'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /cameras/{id}/privacyProtections:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the camera object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '638bc8f1-cf28-4329-b8e6-5bba37bdb48f'
    get:
      tags:
      - DeviceConfig
      description: 'Camera'
      operationId: getAllprivacyProtectionsInAcameras
      summary: 'Get array of all privacyProtections'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/privacyProtections'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /cameras/{idParent}/privacyProtections/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of the camera object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '638bc8f1-cf28-4329-b8e6-5bba37bdb48f'
      - name: 'id'
        in: 'path'
        description: 'Id of the privacyProtection object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '638bc8f1-cf28-4329-b8e6-5bba37bdb48f'
    get:
      tags:
      - DeviceConfig
      description: 'Camera'
      operationId: getOneprivacyProtectionsInAcameras
      summary: 'Get specific privacyProtections'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/privacyProtections'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /cameras/{id}/ptzPresets:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '638bc8f1-cf28-4329-b8e6-5bba37bdb48f'
    get:
      tags:
      - DeviceConfig
      description: 'Camera'
      operationId: getAllptzPresetsInAcameras
      summary: 'Get array of all ptzPresets'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/ptzPresets'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - DeviceConfig
      description: 'Camera, or perform a task'
      operationId: postcamerasByIdptzPresets
      summary: 'Add a ptzPresets to a cameras, or task=DefaultPtzPreset, or task=GetDevicePresets'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              oneOf:
                - $ref: '#/components/schemas/ptzPresets'
                - $ref: '#/components/schemas/defaultPtzPreset_RequestBody'
                - $ref: '#/components/schemas/getDevicePresets_RequestBody'
      responses:
        '201':
          description: 'Created'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ptzPresets'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  result:
                    type: object
                    oneOf:
                    - $ref: '#/components/schemas/defaultPtzPresetServerTask'
                    - $ref: '#/components/schemas/getDevicePresetsServerTask'

  /cameras/{idParent}/ptzPresets/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of parent object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '638bc8f1-cf28-4329-b8e6-5bba37bdb48f'
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '638bc8f1-cf28-4329-b8e6-5bba37bdb48f'
    get:
      tags:
      - DeviceConfig
      description: 'Camera'
      operationId: getOneptzPresetsInAcameras
      summary: 'Get specific ptzPresets'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/ptzPresets'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    delete:
      tags:
      - DeviceConfig
      description: 'Camera'
      operationId: deletecamerasByIdptzPresets
      summary: 'Remove a ptzPresets from a cameras'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ptzPresets'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /cameras/{id}/streams:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the camera object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '638bc8f1-cf28-4329-b8e6-5bba37bdb48f'
    get:
      tags:
      - DeviceConfig
      description: 'Camera'
      operationId: getAllstreamsInAcameras
      summary: 'Get array of all streams'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/streams'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /cameras/{idParent}/patrollingProfiles/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of parent object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '638bc8f1-cf28-4329-b8e6-5bba37bdb48f'
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '638bc8f1-cf28-4329-b8e6-5bba37bdb48f'
    delete:
      tags:
      - DeviceConfig
      description: 'Camera'
      operationId: deletecamerasByIdpatrollingProfiles
      summary: 'Remove a patrollingProfiles from a cameras'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/patrollingProfiles'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /cameraGroups:
    get:
      tags:
      - Grouping
      description: 'Camera groups'
      operationId: getAllcameraGroups
      summary: 'Get array of all Camera groups'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/cameraGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - Grouping
      description: 'Camera groups'
      operationId: postcameraGroupsById
      summary: 'Add new cameraGroups'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/cameraGroups'
      responses:
        '201':
          description: 'Created'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/cameraGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /cameraGroups/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '815ee09f-312b-489b-b541-f16d2d1fc901'
    get:
      tags:
      - Grouping
      description: 'Camera groups'
      operationId: getcameraGroupsById
      summary: 'Get specific object of Camera groups'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/cameraGroups'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    put:
      tags:
      - Grouping
      description: 'Camera groups'
      operationId: putcameraGroupsById
      summary: 'Update all fields on Camera groups'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/cameraGroups'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/cameraGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    patch:
      tags:
      - Grouping
      description: 'Camera groups'
      operationId: patchcameraGroupsById
      summary: 'Update provided fields on Camera groups'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/cameraGroups'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/cameraGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    delete:
      tags:
      - Grouping
      description: 'Camera groups'
      operationId: deletecameraGroupsById
      summary: 'Delete a cameraGroups'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/cameraGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /cameraGroups/{id}/cameras:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the cameraGroup object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '815ee09f-312b-489b-b541-f16d2d1fc901'
    get:
      tags:
      - Grouping
      description: 'Camera groups'
      operationId: getAllcamerasInAcameraGroups
      summary: 'Get array of all cameras'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/cameras'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - Grouping
      description: 'Camera groups'
      operationId: postcameraGroupsByIdcameras
      summary: 'Add a cameras to a cameraGroups'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/cameras'
      responses:
        '201':
          description: 'Created'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/cameras'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /cameraGroups/{idParent}/cameras/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of parent object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '815ee09f-312b-489b-b541-f16d2d1fc901'
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '815ee09f-312b-489b-b541-f16d2d1fc901'
    get:
      tags:
      - Grouping
      description: 'Camera groups'
      operationId: getOnecamerasInAcameraGroups
      summary: 'Get specific cameras'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/cameras'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    delete:
      tags:
      - Grouping
      description: 'Camera groups'
      operationId: deletecameraGroupsByIdcameras
      summary: 'Remove a cameras from a cameraGroups'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/cameras'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /cameraGroups/{id}/cameraGroups:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the cameraGroup object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '815ee09f-312b-489b-b541-f16d2d1fc901'
    get:
      tags:
      - Grouping
      description: 'Camera groups'
      operationId: getAllcameraGroupsInAcameraGroups
      summary: 'Get array of all cameraGroups'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/cameraGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /clientProfiles:
    get:
      tags:
      - Client
      description: 'Client profile'
      operationId: getAllclientProfiles
      summary: 'Get array of all Client profile'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/clientProfiles'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - Client
      description: 'Client profile'
      operationId: postclientProfilesById
      summary: 'Add new clientProfiles'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/clientProfiles'
      responses:
        '201':
          description: 'Created'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/clientProfiles'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /clientProfiles/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '210ff07d-91e6-48f4-8ade-ae79d29d749e'
    get:
      tags:
      - Client
      description: 'Client profile'
      operationId: getclientProfilesById
      summary: 'Get specific object of Client profile'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/clientProfiles'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    put:
      tags:
      - Client
      description: 'Client profile'
      operationId: putclientProfilesById
      summary: 'Update all fields on Client profile'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/clientProfiles'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/clientProfiles'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    patch:
      tags:
      - Client
      description: 'Client profile'
      operationId: patchclientProfilesById
      summary: 'Update provided fields on Client profile'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/clientProfiles'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/clientProfiles'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    delete:
      tags:
      - Client
      description: 'Client profile'
      operationId: deleteclientProfilesById
      summary: 'Delete a clientProfiles'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/clientProfiles'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - Client
      summary: 'Perform a task'
      description: 'Client profile'
      operationId: postTaskForclientProfiles
      parameters:
        - name: 'task'
          in: 'query'
          description: |
            task=ClientProfileUpPriority, or task=ClientProfileDownPriority
                 ClientProfileUpPriority - Move profile priority up
                 ClientProfileDownPriority - Move profile priority down
          required: true
          schema:
            type: 'string'
            example: 'ClientProfileDownPriority'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/serverTask'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'
  /eventTypes/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '6df795fa-2b74-48fe-9243-6c96f1104acd'
    get:
      tags:
      - Events
      description: 'Events'
      operationId: geteventTypesById
      summary: 'Get specific object of Events'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/eventTypes'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    put:
      tags:
      - Events
      description: 'Events'
      operationId: puteventTypesById
      summary: 'Update all fields on Events'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/eventTypes'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/eventTypes'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    patch:
      tags:
      - Events
      description: 'Events'
      operationId: patcheventTypesById
      summary: 'Update provided fields on Events'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/eventTypes'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/eventTypes'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /eventTypeGroups:
    get:
      tags:
      - Events
      description: 'Event Group'
      operationId: getAlleventTypeGroups
      summary: 'Get array of all Event Group'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/eventTypeGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /eventTypeGroups/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '29101d41-f0d7-44be-8d14-5f21c57d6bf0'
    get:
      tags:
      - Events
      description: 'Event Group'
      operationId: geteventTypeGroupsById
      summary: 'Get specific object of Event Group'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/eventTypeGroups'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    put:
      tags:
      - Events
      description: 'Event Group'
      operationId: puteventTypeGroupsById
      summary: 'Update all fields on Event Group'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/eventTypeGroups'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/eventTypeGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    patch:
      tags:
      - Events
      description: 'Event Group'
      operationId: patcheventTypeGroupsById
      summary: 'Update provided fields on Event Group'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/eventTypeGroups'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/eventTypeGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /eventTypeGroups/{id}/analyticsEvents:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the eventTypeGroup object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '29101d41-f0d7-44be-8d14-5f21c57d6bf0'
    get:
      tags:
      - Events
      description: 'Event Group'
      operationId: getAllanalyticsEventsInAeventTypeGroups
      summary: 'Get array of all analyticsEvents'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/analyticsEvents'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /eventTypeGroups/{id}/eventTypes:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the eventTypeGroup object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '29101d41-f0d7-44be-8d14-5f21c57d6bf0'
    get:
      tags:
      - Events
      description: 'Event Group'
      operationId: getAlleventTypesInAeventTypeGroups
      summary: 'Get array of all eventTypes'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/eventTypes'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /eventTypeGroups/{id}/genericEvents:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the eventTypeGroup object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '29101d41-f0d7-44be-8d14-5f21c57d6bf0'
    get:
      tags:
      - Events
      description: 'Event Group'
      operationId: getAllgenericEventsInAeventTypeGroups
      summary: 'Get array of all genericEvents'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/genericEvents'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /eventTypeGroups/{id}/userDefinedEvents:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the eventTypeGroup object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '29101d41-f0d7-44be-8d14-5f21c57d6bf0'
    get:
      tags:
      - Events
      description: 'Event Group'
      operationId: getAlluserDefinedEventsInAeventTypeGroups
      summary: 'Get array of all userDefinedEvents'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/userDefinedEvents'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /failoverGroups:
    get:
      tags:
      - RecordingServer
      description: 'Failover groups'
      operationId: getAllfailoverGroups
      summary: 'Get array of all Failover groups'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/failoverGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - RecordingServer
      description: 'Failover groups, or perform a task'
      operationId: postfailoverGroupsById
      summary: 'Add new failoverGroups, or task=MoveFailoverGroup'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              oneOf:
                - $ref: '#/components/schemas/failoverGroups'
                - $ref: '#/components/schemas/moveFailoverGroup_RequestBody'
      responses:
        '201':
          description: 'Created'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/failoverGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/moveFailoverGroupServerTask'

  /failoverGroups/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '363c3fad-f404-49d2-baf4-a020ab50712c'
    get:
      tags:
      - RecordingServer
      description: 'Failover groups'
      operationId: getfailoverGroupsById
      summary: 'Get specific object of Failover groups'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/failoverGroups'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    put:
      tags:
      - RecordingServer
      description: 'Failover groups'
      operationId: putfailoverGroupsById
      summary: 'Update all fields on Failover groups'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/failoverGroups'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/failoverGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    patch:
      tags:
      - RecordingServer
      description: 'Failover groups'
      operationId: patchfailoverGroupsById
      summary: 'Update provided fields on Failover groups'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/failoverGroups'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/failoverGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    delete:
      tags:
      - RecordingServer
      description: 'Failover groups'
      operationId: deletefailoverGroupsById
      summary: 'Delete a failoverGroups'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/failoverGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /failoverGroups/{id}/failoverRecorders:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the failoverGroup object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '363c3fad-f404-49d2-baf4-a020ab50712c'
    get:
      tags:
      - RecordingServer
      description: 'Failover groups'
      operationId: getAllfailoverRecordersInAfailoverGroups
      summary: 'Get array of all failoverRecorders'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/failoverRecorders'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /failoverRecorders:
    get:
      tags:
      - RecordingServer
      description: 'Failover recorders. To include disabled items add ?disabled to the request.'
      operationId: getAllfailoverRecorders
      summary: 'Get array of all enabled Failover recorders'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/failoverRecorders'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /failoverRecorders/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '2b0bd2b2-aac8-40f5-b723-0c309f7b02eb'
    get:
      tags:
      - RecordingServer
      description: 'Failover recorders'
      operationId: getfailoverRecordersById
      summary: 'Get specific object of Failover recorders'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/failoverRecorders'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    put:
      tags:
      - RecordingServer
      description: 'Failover recorders'
      operationId: putfailoverRecordersById
      summary: 'Update all fields on Failover recorders'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/failoverRecorders'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/failoverRecorders'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    patch:
      tags:
      - RecordingServer
      description: 'Failover recorders'
      operationId: patchfailoverRecordersById
      summary: 'Update provided fields on Failover recorders'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/failoverRecorders'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/failoverRecorders'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /genericEvents:
    get:
      tags:
      - Events
      description: 'Generic events. To include disabled items add ?disabled to the request.'
      operationId: getAllgenericEvents
      summary: 'Get array of all enabled Generic events'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/genericEvents'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - Events
      description: 'Generic events'
      operationId: postgenericEventsById
      summary: 'Add new genericEvents'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/genericEvents'
      responses:
        '201':
          description: 'Created'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/genericEvents'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /genericEvents/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'd804a255-e028-4b62-be4b-fb09fd893a6c'
    get:
      tags:
      - Events
      description: 'Generic events'
      operationId: getgenericEventsById
      summary: 'Get specific object of Generic events'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/genericEvents'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    put:
      tags:
      - Events
      description: 'Generic events'
      operationId: putgenericEventsById
      summary: 'Update all fields on Generic events'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/genericEvents'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/genericEvents'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    patch:
      tags:
      - Events
      description: 'Generic events'
      operationId: patchgenericEventsById
      summary: 'Update provided fields on Generic events'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/genericEvents'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/genericEvents'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    delete:
      tags:
      - Events
      description: 'Generic events'
      operationId: deletegenericEventsById
      summary: 'Delete a genericEvents'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/genericEvents'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /genericEventDataSources:
    get:
      tags:
      - Events
      description: 'Generic event data sources. To include disabled items add ?disabled to the request.'
      operationId: getAllgenericEventDataSources
      summary: 'Get array of all enabled Generic event data sources'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/genericEventDataSources'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - Events
      description: 'Generic event data sources'
      operationId: postgenericEventDataSourcesById
      summary: 'Add new genericEventDataSources'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/genericEventDataSources'
      responses:
        '201':
          description: 'Created'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/genericEventDataSources'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /genericEventDataSources/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '311a6f1d-7fa8-4bff-8daa-8850a08a6498'
    get:
      tags:
      - Events
      description: 'Generic event data sources'
      operationId: getgenericEventDataSourcesById
      summary: 'Get specific object of Generic event data sources'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/genericEventDataSources'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    put:
      tags:
      - Events
      description: 'Generic event data sources'
      operationId: putgenericEventDataSourcesById
      summary: 'Update all fields on Generic event data sources'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/genericEventDataSources'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/genericEventDataSources'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    patch:
      tags:
      - Events
      description: 'Generic event data sources'
      operationId: patchgenericEventDataSourcesById
      summary: 'Update provided fields on Generic event data sources'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/genericEventDataSources'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/genericEventDataSources'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    delete:
      tags:
      - Events
      description: 'Generic event data sources'
      operationId: deletegenericEventDataSourcesById
      summary: 'Delete a genericEventDataSources'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/genericEventDataSources'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /gisMapLocations:
    get:
      tags:
      - Client
      description: 'GIS map locations'
      operationId: getAllgisMapLocations
      summary: 'Get array of all GIS map locations'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/gisMapLocations'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - Client
      description: 'GIS map locations'
      operationId: postgisMapLocationsById
      summary: 'Add new gisMapLocations'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/gisMapLocations'
      responses:
        '201':
          description: 'Created'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/gisMapLocations'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /gisMapLocations/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '42bb29be-4bb2-4b59-986a-6314ce59569c'
    get:
      tags:
      - Client
      description: 'GIS map locations'
      operationId: getgisMapLocationsById
      summary: 'Get specific object of GIS map locations'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/gisMapLocations'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    put:
      tags:
      - Client
      description: 'GIS map locations'
      operationId: putgisMapLocationsById
      summary: 'Update all fields on GIS map locations'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/gisMapLocations'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/gisMapLocations'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    patch:
      tags:
      - Client
      description: 'GIS map locations'
      operationId: patchgisMapLocationsById
      summary: 'Update provided fields on GIS map locations'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/gisMapLocations'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/gisMapLocations'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    delete:
      tags:
      - Client
      description: 'GIS map locations'
      operationId: deletegisMapLocationsById
      summary: 'Delete a gisMapLocations'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/gisMapLocations'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /hardware:
    get:
      tags:
      - DeviceConfig
      description: 'Hardware. To include disabled items add ?disabled to the request.'
      operationId: getAllhardware
      summary: 'Get array of all enabled Hardware'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/hardware'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /hardware/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '965c4a97-449a-4b4b-b772-e50e7b44f700'
    get:
      tags:
      - DeviceConfig
      description: 'Hardware'
      operationId: gethardwareById
      summary: 'Get specific object of Hardware'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/hardware'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    put:
      tags:
      - DeviceConfig
      description: 'Hardware'
      operationId: puthardwareById
      summary: 'Update all fields on Hardware'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/hardware'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/hardware'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    patch:
      tags:
      - DeviceConfig
      description: 'Hardware'
      operationId: patchhardwareById
      summary: 'Update provided fields on Hardware'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/hardware'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/hardware'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - DeviceConfig
      summary: 'Perform a task'
      description: 'Hardware'
      operationId: postTaskForhardware
      parameters:
        - name: 'task'
          in: 'query'
          description: |
            task=ReadPasswordHardware, or task=ChangePasswordHardware, or task=UpdateFirmwareHardware, or task=MoveHardware, or task=UpdateHardware
                 ReadPasswordHardware - Read hardware password
                 ChangePasswordHardware - Change hardware password
                 UpdateFirmwareHardware - Update firmware
                 MoveHardware - Move hardware
                 UpdateHardware - Update hardware
          required: true
          schema:
            type: 'string'
            example: 'UpdateHardware'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              oneOf:
                - $ref: '#/components/schemas/changePasswordHardware_RequestBody'
                - $ref: '#/components/schemas/updateFirmwareHardware_RequestBody'
                - $ref: '#/components/schemas/moveHardware_RequestBody'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  result:
                    type: object
                    oneOf:
                    - $ref: '#/components/schemas/serverTask'
                    - $ref: '#/components/schemas/changePasswordHardwareServerTask'
                    - $ref: '#/components/schemas/updateFirmwareHardwareServerTask'
                    - $ref: '#/components/schemas/moveHardwareServerTask'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'
  /hardware/{id}/cameras:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the hardware object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '965c4a97-449a-4b4b-b772-e50e7b44f700'
    get:
      tags:
      - DeviceConfig
      description: 'Hardware'
      operationId: getAllcamerasInAhardware
      summary: 'Get array of all cameras'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/cameras'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /hardware/{idParent}/cameras/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of the hardware object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '965c4a97-449a-4b4b-b772-e50e7b44f700'
      - name: 'id'
        in: 'path'
        description: 'Id of the camera object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '965c4a97-449a-4b4b-b772-e50e7b44f700'
    get:
      tags:
      - DeviceConfig
      description: 'Hardware'
      operationId: getOnecamerasInAhardware
      summary: 'Get specific cameras'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/cameras'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /hardware/{id}/customProperties:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the hardware object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '965c4a97-449a-4b4b-b772-e50e7b44f700'
    get:
      tags:
      - DeviceConfig
      description: 'Hardware'
      operationId: getAllcustomPropertiesInAhardware
      summary: 'Get array of all customProperties'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/customProperties'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /hardware/{idParent}/customProperties/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of the hardware object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '965c4a97-449a-4b4b-b772-e50e7b44f700'
      - name: 'id'
        in: 'path'
        description: 'Id of the customPropertie object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '965c4a97-449a-4b4b-b772-e50e7b44f700'
    get:
      tags:
      - DeviceConfig
      description: 'Hardware'
      operationId: getOnecustomPropertiesInAhardware
      summary: 'Get specific customProperties'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/customProperties'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /hardware/{id}/hardwareDeviceEvents:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the hardware object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '965c4a97-449a-4b4b-b772-e50e7b44f700'
    get:
      tags:
      - DeviceConfig
      description: 'Hardware'
      operationId: getAllhardwareDeviceEventsInAhardware
      summary: 'Get array of all hardwareDeviceEvents'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/hardwareDeviceEvents'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /hardware/{idParent}/hardwareDeviceEvents/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of the hardware object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '965c4a97-449a-4b4b-b772-e50e7b44f700'
      - name: 'id'
        in: 'path'
        description: 'Id of the hardwareDeviceEvent object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '965c4a97-449a-4b4b-b772-e50e7b44f700'
    get:
      tags:
      - DeviceConfig
      description: 'Hardware'
      operationId: getOnehardwareDeviceEventsInAhardware
      summary: 'Get specific hardwareDeviceEvents'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/hardwareDeviceEvents'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /hardware/{id}/hardwareDriverSettings:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the hardware object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '965c4a97-449a-4b4b-b772-e50e7b44f700'
    get:
      tags:
      - DeviceConfig
      description: 'Hardware'
      operationId: getAllhardwareDriverSettingsInAhardware
      summary: 'Get array of all hardwareDriverSettings'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/hardwareDriverSettings'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /hardware/{idParent}/hardwareDriverSettings/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of the hardware object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '965c4a97-449a-4b4b-b772-e50e7b44f700'
      - name: 'id'
        in: 'path'
        description: 'Id of the hardwareDriverSetting object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '965c4a97-449a-4b4b-b772-e50e7b44f700'
    get:
      tags:
      - DeviceConfig
      description: 'Hardware'
      operationId: getOnehardwareDriverSettingsInAhardware
      summary: 'Get specific hardwareDriverSettings'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/hardwareDriverSettings'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /hardware/{id}/hardwarePtzSettings:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the hardware object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '965c4a97-449a-4b4b-b772-e50e7b44f700'
    get:
      tags:
      - DeviceConfig
      description: 'Hardware'
      operationId: getAllhardwarePtzSettingsInAhardware
      summary: 'Get array of all hardwarePtzSettings'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/hardwarePtzSettings'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /hardware/{idParent}/hardwarePtzSettings/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of the hardware object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '965c4a97-449a-4b4b-b772-e50e7b44f700'
      - name: 'id'
        in: 'path'
        description: 'Id of the hardwarePtzSetting object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '965c4a97-449a-4b4b-b772-e50e7b44f700'
    get:
      tags:
      - DeviceConfig
      description: 'Hardware'
      operationId: getOnehardwarePtzSettingsInAhardware
      summary: 'Get specific hardwarePtzSettings'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/hardwarePtzSettings'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /hardware/{id}/inputEvents:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the hardware object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '965c4a97-449a-4b4b-b772-e50e7b44f700'
    get:
      tags:
      - DeviceConfig
      description: 'Hardware'
      operationId: getAllinputEventsInAhardware
      summary: 'Get array of all inputEvents'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/inputEvents'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /hardware/{idParent}/inputEvents/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of the hardware object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '965c4a97-449a-4b4b-b772-e50e7b44f700'
      - name: 'id'
        in: 'path'
        description: 'Id of the inputEvent object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '965c4a97-449a-4b4b-b772-e50e7b44f700'
    get:
      tags:
      - DeviceConfig
      description: 'Hardware'
      operationId: getOneinputEventsInAhardware
      summary: 'Get specific inputEvents'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/inputEvents'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /hardware/{id}/metadata:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the hardware object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '965c4a97-449a-4b4b-b772-e50e7b44f700'
    get:
      tags:
      - DeviceConfig
      description: 'Hardware'
      operationId: getAllmetadataInAhardware
      summary: 'Get array of all metadata'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/metadata'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /hardware/{idParent}/metadata/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of the hardware object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '965c4a97-449a-4b4b-b772-e50e7b44f700'
      - name: 'id'
        in: 'path'
        description: 'Id of the metadata object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '965c4a97-449a-4b4b-b772-e50e7b44f700'
    get:
      tags:
      - DeviceConfig
      description: 'Hardware'
      operationId: getOnemetadataInAhardware
      summary: 'Get specific metadata'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/metadata'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /hardware/{id}/microphones:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the hardware object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '965c4a97-449a-4b4b-b772-e50e7b44f700'
    get:
      tags:
      - DeviceConfig
      description: 'Hardware'
      operationId: getAllmicrophonesInAhardware
      summary: 'Get array of all microphones'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/microphones'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /hardware/{idParent}/microphones/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of the hardware object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '965c4a97-449a-4b4b-b772-e50e7b44f700'
      - name: 'id'
        in: 'path'
        description: 'Id of the microphone object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '965c4a97-449a-4b4b-b772-e50e7b44f700'
    get:
      tags:
      - DeviceConfig
      description: 'Hardware'
      operationId: getOnemicrophonesInAhardware
      summary: 'Get specific microphones'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/microphones'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /hardware/{id}/outputs:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the hardware object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '965c4a97-449a-4b4b-b772-e50e7b44f700'
    get:
      tags:
      - DeviceConfig
      description: 'Hardware'
      operationId: getAlloutputsInAhardware
      summary: 'Get array of all outputs'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/outputs'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /hardware/{idParent}/outputs/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of the hardware object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '965c4a97-449a-4b4b-b772-e50e7b44f700'
      - name: 'id'
        in: 'path'
        description: 'Id of the output object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '965c4a97-449a-4b4b-b772-e50e7b44f700'
    get:
      tags:
      - DeviceConfig
      description: 'Hardware'
      operationId: getOneoutputsInAhardware
      summary: 'Get specific outputs'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/outputs'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /hardware/{id}/speakers:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the hardware object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '965c4a97-449a-4b4b-b772-e50e7b44f700'
    get:
      tags:
      - DeviceConfig
      description: 'Hardware'
      operationId: getAllspeakersInAhardware
      summary: 'Get array of all speakers'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/speakers'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /hardware/{idParent}/speakers/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of the hardware object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '965c4a97-449a-4b4b-b772-e50e7b44f700'
      - name: 'id'
        in: 'path'
        description: 'Id of the speaker object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '965c4a97-449a-4b4b-b772-e50e7b44f700'
    get:
      tags:
      - DeviceConfig
      description: 'Hardware'
      operationId: getOnespeakersInAhardware
      summary: 'Get specific speakers'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/speakers'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /inputEvents:
    get:
      tags:
      - DeviceConfig
      description: 'Input. To include disabled items add ?disabled to the request.'
      operationId: getAllinputEvents
      summary: 'Get array of all enabled Input'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/inputEvents'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /inputEvents/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '1ee97b92-664b-4841-860a-b9d53b158d00'
    get:
      tags:
      - DeviceConfig
      description: 'Input'
      operationId: getinputEventsById
      summary: 'Get specific object of Input'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/inputEvents'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    put:
      tags:
      - DeviceConfig
      description: 'Input'
      operationId: putinputEventsById
      summary: 'Update all fields on Input'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/inputEvents'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/inputEvents'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    patch:
      tags:
      - DeviceConfig
      description: 'Input'
      operationId: patchinputEventsById
      summary: 'Update provided fields on Input'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/inputEvents'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/inputEvents'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - DeviceConfig
      summary: 'Perform a task'
      description: 'Input'
      operationId: postTaskForinputEvents
      parameters:
        - name: 'task'
          in: 'query'
          description: |
            task=ChangeSecurityPermissions
                 ChangeSecurityPermissions - Edit permissions
          required: true
          schema:
            type: 'string'
            example: 'ChangeSecurityPermissions'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/changeSecurityPermissions_RequestBody'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/changeSecurityPermissionsServerTask'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'
  /inputEvents/{id}/customProperties:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the inputEvent object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '1ee97b92-664b-4841-860a-b9d53b158d00'
    get:
      tags:
      - DeviceConfig
      description: 'Input'
      operationId: getAllcustomPropertiesInAinputEvents
      summary: 'Get array of all customProperties'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/customProperties'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /inputEvents/{idParent}/customProperties/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of the inputEvent object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '1ee97b92-664b-4841-860a-b9d53b158d00'
      - name: 'id'
        in: 'path'
        description: 'Id of the customPropertie object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '1ee97b92-664b-4841-860a-b9d53b158d00'
    get:
      tags:
      - DeviceConfig
      description: 'Input'
      operationId: getOnecustomPropertiesInAinputEvents
      summary: 'Get specific customProperties'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/customProperties'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /inputEvents/{id}/settings:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the inputEvent object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '1ee97b92-664b-4841-860a-b9d53b158d00'
    get:
      tags:
      - DeviceConfig
      description: 'Input'
      operationId: getAllsettingsInAinputEvents
      summary: 'Get array of all settings'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/settings'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /inputEvents/{idParent}/settings/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of the inputEvent object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '1ee97b92-664b-4841-860a-b9d53b158d00'
      - name: 'id'
        in: 'path'
        description: 'Id of the setting object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '1ee97b92-664b-4841-860a-b9d53b158d00'
    get:
      tags:
      - DeviceConfig
      description: 'Input'
      operationId: getOnesettingsInAinputEvents
      summary: 'Get specific settings'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/settings'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /inputEvents/{id}/hardwareDeviceEvents:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the inputEvent object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '1ee97b92-664b-4841-860a-b9d53b158d00'
    get:
      tags:
      - DeviceConfig
      description: 'Input'
      operationId: getAllhardwareDeviceEventsInAinputEvents
      summary: 'Get array of all hardwareDeviceEvents'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/hardwareDeviceEvents'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /inputEvents/{idParent}/hardwareDeviceEvents/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of the inputEvent object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '1ee97b92-664b-4841-860a-b9d53b158d00'
      - name: 'id'
        in: 'path'
        description: 'Id of the hardwareDeviceEvent object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '1ee97b92-664b-4841-860a-b9d53b158d00'
    get:
      tags:
      - DeviceConfig
      description: 'Input'
      operationId: getOnehardwareDeviceEventsInAinputEvents
      summary: 'Get specific hardwareDeviceEvents'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/hardwareDeviceEvents'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /inputEventGroups:
    get:
      tags:
      - Grouping
      description: 'Input groups'
      operationId: getAllinputEventGroups
      summary: 'Get array of all Input groups'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/inputEventGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - Grouping
      description: 'Input groups'
      operationId: postinputEventGroupsById
      summary: 'Add new inputEventGroups'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/inputEventGroups'
      responses:
        '201':
          description: 'Created'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/inputEventGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /inputEventGroups/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '3f28850e-21be-45e1-bf27-607d8b930c75'
    get:
      tags:
      - Grouping
      description: 'Input groups'
      operationId: getinputEventGroupsById
      summary: 'Get specific object of Input groups'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/inputEventGroups'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    put:
      tags:
      - Grouping
      description: 'Input groups'
      operationId: putinputEventGroupsById
      summary: 'Update all fields on Input groups'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/inputEventGroups'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/inputEventGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    patch:
      tags:
      - Grouping
      description: 'Input groups'
      operationId: patchinputEventGroupsById
      summary: 'Update provided fields on Input groups'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/inputEventGroups'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/inputEventGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    delete:
      tags:
      - Grouping
      description: 'Input groups'
      operationId: deleteinputEventGroupsById
      summary: 'Delete a inputEventGroups'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/inputEventGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /inputEventGroups/{id}/inputEvents:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the inputEventGroup object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '3f28850e-21be-45e1-bf27-607d8b930c75'
    get:
      tags:
      - Grouping
      description: 'Input groups'
      operationId: getAllinputEventsInAinputEventGroups
      summary: 'Get array of all inputEvents'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/inputEvents'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - Grouping
      description: 'Input groups'
      operationId: postinputEventGroupsByIdinputEvents
      summary: 'Add a inputEvents to a inputEventGroups'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/inputEvents'
      responses:
        '201':
          description: 'Created'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/inputEvents'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /inputEventGroups/{idParent}/inputEvents/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of parent object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '3f28850e-21be-45e1-bf27-607d8b930c75'
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '3f28850e-21be-45e1-bf27-607d8b930c75'
    get:
      tags:
      - Grouping
      description: 'Input groups'
      operationId: getOneinputEventsInAinputEventGroups
      summary: 'Get specific inputEvents'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/inputEvents'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    delete:
      tags:
      - Grouping
      description: 'Input groups'
      operationId: deleteinputEventGroupsByIdinputEvents
      summary: 'Remove a inputEvents from a inputEventGroups'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/inputEvents'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /inputEventGroups/{id}/inputEventGroups:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the inputEventGroup object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '3f28850e-21be-45e1-bf27-607d8b930c75'
    get:
      tags:
      - Grouping
      description: 'Input groups'
      operationId: getAllinputEventGroupsInAinputEventGroups
      summary: 'Get array of all inputEventGroups'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/inputEventGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /layoutGroups:
    get:
      tags:
      - Client
      description: 'Get array of all layoutGroups'
      operationId: getAlllayoutGroups
      summary: 'Get array of all layoutGroups'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/layoutGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /layoutGroups/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'b0e14cf5-0ead-4612-a2d0-9d071073c50d'
    get:
      tags:
      - Client
      description: 'Get specific object of layoutGroups'
      operationId: getlayoutGroupsById
      summary: 'Get specific object of layoutGroups'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/layoutGroups'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    put:
      tags:
      - Client
      description: 'Update all fields on layoutGroups'
      operationId: putlayoutGroupsById
      summary: 'Update all fields on layoutGroups'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/layoutGroups'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/layoutGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    patch:
      tags:
      - Client
      description: 'Update provided fields on layoutGroups'
      operationId: patchlayoutGroupsById
      summary: 'Update provided fields on layoutGroups'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/layoutGroups'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/layoutGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /layoutGroups/{id}/layouts:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the layoutGroup object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'b0e14cf5-0ead-4612-a2d0-9d071073c50d'
    get:
      tags:
      - Client
      description: 'Get array of all layouts'
      operationId: getAlllayoutsInAlayoutGroups
      summary: 'Get array of all layouts'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/layouts'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - Client
      description: 'Add a layouts to a layoutGroups'
      operationId: postlayoutGroupsByIdlayouts
      summary: 'Add a layouts to a layoutGroups'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/layouts'
      responses:
        '201':
          description: 'Created'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/layouts'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /layoutGroups/{idParent}/layouts/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of parent object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'b0e14cf5-0ead-4612-a2d0-9d071073c50d'
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'b0e14cf5-0ead-4612-a2d0-9d071073c50d'
    get:
      tags:
      - Client
      description: 'Get specific layouts'
      operationId: getOnelayoutsInAlayoutGroups
      summary: 'Get specific layouts'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/layouts'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    delete:
      tags:
      - Client
      description: 'Remove a layouts from a layoutGroups'
      operationId: deletelayoutGroupsByIdlayouts
      summary: 'Remove a layouts from a layoutGroups'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/layouts'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /licenseInformations:
    get:
      tags:
      - Core
      description: 'License information'
      operationId: getAlllicenseInformations
      summary: 'Get array of all License information'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/licenseInformations'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /licenseInformations/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'f0e83649-e1aa-4424-a5be-cd507d041cd6'
    get:
      tags:
      - Core
      description: 'License information'
      operationId: getlicenseInformationsById
      summary: 'Get specific object of License information'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/licenseInformations'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    put:
      tags:
      - Core
      description: 'License information'
      operationId: putlicenseInformationsById
      summary: 'Update all fields on License information'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/licenseInformations'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/licenseInformations'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    patch:
      tags:
      - Core
      description: 'License information'
      operationId: patchlicenseInformationsById
      summary: 'Update provided fields on License information'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/licenseInformations'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/licenseInformations'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - Core
      summary: 'Perform a task'
      description: 'License information'
      operationId: postTaskForlicenseInformations
      parameters:
        - name: 'task'
          in: 'query'
          description: |
            task=ActivateLicense, or task=RequestLicense, or task=ChangeLicense, or task=UpdateLicense, or task=StopAutomaticLicenseActivation
                 ActivateLicense - Activate License
                 RequestLicense - Request license for offline activation
                 ChangeLicense - Change to a new license 
                 UpdateLicense - Update license
          required: true
          schema:
            type: 'string'
            example: 'StopAutomaticLicenseActivation'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              oneOf:
                - $ref: '#/components/schemas/activateLicense_RequestBody'
                - $ref: '#/components/schemas/changeLicense_RequestBody'
                - $ref: '#/components/schemas/updateLicense_RequestBody'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  result:
                    type: object
                    oneOf:
                    - $ref: '#/components/schemas/activateLicenseServerTask'
                    - $ref: '#/components/schemas/serverTask'
                    - $ref: '#/components/schemas/changeLicenseServerTask'
                    - $ref: '#/components/schemas/updateLicenseServerTask'
                    - $ref: '#/components/schemas/status'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'
  /licenseInformations/{id}/licenseDetail:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the licenseInformation object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'f0e83649-e1aa-4424-a5be-cd507d041cd6'
    get:
      tags:
      - Core
      description: 'License information'
      operationId: getAlllicenseDetailInAlicenseInformations
      summary: 'Get array of all licenseDetail'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/licenseDetail'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /licenseInformations/{id}/licenseInstalledProducts:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the licenseInformation object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'f0e83649-e1aa-4424-a5be-cd507d041cd6'
    get:
      tags:
      - Core
      description: 'License information'
      operationId: getAlllicenseInstalledProductsInAlicenseInformations
      summary: 'Get array of all licenseInstalledProducts'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/licenseInstalledProducts'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /licenseInformations/{id}/licenseOverviewAll:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the licenseInformation object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'f0e83649-e1aa-4424-a5be-cd507d041cd6'
    get:
      tags:
      - Core
      description: 'License information'
      operationId: getAlllicenseOverviewAllInAlicenseInformations
      summary: 'Get array of all licenseOverviewAll'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/licenseOverviewAll'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /loginProviders:
    get:
      tags:
      - Core
      description: 'External IDP. To include disabled items add ?disabled to the request.'
      operationId: getAllloginProviders
      summary: 'Get array of all enabled External IDP'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/loginProviders'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - Core
      description: 'External IDP'
      operationId: postloginProvidersById
      summary: 'Add new loginProviders'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/loginProviders'
      responses:
        '201':
          description: 'Created'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/loginProviders'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /loginProviders/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'cb707285-8180-49d3-89c9-2916186be755'
    get:
      tags:
      - Core
      description: 'External IDP'
      operationId: getloginProvidersById
      summary: 'Get specific object of External IDP'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/loginProviders'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    put:
      tags:
      - Core
      description: 'External IDP'
      operationId: putloginProvidersById
      summary: 'Update all fields on External IDP'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/loginProviders'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/loginProviders'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    patch:
      tags:
      - Core
      description: 'External IDP'
      operationId: patchloginProvidersById
      summary: 'Update provided fields on External IDP'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/loginProviders'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/loginProviders'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    delete:
      tags:
      - Core
      description: 'External IDP'
      operationId: deleteloginProvidersById
      summary: 'Delete a loginProviders'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/loginProviders'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /loginProviders/{id}/registeredClaims:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the loginProvider object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'cb707285-8180-49d3-89c9-2916186be755'
    get:
      tags:
      - Core
      description: 'External IDP'
      operationId: getAllregisteredClaimsInAloginProviders
      summary: 'Get array of all registeredClaims'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/registeredClaims'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - Core
      description: 'External IDP'
      operationId: postloginProvidersByIdregisteredClaims
      summary: 'Add a registeredClaims to a loginProviders'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/registeredClaims'
      responses:
        '201':
          description: 'Created'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/registeredClaims'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /loginProviders/{idParent}/registeredClaims/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of parent object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'cb707285-8180-49d3-89c9-2916186be755'
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'cb707285-8180-49d3-89c9-2916186be755'
    get:
      tags:
      - Core
      description: 'External IDP'
      operationId: getOneregisteredClaimsInAloginProviders
      summary: 'Get specific registeredClaims'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/registeredClaims'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    delete:
      tags:
      - Core
      description: 'External IDP'
      operationId: deleteloginProvidersByIdregisteredClaims
      summary: 'Remove a registeredClaims from a loginProviders'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/registeredClaims'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /lprMatchLists:
    get:
      tags:
      - VAP
      description: 'Get array of all lprMatchLists'
      operationId: getAlllprMatchLists
      summary: 'Get array of all lprMatchLists'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/lprMatchLists'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - VAP
      description: 'Add new lprMatchLists'
      operationId: postlprMatchListsById
      summary: 'Add new lprMatchLists'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/lprMatchLists'
      responses:
        '201':
          description: 'Created'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/lprMatchLists'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /lprMatchLists/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '55ae8798-1e4a-45c9-939a-d9a9ea444610'
    get:
      tags:
      - VAP
      description: 'Get specific object of lprMatchLists'
      operationId: getlprMatchListsById
      summary: 'Get specific object of lprMatchLists'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/lprMatchLists'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    put:
      tags:
      - VAP
      description: 'Update all fields on lprMatchLists'
      operationId: putlprMatchListsById
      summary: 'Update all fields on lprMatchLists'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/lprMatchLists'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/lprMatchLists'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    patch:
      tags:
      - VAP
      description: 'Update provided fields on lprMatchLists'
      operationId: patchlprMatchListsById
      summary: 'Update provided fields on lprMatchLists'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/lprMatchLists'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/lprMatchLists'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    delete:
      tags:
      - VAP
      description: 'Delete a lprMatchLists'
      operationId: deletelprMatchListsById
      summary: 'Delete a lprMatchLists'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/lprMatchLists'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - VAP
      summary: 'Perform a task'
      description: 'Perform one of 5 tasks'
      operationId: postTaskForlprMatchLists
      parameters:
        - name: 'task'
          in: 'query'
          description: |
            task=MethodIdGetCustomFieldsForRegistrationNumber, or task=MethodIdGetRegistrationNumbersInfo, or task=MethodIdAddOrEditRegistrationNumbersInfo, or task=MethodIdDeleteRegistrationNumbers, or task=MethodIdDeleteAllRegistrationNumbers
                 MethodIdGetCustomFieldsForRegistrationNumber - Get custom fields
                 MethodIdAddOrEditRegistrationNumbersInfo - Add or edit data for registration numbers
                 MethodIdDeleteRegistrationNumbers - Delete registration numbers
          required: true
          schema:
            type: 'string'
            example: 'MethodIdDeleteAllRegistrationNumbers'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              oneOf:
                - $ref: '#/components/schemas/methodIdGetCustomFieldsForRegistrationNumber_RequestBody'
                - $ref: '#/components/schemas/methodIdAddOrEditRegistrationNumbersInfo_RequestBody'
                - $ref: '#/components/schemas/methodIdDeleteRegistrationNumbers_RequestBody'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  result:
                    type: object
                    oneOf:
                    - $ref: '#/components/schemas/methodIdGetCustomFieldsForRegistrationNumberServerTask'
                    - $ref: '#/components/schemas/status'
                    - $ref: '#/components/schemas/methodIdAddOrEditRegistrationNumbersInfoServerTask'
                    - $ref: '#/components/schemas/methodIdDeleteRegistrationNumbersServerTask'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'
  /metadata:
    get:
      tags:
      - DeviceConfig
      description: 'Metadata. To include disabled items add ?disabled to the request.'
      operationId: getAllmetadata
      summary: 'Get array of all enabled Metadata'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/metadata'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /metadata/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '5eb4ff4a-d570-4440-91a8-faee8b1ba205'
    get:
      tags:
      - DeviceConfig
      description: 'Metadata'
      operationId: getmetadataById
      summary: 'Get specific object of Metadata'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/metadata'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    put:
      tags:
      - DeviceConfig
      description: 'Metadata'
      operationId: putmetadataById
      summary: 'Update all fields on Metadata'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/metadata'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/metadata'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    patch:
      tags:
      - DeviceConfig
      description: 'Metadata'
      operationId: patchmetadataById
      summary: 'Update provided fields on Metadata'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/metadata'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/metadata'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - DeviceConfig
      summary: 'Perform a task'
      description: 'Metadata'
      operationId: postTaskFormetadata
      parameters:
        - name: 'task'
          in: 'query'
          description: |
            task=GetOtherRecordingServersWithMedia, or task=GetOtherRecordingStoragesWithMedia, or task=RetrieveEdgeStorage, or task=TruncateStorage, or task=TruncateStorageOnOtherRecordingServer, or task=ChangeDeviceRecordingStorage, or task=ChangeSecurityPermissions
                 GetOtherRecordingServersWithMedia - Get recording servers with media
                 GetOtherRecordingStoragesWithMedia - [DEPRECATED] This function is deprecated and should not be used. As an alternative, use the value of the 'RecordingStorage' property to get the configured recording storage for the device.
                 RetrieveEdgeStorage - Retrieve recordings from edge storage
                 TruncateStorage - Delete all recordings for device on storage
                 TruncateStorageOnOtherRecordingServer - Delete all recordings for device on another recording server
                 ChangeDeviceRecordingStorage - Change storage for device
                 ChangeSecurityPermissions - Edit permissions
          required: true
          schema:
            type: 'string'
            example: 'ChangeSecurityPermissions'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              oneOf:
                - $ref: '#/components/schemas/retrieveEdgeStorage_RequestBody'
                - $ref: '#/components/schemas/truncateStorageOnOtherRecordingServer_RequestBody'
                - $ref: '#/components/schemas/changeDeviceRecordingStorage_RequestBody'
                - $ref: '#/components/schemas/changeSecurityPermissions_RequestBody'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  result:
                    type: object
                    oneOf:
                    - $ref: '#/components/schemas/classCollectionServerTask'
                    - $ref: '#/components/schemas/retrieveEdgeStorageServerTask'
                    - $ref: '#/components/schemas/serverTask'
                    - $ref: '#/components/schemas/truncateStorageOnOtherRecordingServerServerTask'
                    - $ref: '#/components/schemas/changeDeviceRecordingStorageServerTask'
                    - $ref: '#/components/schemas/changeSecurityPermissionsServerTask'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'
  /metadata/{id}/clientSettings:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the metadata object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '5eb4ff4a-d570-4440-91a8-faee8b1ba205'
    get:
      tags:
      - DeviceConfig
      description: 'Metadata'
      operationId: getAllclientSettingsInAmetadata
      summary: 'Get array of all clientSettings'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/clientSettings'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /metadata/{idParent}/clientSettings/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of the metadata object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '5eb4ff4a-d570-4440-91a8-faee8b1ba205'
      - name: 'id'
        in: 'path'
        description: 'Id of the clientSetting object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '5eb4ff4a-d570-4440-91a8-faee8b1ba205'
    get:
      tags:
      - DeviceConfig
      description: 'Metadata'
      operationId: getOneclientSettingsInAmetadata
      summary: 'Get specific clientSettings'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/clientSettings'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /metadata/{id}/customProperties:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the metadata object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '5eb4ff4a-d570-4440-91a8-faee8b1ba205'
    get:
      tags:
      - DeviceConfig
      description: 'Metadata'
      operationId: getAllcustomPropertiesInAmetadata
      summary: 'Get array of all customProperties'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/customProperties'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /metadata/{idParent}/customProperties/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of the metadata object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '5eb4ff4a-d570-4440-91a8-faee8b1ba205'
      - name: 'id'
        in: 'path'
        description: 'Id of the customPropertie object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '5eb4ff4a-d570-4440-91a8-faee8b1ba205'
    get:
      tags:
      - DeviceConfig
      description: 'Metadata'
      operationId: getOnecustomPropertiesInAmetadata
      summary: 'Get specific customProperties'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/customProperties'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /metadata/{id}/settings:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the metadata object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '5eb4ff4a-d570-4440-91a8-faee8b1ba205'
    get:
      tags:
      - DeviceConfig
      description: 'Metadata'
      operationId: getAllsettingsInAmetadata
      summary: 'Get array of all settings'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/settings'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /metadata/{idParent}/settings/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of the metadata object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '5eb4ff4a-d570-4440-91a8-faee8b1ba205'
      - name: 'id'
        in: 'path'
        description: 'Id of the setting object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '5eb4ff4a-d570-4440-91a8-faee8b1ba205'
    get:
      tags:
      - DeviceConfig
      description: 'Metadata'
      operationId: getOnesettingsInAmetadata
      summary: 'Get specific settings'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/settings'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /metadata/{id}/hardwareDeviceEvents:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the metadata object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '5eb4ff4a-d570-4440-91a8-faee8b1ba205'
    get:
      tags:
      - DeviceConfig
      description: 'Metadata'
      operationId: getAllhardwareDeviceEventsInAmetadata
      summary: 'Get array of all hardwareDeviceEvents'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/hardwareDeviceEvents'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /metadata/{idParent}/hardwareDeviceEvents/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of the metadata object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '5eb4ff4a-d570-4440-91a8-faee8b1ba205'
      - name: 'id'
        in: 'path'
        description: 'Id of the hardwareDeviceEvent object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '5eb4ff4a-d570-4440-91a8-faee8b1ba205'
    get:
      tags:
      - DeviceConfig
      description: 'Metadata'
      operationId: getOnehardwareDeviceEventsInAmetadata
      summary: 'Get specific hardwareDeviceEvents'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/hardwareDeviceEvents'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /metadataGroups:
    get:
      tags:
      - Grouping
      description: 'Metadata groups'
      operationId: getAllmetadataGroups
      summary: 'Get array of all Metadata groups'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/metadataGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - Grouping
      description: 'Metadata groups'
      operationId: postmetadataGroupsById
      summary: 'Add new metadataGroups'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/metadataGroups'
      responses:
        '201':
          description: 'Created'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/metadataGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /metadataGroups/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'b37f4500-1dd1-4995-bafa-baf09c9f64ec'
    get:
      tags:
      - Grouping
      description: 'Metadata groups'
      operationId: getmetadataGroupsById
      summary: 'Get specific object of Metadata groups'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/metadataGroups'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    put:
      tags:
      - Grouping
      description: 'Metadata groups'
      operationId: putmetadataGroupsById
      summary: 'Update all fields on Metadata groups'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/metadataGroups'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/metadataGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    patch:
      tags:
      - Grouping
      description: 'Metadata groups'
      operationId: patchmetadataGroupsById
      summary: 'Update provided fields on Metadata groups'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/metadataGroups'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/metadataGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    delete:
      tags:
      - Grouping
      description: 'Metadata groups'
      operationId: deletemetadataGroupsById
      summary: 'Delete a metadataGroups'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/metadataGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /metadataGroups/{id}/metadata:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the metadataGroup object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'b37f4500-1dd1-4995-bafa-baf09c9f64ec'
    get:
      tags:
      - Grouping
      description: 'Metadata groups'
      operationId: getAllmetadataInAmetadataGroups
      summary: 'Get array of all metadata'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/metadata'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - Grouping
      description: 'Metadata groups'
      operationId: postmetadataGroupsByIdmetadata
      summary: 'Add a metadata to a metadataGroups'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/metadata'
      responses:
        '201':
          description: 'Created'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/metadata'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /metadataGroups/{idParent}/metadata/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of parent object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'b37f4500-1dd1-4995-bafa-baf09c9f64ec'
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'b37f4500-1dd1-4995-bafa-baf09c9f64ec'
    get:
      tags:
      - Grouping
      description: 'Metadata groups'
      operationId: getOnemetadataInAmetadataGroups
      summary: 'Get specific metadata'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/metadata'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    delete:
      tags:
      - Grouping
      description: 'Metadata groups'
      operationId: deletemetadataGroupsByIdmetadata
      summary: 'Remove a metadata from a metadataGroups'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/metadata'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /metadataGroups/{id}/metadataGroups:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the metadataGroup object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'b37f4500-1dd1-4995-bafa-baf09c9f64ec'
    get:
      tags:
      - Grouping
      description: 'Metadata groups'
      operationId: getAllmetadataGroupsInAmetadataGroups
      summary: 'Get array of all metadataGroups'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/metadataGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /microphones:
    get:
      tags:
      - DeviceConfig
      description: 'Microphone. To include disabled items add ?disabled to the request.'
      operationId: getAllmicrophones
      summary: 'Get array of all enabled Microphone'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/microphones'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /microphones/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '2a0fa0e1-129f-4f66-be7a-9f1c190bfd3c'
    get:
      tags:
      - DeviceConfig
      description: 'Microphone'
      operationId: getmicrophonesById
      summary: 'Get specific object of Microphone'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/microphones'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    put:
      tags:
      - DeviceConfig
      description: 'Microphone'
      operationId: putmicrophonesById
      summary: 'Update all fields on Microphone'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/microphones'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/microphones'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    patch:
      tags:
      - DeviceConfig
      description: 'Microphone'
      operationId: patchmicrophonesById
      summary: 'Update provided fields on Microphone'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/microphones'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/microphones'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - DeviceConfig
      summary: 'Perform a task'
      description: 'Microphone'
      operationId: postTaskFormicrophones
      parameters:
        - name: 'task'
          in: 'query'
          description: |
            task=GetOtherRecordingServersWithMedia, or task=GetOtherRecordingStoragesWithMedia, or task=RetrieveEdgeStorage, or task=TruncateStorage, or task=TruncateStorageOnOtherRecordingServer, or task=ChangeDeviceRecordingStorage, or task=ChangeSecurityPermissions
                 GetOtherRecordingServersWithMedia - Get recording servers with media
                 GetOtherRecordingStoragesWithMedia - [DEPRECATED] This function is deprecated and should not be used. As an alternative, use the value of the 'RecordingStorage' property to get the configured recording storage for the device.
                 RetrieveEdgeStorage - Retrieve recordings from edge storage
                 TruncateStorage - Delete all recordings for device on storage
                 TruncateStorageOnOtherRecordingServer - Delete all recordings for device on another recording server
                 ChangeDeviceRecordingStorage - Change storage for device
                 ChangeSecurityPermissions - Edit permissions
          required: true
          schema:
            type: 'string'
            example: 'ChangeSecurityPermissions'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              oneOf:
                - $ref: '#/components/schemas/retrieveEdgeStorage_RequestBody'
                - $ref: '#/components/schemas/truncateStorageOnOtherRecordingServer_RequestBody'
                - $ref: '#/components/schemas/changeDeviceRecordingStorage_RequestBody'
                - $ref: '#/components/schemas/changeSecurityPermissions_RequestBody'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  result:
                    type: object
                    oneOf:
                    - $ref: '#/components/schemas/classCollectionServerTask'
                    - $ref: '#/components/schemas/retrieveEdgeStorageServerTask'
                    - $ref: '#/components/schemas/serverTask'
                    - $ref: '#/components/schemas/truncateStorageOnOtherRecordingServerServerTask'
                    - $ref: '#/components/schemas/changeDeviceRecordingStorageServerTask'
                    - $ref: '#/components/schemas/changeSecurityPermissionsServerTask'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'
  /microphones/{id}/clientSettings:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the microphone object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '2a0fa0e1-129f-4f66-be7a-9f1c190bfd3c'
    get:
      tags:
      - DeviceConfig
      description: 'Microphone'
      operationId: getAllclientSettingsInAmicrophones
      summary: 'Get array of all clientSettings'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/clientSettings'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /microphones/{idParent}/clientSettings/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of the microphone object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '2a0fa0e1-129f-4f66-be7a-9f1c190bfd3c'
      - name: 'id'
        in: 'path'
        description: 'Id of the clientSetting object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '2a0fa0e1-129f-4f66-be7a-9f1c190bfd3c'
    get:
      tags:
      - DeviceConfig
      description: 'Microphone'
      operationId: getOneclientSettingsInAmicrophones
      summary: 'Get specific clientSettings'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/clientSettings'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /microphones/{id}/customProperties:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the microphone object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '2a0fa0e1-129f-4f66-be7a-9f1c190bfd3c'
    get:
      tags:
      - DeviceConfig
      description: 'Microphone'
      operationId: getAllcustomPropertiesInAmicrophones
      summary: 'Get array of all customProperties'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/customProperties'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /microphones/{idParent}/customProperties/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of the microphone object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '2a0fa0e1-129f-4f66-be7a-9f1c190bfd3c'
      - name: 'id'
        in: 'path'
        description: 'Id of the customPropertie object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '2a0fa0e1-129f-4f66-be7a-9f1c190bfd3c'
    get:
      tags:
      - DeviceConfig
      description: 'Microphone'
      operationId: getOnecustomPropertiesInAmicrophones
      summary: 'Get specific customProperties'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/customProperties'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /microphones/{id}/settings:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the microphone object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '2a0fa0e1-129f-4f66-be7a-9f1c190bfd3c'
    get:
      tags:
      - DeviceConfig
      description: 'Microphone'
      operationId: getAllsettingsInAmicrophones
      summary: 'Get array of all settings'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/settings'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /microphones/{idParent}/settings/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of the microphone object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '2a0fa0e1-129f-4f66-be7a-9f1c190bfd3c'
      - name: 'id'
        in: 'path'
        description: 'Id of the setting object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '2a0fa0e1-129f-4f66-be7a-9f1c190bfd3c'
    get:
      tags:
      - DeviceConfig
      description: 'Microphone'
      operationId: getOnesettingsInAmicrophones
      summary: 'Get specific settings'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/settings'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /microphones/{id}/hardwareDeviceEvents:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the microphone object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '2a0fa0e1-129f-4f66-be7a-9f1c190bfd3c'
    get:
      tags:
      - DeviceConfig
      description: 'Microphone'
      operationId: getAllhardwareDeviceEventsInAmicrophones
      summary: 'Get array of all hardwareDeviceEvents'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/hardwareDeviceEvents'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /microphones/{idParent}/hardwareDeviceEvents/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of the microphone object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '2a0fa0e1-129f-4f66-be7a-9f1c190bfd3c'
      - name: 'id'
        in: 'path'
        description: 'Id of the hardwareDeviceEvent object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '2a0fa0e1-129f-4f66-be7a-9f1c190bfd3c'
    get:
      tags:
      - DeviceConfig
      description: 'Microphone'
      operationId: getOnehardwareDeviceEventsInAmicrophones
      summary: 'Get specific hardwareDeviceEvents'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/hardwareDeviceEvents'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /microphoneGroups:
    get:
      tags:
      - Grouping
      description: 'Microphone groups'
      operationId: getAllmicrophoneGroups
      summary: 'Get array of all Microphone groups'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/microphoneGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - Grouping
      description: 'Microphone groups'
      operationId: postmicrophoneGroupsById
      summary: 'Add new microphoneGroups'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/microphoneGroups'
      responses:
        '201':
          description: 'Created'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/microphoneGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /microphoneGroups/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'db393d9d-3008-4307-8e41-408dd7f920d5'
    get:
      tags:
      - Grouping
      description: 'Microphone groups'
      operationId: getmicrophoneGroupsById
      summary: 'Get specific object of Microphone groups'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/microphoneGroups'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    put:
      tags:
      - Grouping
      description: 'Microphone groups'
      operationId: putmicrophoneGroupsById
      summary: 'Update all fields on Microphone groups'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/microphoneGroups'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/microphoneGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    patch:
      tags:
      - Grouping
      description: 'Microphone groups'
      operationId: patchmicrophoneGroupsById
      summary: 'Update provided fields on Microphone groups'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/microphoneGroups'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/microphoneGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    delete:
      tags:
      - Grouping
      description: 'Microphone groups'
      operationId: deletemicrophoneGroupsById
      summary: 'Delete a microphoneGroups'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/microphoneGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /microphoneGroups/{id}/microphones:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the microphoneGroup object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'db393d9d-3008-4307-8e41-408dd7f920d5'
    get:
      tags:
      - Grouping
      description: 'Microphone groups'
      operationId: getAllmicrophonesInAmicrophoneGroups
      summary: 'Get array of all microphones'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/microphones'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - Grouping
      description: 'Microphone groups'
      operationId: postmicrophoneGroupsByIdmicrophones
      summary: 'Add a microphones to a microphoneGroups'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/microphones'
      responses:
        '201':
          description: 'Created'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/microphones'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /microphoneGroups/{idParent}/microphones/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of parent object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'db393d9d-3008-4307-8e41-408dd7f920d5'
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'db393d9d-3008-4307-8e41-408dd7f920d5'
    get:
      tags:
      - Grouping
      description: 'Microphone groups'
      operationId: getOnemicrophonesInAmicrophoneGroups
      summary: 'Get specific microphones'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/microphones'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    delete:
      tags:
      - Grouping
      description: 'Microphone groups'
      operationId: deletemicrophoneGroupsByIdmicrophones
      summary: 'Remove a microphones from a microphoneGroups'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/microphones'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /microphoneGroups/{id}/microphoneGroups:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the microphoneGroup object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'db393d9d-3008-4307-8e41-408dd7f920d5'
    get:
      tags:
      - Grouping
      description: 'Microphone groups'
      operationId: getAllmicrophoneGroupsInAmicrophoneGroups
      summary: 'Get array of all microphoneGroups'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/microphoneGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /mipKinds:
    get:
      tags:
      - VAP
      description: 'MIP kinds'
      operationId: getAllmipKinds
      summary: 'Get array of all MIP kinds'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/mipKinds'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - VAP
      description: 'MIP kinds, or perform a task'
      operationId: postmipKindsById
      summary: 'Add new mipKinds, or task=GetMIPOptionProperty, or task=SetMIPOptionProperty, or task=MIPItemDataVersionSum'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              oneOf:
                - $ref: '#/components/schemas/mipKinds'
                - $ref: '#/components/schemas/getMIPOptionProperty_RequestBody'
                - $ref: '#/components/schemas/setMIPOptionProperty_RequestBody'
      responses:
        '201':
          description: 'Created'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/mipKinds'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  result:
                    type: object
                    oneOf:
                    - $ref: '#/components/schemas/getMIPOptionPropertyServerTask'
                    - $ref: '#/components/schemas/setMIPOptionPropertyServerTask'
                    - $ref: '#/components/schemas/status'

  /mipKinds/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'c5d5ab61-9eee-425a-96e9-62e08cac6b0f'
    get:
      tags:
      - VAP
      description: 'MIP kinds'
      operationId: getmipKindsById
      summary: 'Get specific object of MIP kinds'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/mipKinds'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    put:
      tags:
      - VAP
      description: 'MIP kinds'
      operationId: putmipKindsById
      summary: 'Update all fields on MIP kinds'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/mipKinds'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/mipKinds'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    patch:
      tags:
      - VAP
      description: 'MIP kinds'
      operationId: patchmipKindsById
      summary: 'Update provided fields on MIP kinds'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/mipKinds'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/mipKinds'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    delete:
      tags:
      - VAP
      description: 'MIP kinds'
      operationId: deletemipKindsById
      summary: 'Delete a mipKinds'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/mipKinds'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /mipKinds/{id}/mipItems:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the mipKind object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'c5d5ab61-9eee-425a-96e9-62e08cac6b0f'
    get:
      tags:
      - VAP
      description: 'MIP kinds'
      operationId: getAllmipItemsInAmipKinds
      summary: 'Get array of all mipItems'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/mipItems'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - VAP
      description: 'MIP kinds'
      operationId: postmipKindsByIdmipItems
      summary: 'Add a mipItems to a mipKinds'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/mipItems'
      responses:
        '201':
          description: 'Created'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/mipItems'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /mipKinds/{idParent}/mipItems/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of parent object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'c5d5ab61-9eee-425a-96e9-62e08cac6b0f'
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'c5d5ab61-9eee-425a-96e9-62e08cac6b0f'
    get:
      tags:
      - VAP
      description: 'MIP kinds'
      operationId: getOnemipItemsInAmipKinds
      summary: 'Get specific mipItems'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/mipItems'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    delete:
      tags:
      - VAP
      description: 'MIP kinds'
      operationId: deletemipKindsByIdmipItems
      summary: 'Remove a mipItems from a mipKinds'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/mipItems'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /monitors/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'ba113936-9a15-4be5-84b6-29a9d0e3cd3f'
    get:
      tags:
      - Client
      description: 'Monitor'
      operationId: getmonitorsById
      summary: 'Get specific object of Monitor'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/monitors'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    put:
      tags:
      - Client
      description: 'Monitor'
      operationId: putmonitorsById
      summary: 'Update all fields on Monitor'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/monitors'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/monitors'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    patch:
      tags:
      - Client
      description: 'Monitor'
      operationId: patchmonitorsById
      summary: 'Update provided fields on Monitor'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/monitors'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/monitors'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - Client
      summary: 'Perform a task'
      description: 'Monitor'
      operationId: postTaskFormonitors
      parameters:
        - name: 'task'
          in: 'query'
          description: |
            task=ApplyCameras, or task=ApplyCamerasAndLayout, or task=RemoveCameras, or task=ApplyViewItemsXml, or task=ApplyMonitorState, or task=ApplyLayout, or task=ApplyTextAndLayout
                 ApplyCameras - Apply cameras
                 ApplyCamerasAndLayout - Apply cameras and layout
                 RemoveCameras - Remove cameras
                 ApplyViewItemsXml - Apply view items XML
                 ApplyMonitorState - Apply monitor state
                 ApplyLayout - Apply layout
                 ApplyTextAndLayout - Apply text and layout
          required: true
          schema:
            type: 'string'
            example: 'ApplyTextAndLayout'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              oneOf:
                - $ref: '#/components/schemas/applyCameras_RequestBody'
                - $ref: '#/components/schemas/applyCamerasAndLayout_RequestBody'
                - $ref: '#/components/schemas/removeCameras_RequestBody'
                - $ref: '#/components/schemas/applyViewItemsXml_RequestBody'
                - $ref: '#/components/schemas/applyMonitorState_RequestBody'
                - $ref: '#/components/schemas/applyLayout_RequestBody'
                - $ref: '#/components/schemas/applyTextAndLayout_RequestBody'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  result:
                    type: object
                    oneOf:
                    - $ref: '#/components/schemas/applyCamerasServerTask'
                    - $ref: '#/components/schemas/applyCamerasAndLayoutServerTask'
                    - $ref: '#/components/schemas/removeCamerasServerTask'
                    - $ref: '#/components/schemas/applyViewItemsXmlServerTask'
                    - $ref: '#/components/schemas/applyMonitorStateServerTask'
                    - $ref: '#/components/schemas/applyLayoutServerTask'
                    - $ref: '#/components/schemas/applyTextAndLayoutServerTask'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'
  /monitors/{id}/monitorPresets:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the monitor object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'ba113936-9a15-4be5-84b6-29a9d0e3cd3f'
    get:
      tags:
      - Client
      description: 'Monitor'
      operationId: getAllmonitorPresetsInAmonitors
      summary: 'Get array of all monitorPresets'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/monitorPresets'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /monitors/{idParent}/monitorPresets/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of the monitor object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'ba113936-9a15-4be5-84b6-29a9d0e3cd3f'
      - name: 'id'
        in: 'path'
        description: 'Id of the monitorPreset object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'ba113936-9a15-4be5-84b6-29a9d0e3cd3f'
    get:
      tags:
      - Client
      description: 'Monitor'
      operationId: getOnemonitorPresetsInAmonitors
      summary: 'Get specific monitorPresets'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/monitorPresets'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /outputs:
    get:
      tags:
      - DeviceConfig
      description: 'Output. To include disabled items add ?disabled to the request.'
      operationId: getAlloutputs
      summary: 'Get array of all enabled Output'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/outputs'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /outputs/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '2d6e053a-6e1b-462b-81ec-a2c3d54148c0'
    get:
      tags:
      - DeviceConfig
      description: 'Output'
      operationId: getoutputsById
      summary: 'Get specific object of Output'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/outputs'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    put:
      tags:
      - DeviceConfig
      description: 'Output'
      operationId: putoutputsById
      summary: 'Update all fields on Output'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/outputs'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/outputs'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    patch:
      tags:
      - DeviceConfig
      description: 'Output'
      operationId: patchoutputsById
      summary: 'Update provided fields on Output'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/outputs'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/outputs'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - DeviceConfig
      summary: 'Perform a task'
      description: 'Output'
      operationId: postTaskForoutputs
      parameters:
        - name: 'task'
          in: 'query'
          description: |
            task=ChangeSecurityPermissions
                 ChangeSecurityPermissions - Edit permissions
          required: true
          schema:
            type: 'string'
            example: 'ChangeSecurityPermissions'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/changeSecurityPermissions_RequestBody'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/changeSecurityPermissionsServerTask'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'
  /outputs/{id}/customProperties:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the output object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '2d6e053a-6e1b-462b-81ec-a2c3d54148c0'
    get:
      tags:
      - DeviceConfig
      description: 'Output'
      operationId: getAllcustomPropertiesInAoutputs
      summary: 'Get array of all customProperties'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/customProperties'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /outputs/{idParent}/customProperties/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of the output object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '2d6e053a-6e1b-462b-81ec-a2c3d54148c0'
      - name: 'id'
        in: 'path'
        description: 'Id of the customPropertie object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '2d6e053a-6e1b-462b-81ec-a2c3d54148c0'
    get:
      tags:
      - DeviceConfig
      description: 'Output'
      operationId: getOnecustomPropertiesInAoutputs
      summary: 'Get specific customProperties'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/customProperties'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /outputs/{id}/settings:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the output object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '2d6e053a-6e1b-462b-81ec-a2c3d54148c0'
    get:
      tags:
      - DeviceConfig
      description: 'Output'
      operationId: getAllsettingsInAoutputs
      summary: 'Get array of all settings'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/settings'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /outputs/{idParent}/settings/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of the output object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '2d6e053a-6e1b-462b-81ec-a2c3d54148c0'
      - name: 'id'
        in: 'path'
        description: 'Id of the setting object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '2d6e053a-6e1b-462b-81ec-a2c3d54148c0'
    get:
      tags:
      - DeviceConfig
      description: 'Output'
      operationId: getOnesettingsInAoutputs
      summary: 'Get specific settings'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/settings'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /outputs/{id}/hardwareDeviceEvents:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the output object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '2d6e053a-6e1b-462b-81ec-a2c3d54148c0'
    get:
      tags:
      - DeviceConfig
      description: 'Output'
      operationId: getAllhardwareDeviceEventsInAoutputs
      summary: 'Get array of all hardwareDeviceEvents'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/hardwareDeviceEvents'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /outputs/{idParent}/hardwareDeviceEvents/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of the output object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '2d6e053a-6e1b-462b-81ec-a2c3d54148c0'
      - name: 'id'
        in: 'path'
        description: 'Id of the hardwareDeviceEvent object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '2d6e053a-6e1b-462b-81ec-a2c3d54148c0'
    get:
      tags:
      - DeviceConfig
      description: 'Output'
      operationId: getOnehardwareDeviceEventsInAoutputs
      summary: 'Get specific hardwareDeviceEvents'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/hardwareDeviceEvents'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /outputGroups:
    get:
      tags:
      - Grouping
      description: 'Output groups'
      operationId: getAlloutputGroups
      summary: 'Get array of all Output groups'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/outputGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - Grouping
      description: 'Output groups'
      operationId: postoutputGroupsById
      summary: 'Add new outputGroups'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/outputGroups'
      responses:
        '201':
          description: 'Created'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/outputGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /outputGroups/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '806ebe93-aa00-4476-99ea-9e44418a7acd'
    get:
      tags:
      - Grouping
      description: 'Output groups'
      operationId: getoutputGroupsById
      summary: 'Get specific object of Output groups'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/outputGroups'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    put:
      tags:
      - Grouping
      description: 'Output groups'
      operationId: putoutputGroupsById
      summary: 'Update all fields on Output groups'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/outputGroups'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/outputGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    patch:
      tags:
      - Grouping
      description: 'Output groups'
      operationId: patchoutputGroupsById
      summary: 'Update provided fields on Output groups'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/outputGroups'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/outputGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    delete:
      tags:
      - Grouping
      description: 'Output groups'
      operationId: deleteoutputGroupsById
      summary: 'Delete a outputGroups'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/outputGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /outputGroups/{id}/outputs:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the outputGroup object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '806ebe93-aa00-4476-99ea-9e44418a7acd'
    get:
      tags:
      - Grouping
      description: 'Output groups'
      operationId: getAlloutputsInAoutputGroups
      summary: 'Get array of all outputs'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/outputs'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - Grouping
      description: 'Output groups'
      operationId: postoutputGroupsByIdoutputs
      summary: 'Add a outputs to a outputGroups'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/outputs'
      responses:
        '201':
          description: 'Created'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/outputs'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /outputGroups/{idParent}/outputs/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of parent object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '806ebe93-aa00-4476-99ea-9e44418a7acd'
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '806ebe93-aa00-4476-99ea-9e44418a7acd'
    get:
      tags:
      - Grouping
      description: 'Output groups'
      operationId: getOneoutputsInAoutputGroups
      summary: 'Get specific outputs'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/outputs'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    delete:
      tags:
      - Grouping
      description: 'Output groups'
      operationId: deleteoutputGroupsByIdoutputs
      summary: 'Remove a outputs from a outputGroups'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/outputs'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /outputGroups/{id}/outputGroups:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the outputGroup object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '806ebe93-aa00-4476-99ea-9e44418a7acd'
    get:
      tags:
      - Grouping
      description: 'Output groups'
      operationId: getAlloutputGroupsInAoutputGroups
      summary: 'Get array of all outputGroups'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/outputGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /patrollingProfiles/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '0592c885-be06-4b65-b058-0118c873b733'
    get:
      tags:
      - Core
      description: 'Patrolling profile'
      operationId: getpatrollingProfilesById
      summary: 'Get specific object of Patrolling profile'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/patrollingProfiles'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    put:
      tags:
      - Core
      description: 'Patrolling profile'
      operationId: putpatrollingProfilesById
      summary: 'Update all fields on Patrolling profile'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/patrollingProfiles'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/patrollingProfiles'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    patch:
      tags:
      - Core
      description: 'Patrolling profile'
      operationId: patchpatrollingProfilesById
      summary: 'Update provided fields on Patrolling profile'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/patrollingProfiles'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/patrollingProfiles'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - Core
      summary: 'Perform a task'
      description: 'Patrolling profile'
      operationId: postTaskForpatrollingProfiles
      parameters:
        - name: 'task'
          in: 'query'
          description: |
            task=AddPatrollingEntry, or task=RemovePatrollingEntry
                 AddPatrollingEntry - Add patrolling entry
                 RemovePatrollingEntry - Remove patrolling entry
          required: true
          schema:
            type: 'string'
            example: 'RemovePatrollingEntry'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              oneOf:
                - $ref: '#/components/schemas/addPatrollingEntry_RequestBody'
                - $ref: '#/components/schemas/removePatrollingEntry_RequestBody'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  result:
                    type: object
                    oneOf:
                    - $ref: '#/components/schemas/addPatrollingEntryServerTask'
                    - $ref: '#/components/schemas/removePatrollingEntryServerTask'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'
  /recordingServers:
    get:
      tags:
      - RecordingServer
      description: 'Recording Server. To include disabled items add ?disabled to the request.'
      operationId: getAllrecordingServers
      summary: 'Get array of all enabled Recording Server'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/recordingServers'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /recordingServers/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '9f21d63b-6693-4dfc-ad0c-829f27ef9315'
    get:
      tags:
      - RecordingServer
      description: 'Recording Server'
      operationId: getrecordingServersById
      summary: 'Get specific object of Recording Server'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/recordingServers'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    put:
      tags:
      - RecordingServer
      description: 'Recording Server'
      operationId: putrecordingServersById
      summary: 'Update all fields on Recording Server'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/recordingServers'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/recordingServers'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    patch:
      tags:
      - RecordingServer
      description: 'Recording Server'
      operationId: patchrecordingServersById
      summary: 'Update provided fields on Recording Server'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/recordingServers'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/recordingServers'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - RecordingServer
      summary: 'Perform a task'
      description: 'Recording Server'
      operationId: postTaskForrecordingServers
      parameters:
        - name: 'task'
          in: 'query'
          description: |
            task=AddHardware, or task=GetOtherDevicesWithMediaOnRecorder, or task=HardwareScan, or task=HardwareScanExpress, or task=LoadTasks
                 AddHardware - Add new hardware. Be aware that newly added hardware, and the devices it contains, will be disabled initially.
                 GetOtherDevicesWithMediaOnRecorder - Get devices with media on recording server
                 HardwareScan - Detect hardware driver
                 HardwareScanExpress - Detect hardware
                 LoadTasks - Load the tasks existing on the server
          required: true
          schema:
            type: 'string'
            example: 'LoadTasks'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              oneOf:
                - $ref: '#/components/schemas/addHardware_RequestBody'
                - $ref: '#/components/schemas/hardwareScan_RequestBody'
                - $ref: '#/components/schemas/hardwareScanExpress_RequestBody'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  result:
                    type: object
                    oneOf:
                    - $ref: '#/components/schemas/addHardwareServerTask'
                    - $ref: '#/components/schemas/classCollectionServerTask'
                    - $ref: '#/components/schemas/hardwareScanServerTask'
                    - $ref: '#/components/schemas/hardwareScanExpressServerTask'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'
  /recordingServers/{id}/hardwareDrivers:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the recordingServer object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '9f21d63b-6693-4dfc-ad0c-829f27ef9315'
    get:
      tags:
      - RecordingServer
      description: 'Recording Server'
      operationId: getAllhardwareDriversInArecordingServers
      summary: 'Get array of all hardwareDrivers'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/hardwareDrivers'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /recordingServers/{idParent}/hardwareDrivers/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of the recordingServer object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '9f21d63b-6693-4dfc-ad0c-829f27ef9315'
      - name: 'id'
        in: 'path'
        description: 'Id of the hardwareDriver object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '9f21d63b-6693-4dfc-ad0c-829f27ef9315'
    get:
      tags:
      - RecordingServer
      description: 'Recording Server'
      operationId: getOnehardwareDriversInArecordingServers
      summary: 'Get specific hardwareDrivers'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/hardwareDrivers'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /recordingServers/{id}/hardware:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the recordingServer object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '9f21d63b-6693-4dfc-ad0c-829f27ef9315'
    get:
      tags:
      - RecordingServer
      description: 'Recording Server'
      operationId: getAllhardwareInArecordingServers
      summary: 'Get array of all hardware'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/hardware'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /recordingServers/{id}/recordingServerFailovers:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the recordingServer object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '9f21d63b-6693-4dfc-ad0c-829f27ef9315'
    get:
      tags:
      - RecordingServer
      description: 'Recording Server'
      operationId: getAllrecordingServerFailoversInArecordingServers
      summary: 'Get array of all recordingServerFailovers'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/recordingServerFailovers'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /recordingServers/{idParent}/recordingServerFailovers/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of the recordingServer object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '9f21d63b-6693-4dfc-ad0c-829f27ef9315'
      - name: 'id'
        in: 'path'
        description: 'Id of the recordingServerFailover object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '9f21d63b-6693-4dfc-ad0c-829f27ef9315'
    get:
      tags:
      - RecordingServer
      description: 'Recording Server'
      operationId: getOnerecordingServerFailoversInArecordingServers
      summary: 'Get specific recordingServerFailovers'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/recordingServerFailovers'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /recordingServers/{id}/recordingServerMulticasts:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the recordingServer object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '9f21d63b-6693-4dfc-ad0c-829f27ef9315'
    get:
      tags:
      - RecordingServer
      description: 'Recording Server'
      operationId: getAllrecordingServerMulticastsInArecordingServers
      summary: 'Get array of all recordingServerMulticasts'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/recordingServerMulticasts'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /recordingServers/{idParent}/recordingServerMulticasts/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of the recordingServer object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '9f21d63b-6693-4dfc-ad0c-829f27ef9315'
      - name: 'id'
        in: 'path'
        description: 'Id of the recordingServerMulticast object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '9f21d63b-6693-4dfc-ad0c-829f27ef9315'
    get:
      tags:
      - RecordingServer
      description: 'Recording Server'
      operationId: getOnerecordingServerMulticastsInArecordingServers
      summary: 'Get specific recordingServerMulticasts'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/recordingServerMulticasts'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /recordingServers/{id}/storages:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the recordingServer object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '9f21d63b-6693-4dfc-ad0c-829f27ef9315'
    get:
      tags:
      - RecordingServer
      description: 'Recording Server'
      operationId: getAllstoragesInArecordingServers
      summary: 'Get array of all storages'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/storages'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - RecordingServer
      description: 'Recording Server'
      operationId: postrecordingServersByIdstorages
      summary: 'Add a storages to a recordingServers'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/storages'
      responses:
        '201':
          description: 'Created'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/storages'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /recordingServers/{idParent}/hardware/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of parent object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '9f21d63b-6693-4dfc-ad0c-829f27ef9315'
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '9f21d63b-6693-4dfc-ad0c-829f27ef9315'
    delete:
      tags:
      - RecordingServer
      description: 'Recording Server'
      operationId: deleterecordingServersByIdhardware
      summary: 'Remove a hardware from a recordingServers'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/hardware'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /recordingServers/{idParent}/storages/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of parent object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '9f21d63b-6693-4dfc-ad0c-829f27ef9315'
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '9f21d63b-6693-4dfc-ad0c-829f27ef9315'
    delete:
      tags:
      - RecordingServer
      description: 'Recording Server'
      operationId: deleterecordingServersByIdstorages
      summary: 'Remove a storages from a recordingServers'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/storages'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /roles:
    get:
      tags:
      - Role
      description: 'Role'
      operationId: getAllroles
      summary: 'Get array of all Role'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/roles'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - Role
      description: 'Role, or perform a task'
      operationId: postrolesById
      summary: 'Add new roles, or task=CopyRole'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              oneOf:
                - $ref: '#/components/schemas/roles'
                - $ref: '#/components/schemas/copyRole_RequestBody'
      responses:
        '201':
          description: 'Created'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/roles'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/copyRoleServerTask'

  /roles/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '4a6c31be-631c-48a7-b5bd-f8d65291c8d8'
    get:
      tags:
      - Role
      description: 'Role'
      operationId: getrolesById
      summary: 'Get specific object of Role'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/roles'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    put:
      tags:
      - Role
      description: 'Role'
      operationId: putrolesById
      summary: 'Update all fields on Role'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/roles'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/roles'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    patch:
      tags:
      - Role
      description: 'Role'
      operationId: patchrolesById
      summary: 'Update provided fields on Role'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/roles'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/roles'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    delete:
      tags:
      - Role
      description: 'Role'
      operationId: deleterolesById
      summary: 'Delete a roles'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/roles'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - Role
      summary: 'Perform a task'
      description: 'Role'
      operationId: postTaskForroles
      parameters:
        - name: 'task'
          in: 'query'
          description: |
            task=SetClientTimeProfile, or task=GetClientTimeProfile, or task=SetClientProfile, or task=ChangeOverallSecurityPermissions
                 SetClientTimeProfile - Set client login time profile
                 GetClientTimeProfile - Get client login time profile
                 SetClientProfile - Set client profile on role
                 ChangeOverallSecurityPermissions - Edit overall security permissions
          required: true
          schema:
            type: 'string'
            example: 'ChangeOverallSecurityPermissions'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              oneOf:
                - $ref: '#/components/schemas/setClientTimeProfile_RequestBody'
                - $ref: '#/components/schemas/setClientProfile_RequestBody'
                - $ref: '#/components/schemas/changeOverallSecurityPermissions_RequestBody'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  result:
                    type: object
                    oneOf:
                    - $ref: '#/components/schemas/setClientTimeProfileServerTask'
                    - $ref: '#/components/schemas/serverTask'
                    - $ref: '#/components/schemas/setClientProfileServerTask'
                    - $ref: '#/components/schemas/changeOverallSecurityPermissionsServerTask'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'
  /roles/{id}/claims:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the role object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '4a6c31be-631c-48a7-b5bd-f8d65291c8d8'
    get:
      tags:
      - Role
      description: 'Role'
      operationId: getAllclaimsInAroles
      summary: 'Get array of all claims'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/claims'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /roles/{id}/users:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '4a6c31be-631c-48a7-b5bd-f8d65291c8d8'
    get:
      tags:
      - Role
      description: 'Role'
      operationId: getAllusersInAroles
      summary: 'Get array of all users'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/users'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - Role
      summary: 'Perform a task'
      description: 'Role'
      operationId: postTaskForrolesusers
      parameters:
        - name: 'task'
          in: 'query'
          description: |
            task=AddRoleMember, or task=RemoveRoleMember
                 AddRoleMember - Add new user or group to role
                 RemoveRoleMember - Remove role member
          required: true
          schema:
            type: 'string'
            example: 'RemoveRoleMember'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              oneOf:
                - $ref: '#/components/schemas/addRoleMember_RequestBody'
                - $ref: '#/components/schemas/removeRoleMember_RequestBody'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  result:
                    type: object
                    oneOf:
                    - $ref: '#/components/schemas/addRoleMemberServerTask'
                    - $ref: '#/components/schemas/removeRoleMemberServerTask'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'
  /roles/{idParent}/users/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of the role object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '4a6c31be-631c-48a7-b5bd-f8d65291c8d8'
      - name: 'id'
        in: 'path'
        description: 'Id of the user object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '4a6c31be-631c-48a7-b5bd-f8d65291c8d8'
    get:
      tags:
      - Role
      description: 'Role'
      operationId: getOneusersInAroles
      summary: 'Get specific users'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/users'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /rules:
    get:
      tags:
      - Rule
      description: 'Rule. To include disabled items add ?disabled to the request.'
      operationId: getAllrules
      summary: 'Get array of all enabled Rule'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/rules'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - Rule
      description: 'Rule'
      operationId: postrulesById
      summary: 'Add new rules'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rules'
      responses:
        '201':
          description: 'Created'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/rules'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /rules/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '43609ca5-bfdd-4238-88ff-686b6657138f'
    get:
      tags:
      - Rule
      description: 'Rule'
      operationId: getrulesById
      summary: 'Get specific object of Rule'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/rules'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    put:
      tags:
      - Rule
      description: 'Rule'
      operationId: putrulesById
      summary: 'Update all fields on Rule'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rules'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/rules'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    patch:
      tags:
      - Rule
      description: 'Rule'
      operationId: patchrulesById
      summary: 'Update provided fields on Rule'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rules'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/rules'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    delete:
      tags:
      - Rule
      description: 'Rule'
      operationId: deleterulesById
      summary: 'Delete a rules'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/rules'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /saveSearches:
    get:
      tags:
      - Client
      description: 'Get array of all saveSearches'
      operationId: getAllsaveSearches
      summary: 'Get array of all saveSearches'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/saveSearches'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - Client
      description: 'Add new saveSearches, or perform a task'
      operationId: postsaveSearchesById
      summary: 'Add new saveSearches, or task=UpdateSaveSearch, or task=GetSaveSearch, or task=FindSaveSearches'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              oneOf:
                - $ref: '#/components/schemas/saveSearches'
                - $ref: '#/components/schemas/updateSaveSearch_RequestBody'
                - $ref: '#/components/schemas/getSaveSearch_RequestBody'
                - $ref: '#/components/schemas/findSaveSearches_RequestBody'
      responses:
        '201':
          description: 'Created'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/saveSearches'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  result:
                    type: object
                    oneOf:
                    - $ref: '#/components/schemas/updateSaveSearchServerTask'
                    - $ref: '#/components/schemas/getSaveSearchServerTask'
                    - $ref: '#/components/schemas/findSaveSearchesServerTask'

  /saveSearches/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '6815cc27-524e-4664-8d1c-28041e28a4d4'
    get:
      tags:
      - Client
      description: 'Get specific object of saveSearches'
      operationId: getsaveSearchesById
      summary: 'Get specific object of saveSearches'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/saveSearches'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    put:
      tags:
      - Client
      description: 'Update all fields on saveSearches'
      operationId: putsaveSearchesById
      summary: 'Update all fields on saveSearches'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/saveSearches'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/saveSearches'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    patch:
      tags:
      - Client
      description: 'Update provided fields on saveSearches'
      operationId: patchsaveSearchesById
      summary: 'Update provided fields on saveSearches'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/saveSearches'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/saveSearches'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    delete:
      tags:
      - Client
      description: 'Delete a saveSearches'
      operationId: deletesaveSearchesById
      summary: 'Delete a saveSearches'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/saveSearches'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /childSites:
    get:
      tags:
      - Core
      description: 'Child sites'
      operationId: getAllchildSites
      summary: 'Get array of all Child sites'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/childSites'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /childSites/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '89b2eec5-8235-4382-8312-c55d87a7b510'
    get:
      tags:
      - Core
      description: 'Child sites'
      operationId: getchildSitesById
      summary: 'Get specific object of Child sites'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/childSites'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    put:
      tags:
      - Core
      description: 'Child sites'
      operationId: putchildSitesById
      summary: 'Update all fields on Child sites'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/childSites'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/childSites'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    patch:
      tags:
      - Core
      description: 'Child sites'
      operationId: patchchildSitesById
      summary: 'Update provided fields on Child sites'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/childSites'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/childSites'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /childSites/{id}/siteAddresses:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the childSite object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '89b2eec5-8235-4382-8312-c55d87a7b510'
    get:
      tags:
      - Core
      description: 'Child sites'
      operationId: getAllsiteAddressesInAchildSites
      summary: 'Get array of all siteAddresses'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/siteAddresses'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /childSites/{id}/childSites:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the childSite object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '89b2eec5-8235-4382-8312-c55d87a7b510'
    get:
      tags:
      - Core
      description: 'Child sites'
      operationId: getAllchildSitesInAchildSites
      summary: 'Get array of all childSites'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/childSites'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /speakers:
    get:
      tags:
      - DeviceConfig
      description: 'Speaker. To include disabled items add ?disabled to the request.'
      operationId: getAllspeakers
      summary: 'Get array of all enabled Speaker'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/speakers'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /speakers/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'f8d828d4-f2fc-4ee1-a7d9-f9bd2c275bd7'
    get:
      tags:
      - DeviceConfig
      description: 'Speaker'
      operationId: getspeakersById
      summary: 'Get specific object of Speaker'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/speakers'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    put:
      tags:
      - DeviceConfig
      description: 'Speaker'
      operationId: putspeakersById
      summary: 'Update all fields on Speaker'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/speakers'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/speakers'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    patch:
      tags:
      - DeviceConfig
      description: 'Speaker'
      operationId: patchspeakersById
      summary: 'Update provided fields on Speaker'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/speakers'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/speakers'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - DeviceConfig
      summary: 'Perform a task'
      description: 'Speaker'
      operationId: postTaskForspeakers
      parameters:
        - name: 'task'
          in: 'query'
          description: |
            task=GetOtherRecordingServersWithMedia, or task=GetOtherRecordingStoragesWithMedia, or task=RetrieveEdgeStorage, or task=TruncateStorage, or task=TruncateStorageOnOtherRecordingServer, or task=ChangeDeviceRecordingStorage, or task=ChangeSecurityPermissions
                 GetOtherRecordingServersWithMedia - Get recording servers with media
                 GetOtherRecordingStoragesWithMedia - [DEPRECATED] This function is deprecated and should not be used. As an alternative, use the value of the 'RecordingStorage' property to get the configured recording storage for the device.
                 RetrieveEdgeStorage - Retrieve recordings from edge storage
                 TruncateStorage - Delete all recordings for device on storage
                 TruncateStorageOnOtherRecordingServer - Delete all recordings for device on another recording server
                 ChangeDeviceRecordingStorage - Change storage for device
                 ChangeSecurityPermissions - Edit permissions
          required: true
          schema:
            type: 'string'
            example: 'ChangeSecurityPermissions'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              oneOf:
                - $ref: '#/components/schemas/retrieveEdgeStorage_RequestBody'
                - $ref: '#/components/schemas/truncateStorageOnOtherRecordingServer_RequestBody'
                - $ref: '#/components/schemas/changeDeviceRecordingStorage_RequestBody'
                - $ref: '#/components/schemas/changeSecurityPermissions_RequestBody'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  result:
                    type: object
                    oneOf:
                    - $ref: '#/components/schemas/classCollectionServerTask'
                    - $ref: '#/components/schemas/retrieveEdgeStorageServerTask'
                    - $ref: '#/components/schemas/serverTask'
                    - $ref: '#/components/schemas/truncateStorageOnOtherRecordingServerServerTask'
                    - $ref: '#/components/schemas/changeDeviceRecordingStorageServerTask'
                    - $ref: '#/components/schemas/changeSecurityPermissionsServerTask'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'
  /speakers/{id}/clientSettings:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the speaker object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'f8d828d4-f2fc-4ee1-a7d9-f9bd2c275bd7'
    get:
      tags:
      - DeviceConfig
      description: 'Speaker'
      operationId: getAllclientSettingsInAspeakers
      summary: 'Get array of all clientSettings'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/clientSettings'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /speakers/{idParent}/clientSettings/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of the speaker object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'f8d828d4-f2fc-4ee1-a7d9-f9bd2c275bd7'
      - name: 'id'
        in: 'path'
        description: 'Id of the clientSetting object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'f8d828d4-f2fc-4ee1-a7d9-f9bd2c275bd7'
    get:
      tags:
      - DeviceConfig
      description: 'Speaker'
      operationId: getOneclientSettingsInAspeakers
      summary: 'Get specific clientSettings'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/clientSettings'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /speakers/{id}/customProperties:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the speaker object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'f8d828d4-f2fc-4ee1-a7d9-f9bd2c275bd7'
    get:
      tags:
      - DeviceConfig
      description: 'Speaker'
      operationId: getAllcustomPropertiesInAspeakers
      summary: 'Get array of all customProperties'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/customProperties'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /speakers/{idParent}/customProperties/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of the speaker object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'f8d828d4-f2fc-4ee1-a7d9-f9bd2c275bd7'
      - name: 'id'
        in: 'path'
        description: 'Id of the customPropertie object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'f8d828d4-f2fc-4ee1-a7d9-f9bd2c275bd7'
    get:
      tags:
      - DeviceConfig
      description: 'Speaker'
      operationId: getOnecustomPropertiesInAspeakers
      summary: 'Get specific customProperties'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/customProperties'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /speakers/{id}/settings:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the speaker object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'f8d828d4-f2fc-4ee1-a7d9-f9bd2c275bd7'
    get:
      tags:
      - DeviceConfig
      description: 'Speaker'
      operationId: getAllsettingsInAspeakers
      summary: 'Get array of all settings'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/settings'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /speakers/{idParent}/settings/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of the speaker object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'f8d828d4-f2fc-4ee1-a7d9-f9bd2c275bd7'
      - name: 'id'
        in: 'path'
        description: 'Id of the setting object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'f8d828d4-f2fc-4ee1-a7d9-f9bd2c275bd7'
    get:
      tags:
      - DeviceConfig
      description: 'Speaker'
      operationId: getOnesettingsInAspeakers
      summary: 'Get specific settings'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/settings'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /speakers/{id}/hardwareDeviceEvents:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the speaker object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'f8d828d4-f2fc-4ee1-a7d9-f9bd2c275bd7'
    get:
      tags:
      - DeviceConfig
      description: 'Speaker'
      operationId: getAllhardwareDeviceEventsInAspeakers
      summary: 'Get array of all hardwareDeviceEvents'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/hardwareDeviceEvents'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /speakers/{idParent}/hardwareDeviceEvents/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of the speaker object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'f8d828d4-f2fc-4ee1-a7d9-f9bd2c275bd7'
      - name: 'id'
        in: 'path'
        description: 'Id of the hardwareDeviceEvent object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'f8d828d4-f2fc-4ee1-a7d9-f9bd2c275bd7'
    get:
      tags:
      - DeviceConfig
      description: 'Speaker'
      operationId: getOnehardwareDeviceEventsInAspeakers
      summary: 'Get specific hardwareDeviceEvents'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/hardwareDeviceEvents'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /speakerGroups:
    get:
      tags:
      - Grouping
      description: 'Speaker groups'
      operationId: getAllspeakerGroups
      summary: 'Get array of all Speaker groups'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/speakerGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - Grouping
      description: 'Speaker groups'
      operationId: postspeakerGroupsById
      summary: 'Add new speakerGroups'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/speakerGroups'
      responses:
        '201':
          description: 'Created'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/speakerGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /speakerGroups/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '097b561d-e5b4-4c73-be5e-8289a3df0390'
    get:
      tags:
      - Grouping
      description: 'Speaker groups'
      operationId: getspeakerGroupsById
      summary: 'Get specific object of Speaker groups'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/speakerGroups'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    put:
      tags:
      - Grouping
      description: 'Speaker groups'
      operationId: putspeakerGroupsById
      summary: 'Update all fields on Speaker groups'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/speakerGroups'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/speakerGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    patch:
      tags:
      - Grouping
      description: 'Speaker groups'
      operationId: patchspeakerGroupsById
      summary: 'Update provided fields on Speaker groups'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/speakerGroups'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/speakerGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    delete:
      tags:
      - Grouping
      description: 'Speaker groups'
      operationId: deletespeakerGroupsById
      summary: 'Delete a speakerGroups'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/speakerGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /speakerGroups/{id}/speakers:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the speakerGroup object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '097b561d-e5b4-4c73-be5e-8289a3df0390'
    get:
      tags:
      - Grouping
      description: 'Speaker groups'
      operationId: getAllspeakersInAspeakerGroups
      summary: 'Get array of all speakers'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/speakers'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - Grouping
      description: 'Speaker groups'
      operationId: postspeakerGroupsByIdspeakers
      summary: 'Add a speakers to a speakerGroups'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/speakers'
      responses:
        '201':
          description: 'Created'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/speakers'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /speakerGroups/{idParent}/speakers/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of parent object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '097b561d-e5b4-4c73-be5e-8289a3df0390'
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '097b561d-e5b4-4c73-be5e-8289a3df0390'
    get:
      tags:
      - Grouping
      description: 'Speaker groups'
      operationId: getOnespeakersInAspeakerGroups
      summary: 'Get specific speakers'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/speakers'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    delete:
      tags:
      - Grouping
      description: 'Speaker groups'
      operationId: deletespeakerGroupsByIdspeakers
      summary: 'Remove a speakers from a speakerGroups'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/speakers'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /speakerGroups/{id}/speakerGroups:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the speakerGroup object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '097b561d-e5b4-4c73-be5e-8289a3df0390'
    get:
      tags:
      - Grouping
      description: 'Speaker groups'
      operationId: getAllspeakerGroupsInAspeakerGroups
      summary: 'Get array of all speakerGroups'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/speakerGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /storages/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'f1e406c5-2da8-47cd-8b1c-9a2f8db33949'
    get:
      tags:
      - RecordingServer
      description: 'Storage'
      operationId: getstoragesById
      summary: 'Get specific object of Storage'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/storages'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    put:
      tags:
      - RecordingServer
      description: 'Storage'
      operationId: putstoragesById
      summary: 'Update all fields on Storage'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/storages'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/storages'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    patch:
      tags:
      - RecordingServer
      description: 'Storage'
      operationId: patchstoragesById
      summary: 'Update provided fields on Storage'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/storages'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/storages'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - RecordingServer
      summary: 'Perform a task'
      description: 'Storage'
      operationId: postTaskForstorages
      parameters:
        - name: 'task'
          in: 'query'
          description: |
            task=GetDevicesUsingStorage, or task=ReadStorageInformation, or task=SetStorageAsDefault, or task=EnableEncryption, or task=MoveRecordingStorage, or task=ChangeEncryptionMethod, or task=ValidateStorageEncryptionPassword, or task=DisableEncryption, or task=ChangePasswordStorageEncryption
                 GetDevicesUsingStorage - Get devices using this storage
                 ReadStorageInformation - Read storage information
                 SetStorageAsDefault - Set storage as default
                 EnableEncryption - Enable encryption on recording storage
                 MoveRecordingStorage - Move storage
                 ChangeEncryptionMethod - Change encryption method
                 ValidateStorageEncryptionPassword - Validate encryption password on recording storage
                 DisableEncryption - Disable encryption on recording storage
                 ChangePasswordStorageEncryption - Change encryption password for recording storage
          required: true
          schema:
            type: 'string'
            example: 'ChangePasswordStorageEncryption'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              oneOf:
                - $ref: '#/components/schemas/enableEncryption_RequestBody'
                - $ref: '#/components/schemas/moveRecordingStorage_RequestBody'
                - $ref: '#/components/schemas/changeEncryptionMethod_RequestBody'
                - $ref: '#/components/schemas/validateStorageEncryptionPassword_RequestBody'
                - $ref: '#/components/schemas/disableEncryption_RequestBody'
                - $ref: '#/components/schemas/changePasswordStorageEncryption_RequestBody'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  result:
                    type: object
                    oneOf:
                    - $ref: '#/components/schemas/classCollectionServerTask'
                    - $ref: '#/components/schemas/serverTask'
                    - $ref: '#/components/schemas/enableEncryptionServerTask'
                    - $ref: '#/components/schemas/moveRecordingStorageServerTask'
                    - $ref: '#/components/schemas/changeEncryptionMethodServerTask'
                    - $ref: '#/components/schemas/validateStorageEncryptionPasswordServerTask'
                    - $ref: '#/components/schemas/disableEncryptionServerTask'
                    - $ref: '#/components/schemas/changePasswordStorageEncryptionServerTask'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'
  /storages/{id}/archiveStorages:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the storage object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'f1e406c5-2da8-47cd-8b1c-9a2f8db33949'
    get:
      tags:
      - RecordingServer
      description: 'Storage'
      operationId: getAllarchiveStoragesInAstorages
      summary: 'Get array of all archiveStorages'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/archiveStorages'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - RecordingServer
      description: 'Storage'
      operationId: poststoragesByIdarchiveStorages
      summary: 'Add a archiveStorages to a storages'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/archiveStorages'
      responses:
        '201':
          description: 'Created'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/archiveStorages'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /storages/{idParent}/archiveStorages/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of parent object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'f1e406c5-2da8-47cd-8b1c-9a2f8db33949'
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'f1e406c5-2da8-47cd-8b1c-9a2f8db33949'
    delete:
      tags:
      - RecordingServer
      description: 'Storage'
      operationId: deletestoragesByIdarchiveStorages
      summary: 'Remove a archiveStorages from a storages'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/archiveStorages'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /storageInformation/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'ab067b12-25b6-4784-aeba-ee09b00f3bf2'
    get:
      tags:
      - RecordingServer
      description: 'Get specific object of storageInformation'
      operationId: getstorageInformationById
      summary: 'Get specific object of storageInformation'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/storageInformation'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    put:
      tags:
      - RecordingServer
      description: 'Update all fields on storageInformation'
      operationId: putstorageInformationById
      summary: 'Update all fields on storageInformation'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/storageInformation'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/storageInformation'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    patch:
      tags:
      - RecordingServer
      description: 'Update provided fields on storageInformation'
      operationId: patchstorageInformationById
      summary: 'Update provided fields on storageInformation'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/storageInformation'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/storageInformation'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /streams/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'e2537088-a892-43d8-885d-a454b5f98869'
    get:
      tags:
      - DeviceConfig
      description: 'Stream'
      operationId: getstreamsById
      summary: 'Get specific object of Stream'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/streams'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    put:
      tags:
      - DeviceConfig
      description: 'Stream'
      operationId: putstreamsById
      summary: 'Update all fields on Stream'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/streams'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/streams'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    patch:
      tags:
      - DeviceConfig
      description: 'Stream'
      operationId: patchstreamsById
      summary: 'Update provided fields on Stream'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/streams'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/streams'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - DeviceConfig
      summary: 'Perform a task'
      description: 'Stream'
      operationId: postTaskForstreams
      parameters:
        - name: 'task'
          in: 'query'
          description: |
            task=AddStream, or task=RemoveStream
                 AddStream - Add stream
                 RemoveStream - Remove stream
          required: true
          schema:
            type: 'string'
            example: 'RemoveStream'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              oneOf:
                - $ref: '#/components/schemas/removeStream_RequestBody'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  result:
                    type: object
                    oneOf:
                    - $ref: '#/components/schemas/serverTask'
                    - $ref: '#/components/schemas/removeStreamServerTask'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'
  /sites:
    get:
      tags:
      - Core
      description: 'Management Server'
      operationId: getAllsites
      summary: 'Get array of all Management Server'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/sites'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - Core
      summary: 'Perform a task'
      description: 'Management Server'
      operationId: postTaskForsites
      parameters:
        - name: 'task'
          in: 'query'
          description: |
            task=LoadTasks, or task=ClientLogOnSupported, or task=UploadFileChunk
                 LoadTasks - Load the tasks existing on the server
                 ClientLogOnSupported - Client application login supported
                 UploadFileChunk - Upload file chunk
          required: true
          schema:
            type: 'string'
            example: 'UploadFileChunk'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              oneOf:
                - $ref: '#/components/schemas/clientLogOnSupported_RequestBody'
                - $ref: '#/components/schemas/uploadFileChunk_RequestBody'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  result:
                    type: object
                    oneOf:
                    - $ref: '#/components/schemas/classCollectionServerTask'
                    - $ref: '#/components/schemas/clientLogOnSupportedServerTask'
                    - $ref: '#/components/schemas/uploadFileChunkServerTask'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'
  /sites/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '00645af0-db75-40c2-82cc-2ad2e820aca9'
    get:
      tags:
      - Core
      description: 'Management Server'
      operationId: getsitesById
      summary: 'Get specific object of Management Server'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/sites'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    put:
      tags:
      - Core
      description: 'Management Server'
      operationId: putsitesById
      summary: 'Update all fields on Management Server'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sites'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/sites'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    patch:
      tags:
      - Core
      description: 'Management Server'
      operationId: patchsitesById
      summary: 'Update provided fields on Management Server'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sites'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/sites'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /systemAddresses:
    get:
      tags:
      - Core
      description: 'Address'
      operationId: getAllsystemAddresses
      summary: 'Get array of all Address'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/systemAddresses'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /timeProfiles:
    get:
      tags:
      - Rule
      description: 'Time profile'
      operationId: getAlltimeProfiles
      summary: 'Get array of all Time profile'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/timeProfiles'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - Rule
      description: 'Time profile'
      operationId: posttimeProfilesById
      summary: 'Add new timeProfiles'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/timeProfiles'
      responses:
        '201':
          description: 'Created'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/timeProfiles'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /timeProfiles/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'da463d61-0d95-42a7-a063-918387743029'
    get:
      tags:
      - Rule
      description: 'Time profile'
      operationId: gettimeProfilesById
      summary: 'Get specific object of Time profile'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/timeProfiles'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    put:
      tags:
      - Rule
      description: 'Time profile'
      operationId: puttimeProfilesById
      summary: 'Update all fields on Time profile'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/timeProfiles'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/timeProfiles'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    patch:
      tags:
      - Rule
      description: 'Time profile'
      operationId: patchtimeProfilesById
      summary: 'Update provided fields on Time profile'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/timeProfiles'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/timeProfiles'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    delete:
      tags:
      - Rule
      description: 'Time profile'
      operationId: deletetimeProfilesById
      summary: 'Delete a timeProfiles'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/timeProfiles'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /toolOptions:
    get:
      tags:
      - Core
      description: 'System options'
      operationId: getAlltoolOptions
      summary: 'Get array of all System options'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/toolOptions'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /toolOptions/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'ec9c3acc-518e-4cfd-931b-7ee69925b82c'
    get:
      tags:
      - Core
      description: 'System options'
      operationId: gettoolOptionsById
      summary: 'Get specific object of System options'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/toolOptions'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    put:
      tags:
      - Core
      description: 'System options'
      operationId: puttoolOptionsById
      summary: 'Update all fields on System options'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/toolOptions'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/toolOptions'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    patch:
      tags:
      - Core
      description: 'System options'
      operationId: patchtoolOptionsById
      summary: 'Update provided fields on System options'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/toolOptions'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/toolOptions'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /userDefinedEvents:
    get:
      tags:
      - Events
      description: 'User-defined event'
      operationId: getAlluserDefinedEvents
      summary: 'Get array of all User-defined event'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/userDefinedEvents'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - Events
      description: 'User-defined event'
      operationId: postuserDefinedEventsById
      summary: 'Add new userDefinedEvents'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userDefinedEvents'
      responses:
        '201':
          description: 'Created'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/userDefinedEvents'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /userDefinedEvents/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'd8b5a5a4-161d-42c0-bfb8-6a023d6f43e1'
    get:
      tags:
      - Events
      description: 'User-defined event'
      operationId: getuserDefinedEventsById
      summary: 'Get specific object of User-defined event'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/userDefinedEvents'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    put:
      tags:
      - Events
      description: 'User-defined event'
      operationId: putuserDefinedEventsById
      summary: 'Update all fields on User-defined event'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userDefinedEvents'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/userDefinedEvents'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    patch:
      tags:
      - Events
      description: 'User-defined event'
      operationId: patchuserDefinedEventsById
      summary: 'Update provided fields on User-defined event'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userDefinedEvents'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/userDefinedEvents'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    delete:
      tags:
      - Events
      description: 'User-defined event'
      operationId: deleteuserDefinedEventsById
      summary: 'Delete a userDefinedEvents'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/userDefinedEvents'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - Events
      summary: 'Perform a task'
      description: 'User-defined event'
      operationId: postTaskForuserDefinedEvents
      parameters:
        - name: 'task'
          in: 'query'
          description: |
            task=ChangeSecurityPermissions
                 ChangeSecurityPermissions - Edit permissions
          required: true
          schema:
            type: 'string'
            example: 'ChangeSecurityPermissions'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/changeSecurityPermissions_RequestBody'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/changeSecurityPermissionsServerTask'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'
  /videoWalls:
    get:
      tags:
      - Client
      description: 'Video wall'
      operationId: getAllvideoWalls
      summary: 'Get array of all Video wall'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/videoWalls'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - Client
      description: 'Video wall'
      operationId: postvideoWallsById
      summary: 'Add new videoWalls'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/videoWalls'
      responses:
        '201':
          description: 'Created'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/videoWalls'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /videoWalls/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '1da906e6-9599-4f39-b63a-e1a597649ae7'
    get:
      tags:
      - Client
      description: 'Video wall'
      operationId: getvideoWallsById
      summary: 'Get specific object of Video wall'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/videoWalls'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    put:
      tags:
      - Client
      description: 'Video wall'
      operationId: putvideoWallsById
      summary: 'Update all fields on Video wall'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/videoWalls'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/videoWalls'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    patch:
      tags:
      - Client
      description: 'Video wall'
      operationId: patchvideoWallsById
      summary: 'Update provided fields on Video wall'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/videoWalls'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/videoWalls'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    delete:
      tags:
      - Client
      description: 'Video wall'
      operationId: deletevideoWallsById
      summary: 'Delete a videoWalls'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/videoWalls'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - Client
      summary: 'Perform a task'
      description: 'Video wall'
      operationId: postTaskForvideoWalls
      parameters:
        - name: 'task'
          in: 'query'
          description: |
            task=ChangeSecurityPermissions
                 ChangeSecurityPermissions - Edit permissions
          required: true
          schema:
            type: 'string'
            example: 'ChangeSecurityPermissions'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/changeSecurityPermissions_RequestBody'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/changeSecurityPermissionsServerTask'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'
  /videoWalls/{id}/monitors:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the videoWall object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '1da906e6-9599-4f39-b63a-e1a597649ae7'
    get:
      tags:
      - Client
      description: 'Video wall'
      operationId: getAllmonitorsInAvideoWalls
      summary: 'Get array of all monitors'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/monitors'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - Client
      description: 'Video wall'
      operationId: postvideoWallsByIdmonitors
      summary: 'Add a monitors to a videoWalls'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/monitors'
      responses:
        '201':
          description: 'Created'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/monitors'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /videoWalls/{id}/videoWallPresets:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the videoWall object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '1da906e6-9599-4f39-b63a-e1a597649ae7'
    get:
      tags:
      - Client
      description: 'Video wall'
      operationId: getAllvideoWallPresetsInAvideoWalls
      summary: 'Get array of all videoWallPresets'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/videoWallPresets'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - Client
      description: 'Video wall'
      operationId: postvideoWallsByIdvideoWallPresets
      summary: 'Add a videoWallPresets to a videoWalls'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/videoWallPresets'
      responses:
        '201':
          description: 'Created'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/videoWallPresets'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /videoWalls/{idParent}/videoWallPresets/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of parent object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '1da906e6-9599-4f39-b63a-e1a597649ae7'
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '1da906e6-9599-4f39-b63a-e1a597649ae7'
    get:
      tags:
      - Client
      description: 'Video wall'
      operationId: getOnevideoWallPresetsInAvideoWalls
      summary: 'Get specific videoWallPresets'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/videoWallPresets'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    delete:
      tags:
      - Client
      description: 'Video wall'
      operationId: deletevideoWallsByIdvideoWallPresets
      summary: 'Remove a videoWallPresets from a videoWalls'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/videoWallPresets'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /videoWalls/{idParent}/monitors/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of parent object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '1da906e6-9599-4f39-b63a-e1a597649ae7'
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '1da906e6-9599-4f39-b63a-e1a597649ae7'
    delete:
      tags:
      - Client
      description: 'Video wall'
      operationId: deletevideoWallsByIdmonitors
      summary: 'Remove a monitors from a videoWalls'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/monitors'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /views:
    get:
      tags:
      - Client
      description: 'View folder'
      operationId: getAllviews
      summary: 'Get array of all View folder'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/views'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /views/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '3800261d-bd75-4d01-a822-e2a0d364d208'
    get:
      tags:
      - Client
      description: 'View folder'
      operationId: getviewsById
      summary: 'Get specific object of View folder'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/views'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    put:
      tags:
      - Client
      description: 'View folder'
      operationId: putviewsById
      summary: 'Update all fields on View folder'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/views'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/views'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    patch:
      tags:
      - Client
      description: 'View folder'
      operationId: patchviewsById
      summary: 'Update provided fields on View folder'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/views'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/views'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /viewGroups:
    get:
      tags:
      - Client
      description: 'View groups'
      operationId: getAllviewGroups
      summary: 'Get array of all View groups'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/viewGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - Client
      description: 'View groups'
      operationId: postviewGroupsById
      summary: 'Add new viewGroups'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/viewGroups'
      responses:
        '201':
          description: 'Created'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/viewGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /viewGroups/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '5f6aa578-76f5-4cbc-8b05-a078e10512a2'
    get:
      tags:
      - Client
      description: 'View groups'
      operationId: getviewGroupsById
      summary: 'Get specific object of View groups'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/viewGroups'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    put:
      tags:
      - Client
      description: 'View groups'
      operationId: putviewGroupsById
      summary: 'Update all fields on View groups'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/viewGroups'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/viewGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    patch:
      tags:
      - Client
      description: 'View groups'
      operationId: patchviewGroupsById
      summary: 'Update provided fields on View groups'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/viewGroups'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/viewGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    delete:
      tags:
      - Client
      description: 'View groups'
      operationId: deleteviewGroupsById
      summary: 'Delete a viewGroups'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/viewGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /viewGroups/{id}/views:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the viewGroup object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '5f6aa578-76f5-4cbc-8b05-a078e10512a2'
    get:
      tags:
      - Client
      description: 'View groups'
      operationId: getAllviewsInAviewGroups
      summary: 'Get array of all views'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/views'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

    post:
      tags:
      - Client
      description: 'View groups'
      operationId: postviewGroupsByIdviews
      summary: 'Add a views to a viewGroups'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/views'
      responses:
        '201':
          description: 'Created'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/views'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /viewGroups/{id}/viewGroups:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the viewGroup object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '5f6aa578-76f5-4cbc-8b05-a078e10512a2'
    get:
      tags:
      - Client
      description: 'View groups'
      operationId: getAllviewGroupsInAviewGroups
      summary: 'Get array of all viewGroups'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/viewGroups'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /viewGroups/{idParent}/views/{id}:
    parameters:
      - name: 'idParent'
        in: 'path'
        description: 'Id of parent object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '5f6aa578-76f5-4cbc-8b05-a078e10512a2'
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: '5f6aa578-76f5-4cbc-8b05-a078e10512a2'
    delete:
      tags:
      - Client
      description: 'View groups'
      operationId: deleteviewGroupsByIdviews
      summary: 'Remove a views from a viewGroups'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/views'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /tasks:
    get:
      tags:
      - Core
      description: 'Tasks'
      operationId: getAlltasks
      summary: 'Get array of all Tasks'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/tasks'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /tasks/{id}:
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Id of the object'
        required: true
        schema:
          type: 'string'
          format: 'guid'
          example: 'd6ae0f81-b855-4f7a-b6c5-fb35e1d56ea5'
    get:
      tags:
      - Core
      description: 'Tasks'
      operationId: gettasksById
      summary: 'Get specific object of Tasks'
      parameters:
        - name: 'tasks'
          in: 'query'
          description: 'Get list of all tasks supported by this object'
          required: false
          schema:
            type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/tasks'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/taskList'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/resourceList'
        '400':
          description: 'BadRequest'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: 'Forbidden'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: 'NotFound'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error404'

  /translations:
    get:
      tags:
      - Core
      description: 'Get list of all translations for one language'
      operationId: getAllTranslations
      summary: 'Get list of all translations for one language'
      parameters:
        - name: 'language'
          in: 'query'
          description: 'Select what language to translate to, e.g. en-us'
          required: true
          schema:
            type: 'string'
            example: 'language=en-us'
      responses:
        '200':
          description: 'OK'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: '#/components/schemas/translations'
        '401':
          description: 'Unauthorized'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/error401'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    accessControlSystems:
      type: object
      description: 'Access control systems'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Test System'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: '80fe8f7e-473b-4aeb-a9e8-1ea7dcc335e6'
        name:
          type: string
          readOnly: true
          description: 'Name'
          example: 'Test System'
        ruleGroup:
          type: string
          readOnly: true
          description: 'Rule group path'
          example: 'AccessControlRuleGroup[7E3BBF6C-4A47-0892-0FAC-CAA6FAB39E63]'
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'accessControlSystems'
                id:
                  type: string
                  example: '80fe8f7e-473b-4aeb-a9e8-1ea7dcc335e6'

    accessControlUnits:
      type: object
      description: 'Access control units'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Controller 1'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: 'e4d81a4d-b0cc-4033-be19-2b50a4469548'
        name:
          type: string
          readOnly: true
          description: 'Name'
          example: 'Controller 1'
        ruleGroup:
          type: string
          readOnly: true
          description: 'Rule group path'
          example: 'AccessControlRuleGroup[E8F9011A-1E63-1B66-347F-0DAD3035E81E]'
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'accessControlUnits'
                id:
                  type: string
                  example: 'e4d81a4d-b0cc-4033-be19-2b50a4469548'
            parent:
              type: object
              properties:
                type:
                  type: string
                  example: 'accessControlSystems'
                id:
                  type: string
                  example: '80fe8f7e-473b-4aeb-a9e8-1ea7dcc335e6'

    alarmDefinitions:
      type: object
      description: 'Alarm definitions'
      properties:
        enabled:
          type: boolean
          description: ''
          example: true
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Alarm High Priority'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: '9094284b-34c3-4e53-a3d7-8e7e3652567b'
        name:
          type: string
          description: 'Name'
          example: 'Alarm High Priority'
        description:
          type: string
          description: 'Description'
          example: 'AlarmDefinition may have a long description'
        eventTypeGroup:
          type: string
          enum:
          - '1eacbcad-d566-4375-834b-cfbe3d937caa'
          - '6b90aee7-e6a5-4b5c-82aa-1686c19afe19'
          - 'b1ca6710-f244-4ce2-8daf-662e342c405a'
          - '64d2c24b-a92f-48a0-b9ca-707af7828d67'
          - '5946b6fa-44d9-4f4c-82bb-46a17b924265'
          - '2fb8e979-188e-44cc-b1b7-a7ed9c91e5c0'
          - '00000000-0000-0000-0000-000000000000'
          - '1d3e945c-ecf3-49eb-85b2-3f79b8a14927'
          - 'a96692c8-51b1-4f87-b12c-0d3d9cbfc5a4'
          description: |
            Triggering event group. Defines a group of events in the same area.
            Value map to display names: 
            1eacbcad-d566-4375-834b-cfbe3d937caa=Device Events  
            6b90aee7-e6a5-4b5c-82aa-1686c19afe19=Hardware Events  
            b1ca6710-f244-4ce2-8daf-662e342c405a=System Events  
            64d2c24b-a92f-48a0-b9ca-707af7828d67=Recording Server Events  
            5946b6fa-44d9-4f4c-82bb-46a17b924265=External Events  
            2fb8e979-188e-44cc-b1b7-a7ed9c91e5c0=System Monitor Events  
            00000000-0000-0000-0000-000000000000=Undefined  
            1d3e945c-ecf3-49eb-85b2-3f79b8a14927=Match lists  
            a96692c8-51b1-4f87-b12c-0d3d9cbfc5a4=Analytics Events  
          example: '5946b6fa-44d9-4f4c-82bb-46a17b924265'
        eventType:
          type: string
          enum:
          - '0fcb1955-0e80-4fd4-a78a-db47ee89700c'
          description: |
            Triggering event type. Defines the type of event that should trigger an alarm, when received from the source defined.
            Value map to display names: 
            0fcb1955-0e80-4fd4-a78a-db47ee89700c=External Event  
          example: '0fcb1955-0e80-4fd4-a78a-db47ee89700c'
        sourceList:
          type: array
          items:
            $ref: '#/components/schemas/path_userDefinedEvents'
        enableRule:
          type: string
          enum:
          - '0'
          - '1'
          - '2'
          description: |
            Enable rule. Defines when the alarm can be triggered. Options are: Always, by TimeProfile or by events.  When TimeProfile is defined the TimeProfile property must contain a valid TimeProfile path, when enabled by events then both EnablingEvents and DisablingEvents must be defined.
            Value map to display names: 
            0=Always  
            1=TimeProfile  
            2=EventTriggered  
          example: '0'
        timeProfile:
          $ref: '#/components/schemas/path_timeProfiles'
        enableEventList:
          type: array
          items:
            $ref: '#/components/schemas/path_userDefinedEvents'
        disableEventList:
          type: array
          items:
            $ref: '#/components/schemas/path_userDefinedEvents'
        managementTimeoutTime:
          type: string
          description: 'Operator action time limit. If operator action is required within a specific time, the time is defined here.  Format is like: HH:mm.ss. Valid values are the same as defined in the Management Client, e.g. 1 minute, 5 minutes etc.  Default is 1 minute.'
          example: '00:01:00'
        managementTimeoutEventList:
          type: array
          items:
            $ref: '#/components/schemas/path_userDefinedEvents'
        relatedCameraList:
          type: array
          items:
            $ref: '#/components/schemas/path_cameras'
        mapType:
          type: string
          enum:
          - '0'
          - '1'
          - '2'
          description: |
            Alarm manager view.
            Value map to display names: 
            0=None  
            1=Map  
            2=Smart Map  
          example: '0'
        relatedMap:
          type: string
          enum:
          - '00000000-0000-0000-0000-000000000000'
          description: |
            Related map. Defines what map to show in the alarm manager, when alarm is selected.
            Value map to display names: 
            00000000-0000-0000-0000-000000000000=  
          example: '00000000-0000-0000-0000-000000000000'
        owner:
          type: string
          description: 'Owner. Defines the initial owner. Should be formatted as Identity.ToString() does, like *John Doe (Acme/JD)*'
          example: 'TA Test User (ta\tatest)'
        priority:
          type: string
          enum:
          - '8188ff24-b5da-4c19-9ebf-c1d8fc2caa75'
          - '9ad9338b-22ba-4f2e-bf62-e6948ae99bbf'
          - '34f1f987-6854-44fb-88a5-daa0add1e38a'
          - '7dfe6616-a40e-493a-8775-d1d3263efffc'
          description: |
            Priority. Sets the priority. Can be High, Medium, Low.
            Value map to display names: 
            8188ff24-b5da-4c19-9ebf-c1d8fc2caa75=High  
            9ad9338b-22ba-4f2e-bf62-e6948ae99bbf=Medium  
            34f1f987-6854-44fb-88a5-daa0add1e38a=Low  
            7dfe6616-a40e-493a-8775-d1d3263efffc=Custom  
          example: '8188ff24-b5da-4c19-9ebf-c1d8fc2caa75'
        category:
          type: string
          enum:
          - '00000000-0000-0000-0000-000000000000'
          - 'fe24c094-dc74-45ea-aa00-84b898df1925'
          description: |
            Alarm category. Sets the category of the alarm. Valid options are defined in the Management Client.
            Value map to display names: 
            00000000-0000-0000-0000-000000000000=  
            fe24c094-dc74-45ea-aa00-84b898df1925=Test category  
          example: 'fe24c094-dc74-45ea-aa00-84b898df1925'
        triggerEventlist:
          type: array
          items:
            $ref: '#/components/schemas/path_userDefinedEvents'
        autoClose:
          type: boolean
          readOnly: true
          description: 'Auto-close alarm: . Defines if an alarm should be closed automatically upon reception of a specific message from save source.'
          example: False
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'alarmDefinitions'
                id:
                  type: string
                  example: '9094284b-34c3-4e53-a3d7-8e7e3652567b'

    analyticsEvents:
      type: object
      description: 'Analytics event'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'MyAnalyticsEvent'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: 'a03af6dd-262b-431c-864a-e92e567248e2'
        name:
          type: string
          description: 'Name'
          example: 'MyAnalyticsEvent'
        lastModified:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Last modified'
          example: '2022-05-23T09:24:58.9130000+02:00'
        description:
          type: string
          description: 'Description'
          example: 'AnalyticsEvent may have a long description'
        sourceArray:
          type: array
          readOnly: true
          items:
            type: string
          description: 'Source itemtypes. Contains an array of possible sources of the event.  Can contain *Camera*, *Hardware* and other itemtype values. For MIP plugin events the source itemtype is *MIPItem* and the filter contains the MIP Kind of source.  The actual source is selected in the rule and alarm definition configuration.'
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'analyticsEvents'
                id:
                  type: string
                  example: 'a03af6dd-262b-431c-864a-e92e567248e2'

    archiveSchedule:
      type: object
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'ArchiveSchedule'
        frequencyType:
          type: string
          enum:
          - 'Unknown'
          - 'Daily'
          - 'Weekly'
          - 'Monthly'
          - 'MonthlyRelative'
          description: |
            Recurrence pattern. Sets the recurrence pattern to daily, weekly or monthly.
            Value map to display names: 
            Unknown=Unknown  
            Daily=Daily  
            Weekly=Weekly  
            Monthly=Monthly  
            MonthlyRelative=MonthlyRelative  
          example: 'Daily'
        frequencyRecurrenceFactor:
          type: integer
          description: 'Recurrence pattern on weeks/months. Sets the recurrence pattern to daily, weekly or monthly.'
          example: 1
        frequencyInterval:
          type: integer
          description: 'Recurrence pattern on days. Defines the ‘Recurrence pattern on days’, which determines how often the archiving is scheduled to run. This property is always interpreted relative to the value of the ‘Recurrence pattern’ property.'
          example: 1
        frequencyRelativeInterval:
          type: string
          enum:
          - 'First'
          - 'Second'
          - 'Third'
          - 'Fourth'
          - 'Last'
          description: |
            Recurrence pattern on relative weekday. Defines the ordinal value of a day relative to the first day of the month, such as first, second or last.
            Value map to display names: 
            First=First  
            Second=Second  
            Third=Third  
            Fourth=Fourth  
            Last=Last  
          example: 'First'
        frequencySubDayType:
          type: string
          enum:
          - 'Unknown'
          - 'Once'
          - 'Hour'
          description: |
            Daily recurrence range type. Defines how often the archiving reoccurs on the same day.
            Value map to display names: 
            Unknown=Unknown  
            Once=Once  
            Hour=Hour  
          example: 'Once'
        frequencySubDayInterval:
          type: integer
          description: 'Hourly recurrence range type. Defines the interval between scheduled archiving that run during the day.'
          example: 0
        activeStartTimeOfDay:
          type: number
          format: double
          description: 'Recurrence range start time. Defines the time when the archiving schedule starts for the day in seconds. The value have to be between 0 and 86399.'
          example: 0
        activeEndTimeOfDay:
          type: number
          format: double
          description: 'Recurrence range end time. Defines the time when the archiving schedule ends for the day in seconds. The value have to be between 0 and 86399.'
          example: 86399
    archiveStorages:
      type: object
      description: 'Archives'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'MyArchive'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: 'a0136b02-f0ba-4da1-890a-d5818541287d'
        name:
          type: string
          description: 'Name'
          example: 'MyArchive'
        description:
          type: string
          description: 'Description'
          example: 'ArchiveStorage may have a long description'
        createdDate:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Created date'
          example: '2022-05-23T09:24:58.9130000+02:00'
        lastModified:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Last modified'
          example: '2022-05-23T09:24:58.9130000+02:00'
        diskPath:
          type: string
          readOnly: true
          description: 'Path. The path to the archive'
          example: 'c:\archive'
        retainMinutes:
          type: integer
          description: 'Retention time. The number of minutes that must elapse before data are deleted or archived. The default value is 1 day'
          example: 11080
        maxSize:
          type: integer
          description: 'Maximum size. The maximum size of the archive storage in MB. The default value is 1 GB'
          example: 1024
        framerateReductionEnabled:
          type: boolean
          description: 'Frame reduction enabled. Specifies if frame rate reduction is enabled or not on the archive'
          example: False
        targetFramerate:
          type: number
          format: double
          description: 'Frame rate. The frame rate reduction of media data in frames per second'
          example: 5
        archiveSchedule:
          $ref: '#/components/schemas/archiveSchedule'
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'archiveStorages'
                id:
                  type: string
                  example: 'a0136b02-f0ba-4da1-890a-d5818541287d'
            parent:
              type: object
              properties:
                type:
                  type: string
                  example: 'storages'
                id:
                  type: string
                  example: 'f1e406c5-2da8-47cd-8b1c-9a2f8db33949'

    archiveStorageInformation:
      type: object
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
        anyTablesWithData:
          type: string
          readOnly: true
          enum:
          - 'Unknown'
          - 'ContainsData'
          - 'DoesNotContainData'
          description: |
            Any table with data. Specifies if status regarding data usage have been received from the recording server (Unknown if no status have been received).
            Value map to display names: 
            Unknown=Unknown  
            ContainsData=ContainsData  
            DoesNotContainData=DoesNotContainData  
          example: 'ContainsData'
        lastUpdated:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Last update. Shows when status regarding data usage was received from the recording server'
          example: '2022-05-23T09:24:58.9130000+02:00'
        lockedUsedSpace:
          type: integer
          readOnly: true
          description: 'Locked data (MB). Evidence locked data in storage or archive (in MB)'
          example: 0
        usedSpace:
          type: integer
          readOnly: true
          description: 'Used space (MB). Data in storage or archive (in MB)'
          example: 554
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'archiveStorageInformation'
                id:
                  type: string
                  example: '23aac652-e051-4108-a169-9c74cdd76fb3'
            parent:
              type: object
              properties:
                type:
                  type: string
                  example: 'archiveStorages'
                id:
                  type: string
                  example: 'a0136b02-f0ba-4da1-890a-d5818541287d'

    audioMessages:
      type: object
      description: 'Audio message'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'MyAudioMessage'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: '58556053-ccdc-4315-a82f-dccc0685b593'
        name:
          type: string
          description: 'Name'
          example: 'MyAudioMessage'
        description:
          type: string
          description: 'Description'
          example: 'AudioMessage may have a long description'
        lastModified:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Last modified'
          example: '2022-05-23T09:24:58.9130000+02:00'
        originalFileName:
          type: string
          readOnly: true
          description: 'Original file name. The original file name of the audio message that was uploaded'
          example: 'mysound.wav'
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'audioMessages'
                id:
                  type: string
                  example: '58556053-ccdc-4315-a82f-dccc0685b593'

    owner:
      type: object
      description: 'Basic Owner Information'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Basic Information'
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'owner'
                id:
                  type: string
                  example: 'f0ad19f5-3d26-4fde-a31f-92e8195f480a'

    basicUsers:
      type: object
      description: 'Basic user'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'basic'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: '3d7bc850-a0a9-465e-a362-b4d4c07c09b3'
        name:
          type: string
          readOnly: true
          description: 'Name'
          example: 'basic'
        description:
          type: string
          description: 'Description'
          example: 'BasicUser may have a long description'
        createdDate:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Created date'
          example: '2022-05-23T09:24:58.9130000+02:00'
        lastModified:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Last modified'
          example: '2022-05-23T09:24:58.9130000+02:00'
        sid:
          type: string
          readOnly: true
          description: 'SID'
          example: '08DE0F93-A50E-493D-A4BB-3BB62714239B'
        canChangePassword:
          type: boolean
          description: 'Can change password'
          example: True
        forcePasswordChange:
          type: boolean
          description: 'Force change password'
          example: False
        status:
          type: string
          enum:
          - 'Enabled'
          - 'LockedOutByAdmin'
          - 'LockedOutBySystem'
          description: |
            Status.
            Value map to display names: 
            Enabled=Enabled  
            LockedOutByAdmin=LockedOutByAdmin  
            LockedOutBySystem=LockedOutBySystem  
          example: 'Enabled'
        lockoutEnd:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'User locked until'
          example: '2022-05-23T09:24:58.9130000+02:00'
        isExternal:
          type: boolean
          readOnly: true
          description: 'Is external'
          example: False
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'basicUsers'
                id:
                  type: string
                  example: '3d7bc850-a0a9-465e-a362-b4d4c07c09b3'

    cameras:
      type: object
      description: 'Camera'
      properties:
        enabled:
          type: boolean
          description: ''
          example: true
        displayName:
          type: string
          readOnly: true
          description: ''
          example: '3Tone Camera'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: '638bc8f1-cf28-4329-b8e6-5bba37bdb48f'
        name:
          type: string
          description: 'Name'
          example: '3Tone Camera'
        channel:
          type: integer
          readOnly: true
          description: 'Channel'
          example: 0
        description:
          type: string
          description: 'Description'
          example: 'Camera may have a long description'
        createdDate:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Created date'
          example: '2022-05-23T09:24:58.9130000+02:00'
        lastModified:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Last modified'
          example: '2022-05-23T09:24:58.9130000+02:00'
        gisPoint:
          type: string
          description: |
            Device position. Device position. Position of device in longitude, latitude and potentially altitude. 
            The format is "POINT (LONGITUDE LATITUDE)" and if you want to clear the coordinates, the value to use is "POINT EMPTY". 
            Examples: "POINT (55.656932878513 12.3763545558449)" "POINT EMPTY"  
            Can also include altitude, if so the format is "POINT (LONGITUDE LATITUDE ALTITUDE)"
          example: 'POINT EMPTY'
        shortName:
          type: string
          description: 'Short name. Used as name in the user interface where appropriate.'
        icon:
          type: integer
          description: 'Icon identifier. The relevant device icon to show.'
          example: 0
        coverageDirection:
          type: number
          format: double
          description: 'Direction. Indicate the viewing direction of the device.'
          example: 0
        coverageDepth:
          type: number
          format: double
          description: 'Depth. Indicate the viewing depth of the device.'
          example: 0
        coverageFieldOfView:
          type: number
          format: double
          description: 'Field of view. Indicate the field of view of the device.'
          example: 0
        recordingFramerate:
          type: number
          format: double
          description: 'Recording frame rate'
          example: 5
        recordKeyframesOnly:
          type: boolean
          description: 'Record keyframes only'
          example: False
        recordOnRelatedDevices:
          type: boolean
          description: 'Record on related devices'
          example: True
        recordingEnabled:
          type: boolean
          description: 'Recording enabled'
          example: True
        prebufferEnabled:
          type: boolean
          description: 'Prebuffer enabled'
          example: True
        prebufferInMemory:
          type: boolean
          description: 'Prebuffer in memory'
          example: True
        prebufferSeconds:
          type: integer
          description: 'Prebuffer seconds'
          example: 3
        edgeStorageEnabled:
          type: boolean
          description: 'Remote recording enabled'
          example: False
        edgeStoragePlaybackEnabled:
          type: boolean
          description: 'Remote recording playback'
          example: False
        manualRecordingTimeoutEnabled:
          type: boolean
          description: 'Manual recording timeout enabled'
          example: True
        manualRecordingTimeoutMinutes:
          type: integer
          description: 'Manual recording timeout in minutes'
          example: 5
        recordingStorage:
          $ref: '#/components/schemas/path_storages'
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'cameras'
                id:
                  type: string
                  example: '638bc8f1-cf28-4329-b8e6-5bba37bdb48f'
            parent:
              type: object
              properties:
                type:
                  type: string
                  example: 'hardware'
                id:
                  type: string
                  example: '965c4a97-449a-4b4b-b772-e50e7b44f700'

    cameraGroups:
      type: object
      description: 'Camera groups'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Direct Show'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: '815ee09f-312b-489b-b541-f16d2d1fc901'
        name:
          type: string
          description: 'Name'
          example: 'Direct Show'
        description:
          type: string
          description: 'Description'
          example: 'CameraGroup may have a long description'
        lastModified:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Last modified'
          example: '2022-05-23T09:24:58.9130000+02:00'
        builtIn:
          type: boolean
          readOnly: true
          description: 'Built-in group'
          example: False
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'cameraGroups'
                id:
                  type: string
                  example: '815ee09f-312b-489b-b541-f16d2d1fc901'

    claims:
      type: object
      description: 'Claims'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'admin'
        claimProvider:
          type: string
          readOnly: true
          description: 'Login provider id. Login provider id'
          example: '26422f62-cb1c-4501-86f3-3b2ccf7068ae'
        claimName:
          type: string
          readOnly: true
          description: 'Claim name. Claim name'
          example: 'vms_role'
        claimValue:
          type: string
          readOnly: true
          description: 'Claim value. Claim value'
          example: 'admin'
    clientProfiles:
      type: object
      description: 'Client profile'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'My profile'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: '210ff07d-91e6-48f4-8ade-ae79d29d749e'
        name:
          type: string
          description: 'Name'
          example: 'My profile'
        description:
          type: string
          description: 'Description'
          example: 'ClientProfile may have a long description'
        isDefaultProfile:
          type: boolean
          readOnly: true
          description: 'Is default profile'
          example: False
        lastModified:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Last modified'
          example: '2022-05-23T09:24:58.9130000+02:00'
        clientProfileAccessControl:
          $ref: '#/components/schemas/clientProfileAccessControl'
        clientProfileAdvanced:
          $ref: '#/components/schemas/clientProfileAdvanced'
        clientProfileAlarmManager:
          $ref: '#/components/schemas/clientProfileAlarmManager'
        clientProfileExport:
          $ref: '#/components/schemas/clientProfileExport'
        clientProfileGeneral:
          $ref: '#/components/schemas/clientProfileGeneral'
        clientProfileGisMap:
          $ref: '#/components/schemas/clientProfileGisMap'
        clientProfileLive:
          $ref: '#/components/schemas/clientProfileLive'
        clientProfilePlayback:
          $ref: '#/components/schemas/clientProfilePlayback'
        clientProfileSetup:
          $ref: '#/components/schemas/clientProfileSetup'
        clientProfileTimeline:
          $ref: '#/components/schemas/clientProfileTimeline'
        clientProfileViewLayouts:
          $ref: '#/components/schemas/clientProfileViewLayouts'
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'clientProfiles'
                id:
                  type: string
                  example: '210ff07d-91e6-48f4-8ade-ae79d29d749e'

    clientProfileAccessControl:
      type: object
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Access Control'
        showAccessRequestNotifications:
          type: string
          enum:
          - 'Yes'
          - 'No'
          description: |
            Show access request notifications.
            Value map to display names: 
            Yes=Yes  
            No=No  
          example: 'Yes'
        showAccessRequestNotificationsLocked:
          type: boolean
          description: 'Show access request notifications (Locked)'
          example: False
    clientProfileAdvanced:
      type: object
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Advanced'
        advancedMaxDecodingThreads:
          type: string
          enum:
          - 'Auto'
          - 'Normal'
          - 'One'
          - 'Two'
          - 'Three'
          - 'Four'
          - 'Five'
          - 'Six'
          - 'Seven'
          - 'Eight'
          description: |
            Maximum decoding threads.
            Value map to display names: 
            Auto=Auto  
            Normal=Normal  
            One=1  
            Two=2  
            Three=3  
            Four=4  
            Five=5  
            Six=6  
            Seven=7  
            Eight=8  
          example: 'Auto'
        advancedMaxDecodingThreadsLocked:
          type: boolean
          description: 'Maximum decoding threads (Locked)'
          example: False
        advancedDeinterlacing:
          type: string
          enum:
          - 'Default'
          - 'Bob_Top'
          - 'Bob_Bottom'
          - 'Content_Adaptive_Vertical_Temporal'
          description: |
            Deinterlacing.
            Value map to display names: 
            Default=No filter  
            Bob_Top=Vertical stretch top field  
            Bob_Bottom=Vertical stretch bottom field  
            Content_Adaptive_Vertical_Temporal=Content adaptive  
          example: 'Default'
        advancedDeinterlacingLocked:
          type: boolean
          description: 'Deinterlacing (Locked)'
          example: False
        advancedVideoPlayerDiagnosticLevel:
          type: string
          enum:
          - 'Level0'
          - 'Level1'
          - 'Level2'
          - 'Level3'
          description: |
            Video diagnostics overlay.
            Value map to display names: 
            Level0=Hide  
            Level1=Level 1  
            Level2=Level 2  
            Level3=Level 3  
          example: 'Level0'
        advancedVideoPlayerDiagnosticLevelLocked:
          type: boolean
          description: 'Video diagnostics overlay (Locked)'
          example: False
        advancedVideoPlayerHardwareDecodingMode:
          type: string
          enum:
          - 'Auto'
          - 'Off'
          description: |
            Hardware acceleration.
            Value map to display names: 
            Auto=Auto  
            Off=Off  
          example: 'Auto'
        advancedVideoPlayerHardwareDecodingModeLocked:
          type: boolean
          description: 'Hardware acceleration (Locked)'
          example: False
        advancedAdaptiveStreaming:
          type: string
          enum:
          - 'Enabled'
          - 'Disabled'
          description: |
            Adaptive streaming.
            Value map to display names: 
            Enabled=Enabled  
            Disabled=Disabled  
          example: 'Disabled'
        advancedAdaptiveStreamingLocked:
          type: boolean
          description: 'Adaptive streaming (Locked)'
          example: False
        advancedTimeZone:
          type: string
          enum:
          - 'LocalMachine'
          - 'MasterServer'
          - 'UTC'
          - 'Custom'
          description: |
            Time zone.
            Value map to display names: 
            LocalMachine=Local  
            MasterServer=Server time zone  
            UTC=UTC  
            Custom=Custom time zone  
          example: 'LocalMachine'
        advancedTimeZoneLocked:
          type: boolean
          description: 'Time zone (Locked)'
          example: False
        advancedTimeZoneCustom:
          type: string
          enum:
          - 'Dateline Standard Time'
          - 'UTC-11'
          - 'Aleutian Standard Time'
          - 'Hawaiian Standard Time'
          - 'Marquesas Standard Time'
          - 'Alaskan Standard Time'
          - 'UTC-09'
          - 'Pacific Standard Time (Mexico)'
          - 'UTC-08'
          - 'Pacific Standard Time'
          - 'US Mountain Standard Time'
          - 'Mountain Standard Time (Mexico)'
          - 'Mountain Standard Time'
          - 'Yukon Standard Time'
          - 'Central America Standard Time'
          - 'Central Standard Time'
          - 'Easter Island Standard Time'
          - 'Central Standard Time (Mexico)'
          - 'Canada Central Standard Time'
          - 'SA Pacific Standard Time'
          - 'Eastern Standard Time (Mexico)'
          - 'Eastern Standard Time'
          - 'Haiti Standard Time'
          - 'Cuba Standard Time'
          - 'US Eastern Standard Time'
          - 'Turks And Caicos Standard Time'
          - 'Paraguay Standard Time'
          - 'Atlantic Standard Time'
          - 'Venezuela Standard Time'
          - 'Central Brazilian Standard Time'
          - 'SA Western Standard Time'
          - 'Pacific SA Standard Time'
          - 'Newfoundland Standard Time'
          - 'Tocantins Standard Time'
          - 'E. South America Standard Time'
          - 'SA Eastern Standard Time'
          - 'Argentina Standard Time'
          - 'Greenland Standard Time'
          - 'Montevideo Standard Time'
          - 'Magallanes Standard Time'
          - 'Saint Pierre Standard Time'
          - 'Bahia Standard Time'
          - 'UTC-02'
          - 'Mid-Atlantic Standard Time'
          - 'Azores Standard Time'
          - 'Cape Verde Standard Time'
          - 'UTC'
          - 'GMT Standard Time'
          - 'Greenwich Standard Time'
          - 'Sao Tome Standard Time'
          - 'Morocco Standard Time'
          - 'W. Europe Standard Time'
          - 'Central Europe Standard Time'
          - 'Romance Standard Time'
          - 'Central European Standard Time'
          - 'W. Central Africa Standard Time'
          - 'Jordan Standard Time'
          - 'GTB Standard Time'
          - 'Middle East Standard Time'
          - 'Egypt Standard Time'
          - 'E. Europe Standard Time'
          - 'Syria Standard Time'
          - 'West Bank Standard Time'
          - 'South Africa Standard Time'
          - 'FLE Standard Time'
          - 'Israel Standard Time'
          - 'South Sudan Standard Time'
          - 'Kaliningrad Standard Time'
          - 'Sudan Standard Time'
          - 'Libya Standard Time'
          - 'Namibia Standard Time'
          - 'Arabic Standard Time'
          - 'Turkey Standard Time'
          - 'Arab Standard Time'
          - 'Belarus Standard Time'
          - 'Russian Standard Time'
          - 'E. Africa Standard Time'
          - 'Volgograd Standard Time'
          - 'Iran Standard Time'
          - 'Arabian Standard Time'
          - 'Astrakhan Standard Time'
          - 'Azerbaijan Standard Time'
          - 'Russia Time Zone 3'
          - 'Mauritius Standard Time'
          - 'Saratov Standard Time'
          - 'Georgian Standard Time'
          - 'Caucasus Standard Time'
          - 'Afghanistan Standard Time'
          - 'West Asia Standard Time'
          - 'Ekaterinburg Standard Time'
          - 'Pakistan Standard Time'
          - 'Qyzylorda Standard Time'
          - 'India Standard Time'
          - 'Sri Lanka Standard Time'
          - 'Nepal Standard Time'
          - 'Central Asia Standard Time'
          - 'Bangladesh Standard Time'
          - 'Omsk Standard Time'
          - 'Myanmar Standard Time'
          - 'SE Asia Standard Time'
          - 'Altai Standard Time'
          - 'W. Mongolia Standard Time'
          - 'North Asia Standard Time'
          - 'N. Central Asia Standard Time'
          - 'Tomsk Standard Time'
          - 'China Standard Time'
          - 'North Asia East Standard Time'
          - 'Singapore Standard Time'
          - 'W. Australia Standard Time'
          - 'Taipei Standard Time'
          - 'Ulaanbaatar Standard Time'
          - 'Aus Central W. Standard Time'
          - 'Transbaikal Standard Time'
          - 'Tokyo Standard Time'
          - 'North Korea Standard Time'
          - 'Korea Standard Time'
          - 'Yakutsk Standard Time'
          - 'Cen. Australia Standard Time'
          - 'AUS Central Standard Time'
          - 'E. Australia Standard Time'
          - 'AUS Eastern Standard Time'
          - 'West Pacific Standard Time'
          - 'Tasmania Standard Time'
          - 'Vladivostok Standard Time'
          - 'Lord Howe Standard Time'
          - 'Bougainville Standard Time'
          - 'Russia Time Zone 10'
          - 'Magadan Standard Time'
          - 'Norfolk Standard Time'
          - 'Sakhalin Standard Time'
          - 'Central Pacific Standard Time'
          - 'Russia Time Zone 11'
          - 'New Zealand Standard Time'
          - 'UTC+12'
          - 'Fiji Standard Time'
          - 'Kamchatka Standard Time'
          - 'Chatham Islands Standard Time'
          - 'UTC+13'
          - 'Tonga Standard Time'
          - 'Samoa Standard Time'
          - 'Line Islands Standard Time'
          description: |
            Custom time zone.
            Value map to display names: 
            Dateline Standard Time=(UTC-12:00) International Date Line West  
            UTC-11=(UTC-11:00) Coordinated Universal Time-11  
            Aleutian Standard Time=(UTC-10:00) Aleutian Islands  
            Hawaiian Standard Time=(UTC-10:00) Hawaii  
            Marquesas Standard Time=(UTC-09:30) Marquesas Islands  
            Alaskan Standard Time=(UTC-09:00) Alaska  
            UTC-09=(UTC-09:00) Coordinated Universal Time-09  
            Pacific Standard Time (Mexico)=(UTC-08:00) Baja California  
            UTC-08=(UTC-08:00) Coordinated Universal Time-08  
            Pacific Standard Time=(UTC-08:00) Pacific Time (US & Canada)  
            US Mountain Standard Time=(UTC-07:00) Arizona  
            Mountain Standard Time (Mexico)=(UTC-07:00) Chihuahua, La Paz, Mazatlan  
            Mountain Standard Time=(UTC-07:00) Mountain Time (US & Canada)  
            Yukon Standard Time=(UTC-07:00) Yukon  
            Central America Standard Time=(UTC-06:00) Central America  
            Central Standard Time=(UTC-06:00) Central Time (US & Canada)  
            Easter Island Standard Time=(UTC-06:00) Easter Island  
            Central Standard Time (Mexico)=(UTC-06:00) Guadalajara, Mexico City, Monterrey  
            Canada Central Standard Time=(UTC-06:00) Saskatchewan  
            SA Pacific Standard Time=(UTC-05:00) Bogota, Lima, Quito, Rio Branco  
            Eastern Standard Time (Mexico)=(UTC-05:00) Chetumal  
            Eastern Standard Time=(UTC-05:00) Eastern Time (US & Canada)  
            Haiti Standard Time=(UTC-05:00) Haiti  
            Cuba Standard Time=(UTC-05:00) Havana  
            US Eastern Standard Time=(UTC-05:00) Indiana (East)  
            Turks And Caicos Standard Time=(UTC-05:00) Turks and Caicos  
            Paraguay Standard Time=(UTC-04:00) Asuncion  
            Atlantic Standard Time=(UTC-04:00) Atlantic Time (Canada)  
            Venezuela Standard Time=(UTC-04:00) Caracas  
            Central Brazilian Standard Time=(UTC-04:00) Cuiaba  
            SA Western Standard Time=(UTC-04:00) Georgetown, La Paz, Manaus, San Juan  
            Pacific SA Standard Time=(UTC-04:00) Santiago  
            Newfoundland Standard Time=(UTC-03:30) Newfoundland  
            Tocantins Standard Time=(UTC-03:00) Araguaina  
            E. South America Standard Time=(UTC-03:00) Brasilia  
            SA Eastern Standard Time=(UTC-03:00) Cayenne, Fortaleza  
            Argentina Standard Time=(UTC-03:00) City of Buenos Aires  
            Greenland Standard Time=(UTC-03:00) Greenland  
            Montevideo Standard Time=(UTC-03:00) Montevideo  
            Magallanes Standard Time=(UTC-03:00) Punta Arenas  
            Saint Pierre Standard Time=(UTC-03:00) Saint Pierre and Miquelon  
            Bahia Standard Time=(UTC-03:00) Salvador  
            UTC-02=(UTC-02:00) Coordinated Universal Time-02  
            Mid-Atlantic Standard Time=(UTC-02:00) Mid-Atlantic - Old  
            Azores Standard Time=(UTC-01:00) Azores  
            Cape Verde Standard Time=(UTC-01:00) Cabo Verde Is.  
            UTC=(UTC) Coordinated Universal Time  
            GMT Standard Time=(UTC+00:00) Dublin, Edinburgh, Lisbon, London  
            Greenwich Standard Time=(UTC+00:00) Monrovia, Reykjavik  
            Sao Tome Standard Time=(UTC+00:00) Sao Tome  
            Morocco Standard Time=(UTC+01:00) Casablanca  
            W. Europe Standard Time=(UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna  
            Central Europe Standard Time=(UTC+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague  
            Romance Standard Time=(UTC+01:00) Brussels, Copenhagen, Madrid, Paris  
            Central European Standard Time=(UTC+01:00) Sarajevo, Skopje, Warsaw, Zagreb  
            W. Central Africa Standard Time=(UTC+01:00) West Central Africa  
            Jordan Standard Time=(UTC+02:00) Amman  
            GTB Standard Time=(UTC+02:00) Athens, Bucharest  
            Middle East Standard Time=(UTC+02:00) Beirut  
            Egypt Standard Time=(UTC+02:00) Cairo  
            E. Europe Standard Time=(UTC+02:00) Chisinau  
            Syria Standard Time=(UTC+02:00) Damascus  
            West Bank Standard Time=(UTC+02:00) Gaza, Hebron  
            South Africa Standard Time=(UTC+02:00) Harare, Pretoria  
            FLE Standard Time=(UTC+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius  
            Israel Standard Time=(UTC+02:00) Jerusalem  
            South Sudan Standard Time=(UTC+02:00) Juba  
            Kaliningrad Standard Time=(UTC+02:00) Kaliningrad  
            Sudan Standard Time=(UTC+02:00) Khartoum  
            Libya Standard Time=(UTC+02:00) Tripoli  
            Namibia Standard Time=(UTC+02:00) Windhoek  
            Arabic Standard Time=(UTC+03:00) Baghdad  
            Turkey Standard Time=(UTC+03:00) Istanbul  
            Arab Standard Time=(UTC+03:00) Kuwait, Riyadh  
            Belarus Standard Time=(UTC+03:00) Minsk  
            Russian Standard Time=(UTC+03:00) Moscow, St. Petersburg  
            E. Africa Standard Time=(UTC+03:00) Nairobi  
            Volgograd Standard Time=(UTC+03:00) Volgograd  
            Iran Standard Time=(UTC+03:30) Tehran  
            Arabian Standard Time=(UTC+04:00) Abu Dhabi, Muscat  
            Astrakhan Standard Time=(UTC+04:00) Astrakhan, Ulyanovsk  
            Azerbaijan Standard Time=(UTC+04:00) Baku  
            Russia Time Zone 3=(UTC+04:00) Izhevsk, Samara  
            Mauritius Standard Time=(UTC+04:00) Port Louis  
            Saratov Standard Time=(UTC+04:00) Saratov  
            Georgian Standard Time=(UTC+04:00) Tbilisi  
            Caucasus Standard Time=(UTC+04:00) Yerevan  
            Afghanistan Standard Time=(UTC+04:30) Kabul  
            West Asia Standard Time=(UTC+05:00) Ashgabat, Tashkent  
            Ekaterinburg Standard Time=(UTC+05:00) Ekaterinburg  
            Pakistan Standard Time=(UTC+05:00) Islamabad, Karachi  
            Qyzylorda Standard Time=(UTC+05:00) Qyzylorda  
            India Standard Time=(UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi  
            Sri Lanka Standard Time=(UTC+05:30) Sri Jayawardenepura  
            Nepal Standard Time=(UTC+05:45) Kathmandu  
            Central Asia Standard Time=(UTC+06:00) Astana  
            Bangladesh Standard Time=(UTC+06:00) Dhaka  
            Omsk Standard Time=(UTC+06:00) Omsk  
            Myanmar Standard Time=(UTC+06:30) Yangon (Rangoon)  
            SE Asia Standard Time=(UTC+07:00) Bangkok, Hanoi, Jakarta  
            Altai Standard Time=(UTC+07:00) Barnaul, Gorno-Altaysk  
            W. Mongolia Standard Time=(UTC+07:00) Hovd  
            North Asia Standard Time=(UTC+07:00) Krasnoyarsk  
            N. Central Asia Standard Time=(UTC+07:00) Novosibirsk  
            Tomsk Standard Time=(UTC+07:00) Tomsk  
            China Standard Time=(UTC+08:00) Beijing, Chongqing, Hong Kong, Urumqi  
            North Asia East Standard Time=(UTC+08:00) Irkutsk  
            Singapore Standard Time=(UTC+08:00) Kuala Lumpur, Singapore  
            W. Australia Standard Time=(UTC+08:00) Perth  
            Taipei Standard Time=(UTC+08:00) Taipei  
            Ulaanbaatar Standard Time=(UTC+08:00) Ulaanbaatar  
            Aus Central W. Standard Time=(UTC+08:45) Eucla  
            Transbaikal Standard Time=(UTC+09:00) Chita  
            Tokyo Standard Time=(UTC+09:00) Osaka, Sapporo, Tokyo  
            North Korea Standard Time=(UTC+09:00) Pyongyang  
            Korea Standard Time=(UTC+09:00) Seoul  
            Yakutsk Standard Time=(UTC+09:00) Yakutsk  
            Cen. Australia Standard Time=(UTC+09:30) Adelaide  
            AUS Central Standard Time=(UTC+09:30) Darwin  
            E. Australia Standard Time=(UTC+10:00) Brisbane  
            AUS Eastern Standard Time=(UTC+10:00) Canberra, Melbourne, Sydney  
            West Pacific Standard Time=(UTC+10:00) Guam, Port Moresby  
            Tasmania Standard Time=(UTC+10:00) Hobart  
            Vladivostok Standard Time=(UTC+10:00) Vladivostok  
            Lord Howe Standard Time=(UTC+10:30) Lord Howe Island  
            Bougainville Standard Time=(UTC+11:00) Bougainville Island  
            Russia Time Zone 10=(UTC+11:00) Chokurdakh  
            Magadan Standard Time=(UTC+11:00) Magadan  
            Norfolk Standard Time=(UTC+11:00) Norfolk Island  
            Sakhalin Standard Time=(UTC+11:00) Sakhalin  
            Central Pacific Standard Time=(UTC+11:00) Solomon Is., New Caledonia  
            Russia Time Zone 11=(UTC+12:00) Anadyr, Petropavlovsk-Kamchatsky  
            New Zealand Standard Time=(UTC+12:00) Auckland, Wellington  
            UTC+12=(UTC+12:00) Coordinated Universal Time+12  
            Fiji Standard Time=(UTC+12:00) Fiji  
            Kamchatka Standard Time=(UTC+12:00) Petropavlovsk-Kamchatsky - Old  
            Chatham Islands Standard Time=(UTC+12:45) Chatham Islands  
            UTC+13=(UTC+13:00) Coordinated Universal Time+13  
            Tonga Standard Time=(UTC+13:00) Nuku*alofa  
            Samoa Standard Time=(UTC+13:00) Samoa  
            Line Islands Standard Time=(UTC+14:00) Kiritimati Island  
          example: 'Dateline Standard Time'
        advancedTimeZoneCustomLocked:
          type: boolean
          description: 'Custom time zone (Locked)'
          example: False
        advancedMulticast:
          type: string
          enum:
          - 'Enabled'
          - 'Disabled'
          description: |
            Multicast.
            Value map to display names: 
            Enabled=Enabled  
            Disabled=Disabled  
          example: 'Enabled'
        advancedMulticastLocked:
          type: boolean
          description: 'Multicast (Locked)'
          example: False
    clientProfileAlarmManager:
      type: object
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Alarm Manager'
        alarmManagerShowDesktopNotifications:
          type: string
          enum:
          - 'Yes'
          - 'No'
          description: |
            Show desktop notifications for alarms.
            Value map to display names: 
            Yes=Yes  
            No=No  
          example: 'No'
        alarmManagerShowDesktopNotificationsLocked:
          type: boolean
          description: 'Show desktop notifications for alarms (Locked)'
          example: False
        alarmManagerPlaySoundNotifications:
          type: string
          enum:
          - 'Yes'
          - 'No'
          description: |
            Play sound notifications for alarms.
            Value map to display names: 
            Yes=Yes  
            No=No  
          example: 'No'
        alarmManagerPlaySoundNotificationsLocked:
          type: boolean
          description: 'Play sound notifications for alarms (Locked)'
          example: False
    clientProfileExport:
      type: object
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Export'
        panesPlaybackExport:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            Export function.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Available'
        exportDestinationType:
          type: string
          enum:
          - 'ToDisk'
          - 'ToMediaBurner'
          - 'Both'
          description: |
            Export to.
            Value map to display names: 
            ToDisk=To disk  
            ToMediaBurner=To media burner  
            Both=To disk and media burner  
          example: 'Both'
        exportDestinationTypeLocked:
          type: boolean
          description: 'Export to (Locked)'
          example: False
        functionsPlaybackExportPath:
          type: string
          enum:
          - 'Default'
          - 'Custom'
          description: |
            Export path.
            Value map to display names: 
            Default=Default  
            Custom=Custom  
          example: 'Default'
        functionsPlaybackExportPathCustom:
          type: string
          description: 'Export path - Custom'
          example: 'C:\Export'
        functionsPlaybackExportPathCustomLocked:
          type: boolean
          description: 'Export path - Custom (Locked)'
          example: False
        exportPrivacyMask:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            Privacy mask.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Available'
        exportPrivacyMaskLocked:
          type: boolean
          description: 'Privacy mask (Locked)'
          example: False
        exportVideoClipFormat:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            Availability.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Unavailable'
        exportVideoClipFormatLocked:
          type: boolean
          description: 'Availability (Locked)'
          example: True
        exportVideoClipType:
          type: string
          enum:
          - 'Audio'
          - 'Video'
          - 'Both'
          description: |
            Select content.
            Value map to display names: 
            Audio=Audio only  
            Video=Video only  
            Both=Audio and video  
          example: 'Both'
        exportVideoClipTypeLocked:
          type: boolean
          description: 'Select content (Locked)'
          example: False
        exportVideoClipOutputType:
          type: string
          enum:
          - 'AVI'
          - 'MKV'
          description: |
            Select format.
            Value map to display names: 
            AVI=AVI  
            MKV=MKV  
          example: 'MKV'
        exportVideoClipOutputTypeLocked:
          type: boolean
          description: 'Select format (Locked)'
          example: True
        exportVideoClipTimestamp:
          type: string
          enum:
          - 'Yes'
          - 'No'
          description: |
            Include timestamps.
            Value map to display names: 
            Yes=Yes  
            No=No  
          example: 'No'
        exportVideoClipTimestampLocked:
          type: boolean
          description: 'Include timestamps (Locked)'
          example: False
        exportVideoClipFrameRate:
          type: string
          enum:
          - 'Yes'
          - 'No'
          description: |
            Reduce frame rate.
            Value map to display names: 
            Yes=Yes  
            No=No  
          example: 'No'
        exportVideoClipFrameRateLocked:
          type: boolean
          description: 'Reduce frame rate (Locked)'
          example: False
        exportVideoClipTextsMode:
          type: string
          enum:
          - 'Required'
          - 'Optional'
          - 'Unavailable'
          description: |
            Manage video texts.
            Value map to display names: 
            Required=Required  
            Optional=Optional  
            Unavailable=Unavailable  
          example: 'Optional'
        exportVideoClipTextsContent:
          type: string
          description: 'Video texts'
        exportVideoClipTextsContentLocked:
          type: boolean
          description: 'Video texts (Locked)'
          example: False
        exportVideoClipCodecProperties:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            Video codec properties.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Available'
        exportVideoClipCodecPropertiesLocked:
          type: boolean
          description: 'Video codec properties (Locked)'
          example: False
        exportSmartClientPlayerFormat:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            Availability.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Available'
        exportSmartClientPlayerFormatLocked:
          type: boolean
          description: 'Availability (Locked)'
          example: False
        exportSmartClientPlayerIncludePlayer:
          type: string
          enum:
          - 'Yes'
          - 'No'
          description: |
            Include XProtect Smart Client – Player.
            Value map to display names: 
            Yes=Yes  
            No=No  
          example: 'Yes'
        exportSmartClientPlayerIncludePlayerLocked:
          type: boolean
          description: 'Include XProtect Smart Client – Player (Locked)'
          example: False
        exportSmartClientPlayerLockForReExport:
          type: string
          enum:
          - 'Yes'
          - 'No'
          description: |
            Prevent re-export.
            Value map to display names: 
            Yes=Yes  
            No=No  
          example: 'Yes'
        exportSmartClientPlayerLockForReExportLocked:
          type: boolean
          description: 'Prevent re-export (Locked)'
          example: True
        exportSmartClientPlayerEncryptDatabases:
          type: string
          enum:
          - 'Yes'
          - 'No'
          description: |
            Password protect data.
            Value map to display names: 
            Yes=Yes  
            No=No  
          example: 'Yes'
        exportSmartClientPlayerEncryptDatabasesLocked:
          type: boolean
          description: 'Password protect data (Locked)'
          example: True
        exportSmartClientPlayerEncryptPassword:
          type: string
          description: 'Password'
        exportSmartClientPlayerEncryptPasswordLocked:
          type: boolean
          description: 'Password (Locked)'
          example: False
        exportSmartClientPlayerEncryptionStrength:
          type: string
          enum:
          - 'DES56'
          - 'AES128'
          - 'AES192'
          - 'AES256'
          description: |
            Encryption strength.
            Value map to display names: 
            DES56=56-bit DES  
            AES128=128-bit AES  
            AES192=192-bit AES  
            AES256=256-bit AES  
          example: 'AES256'
        exportSmartClientPlayerEncryptionStrengthLocked:
          type: boolean
          description: 'Encryption strength (Locked)'
          example: True
        exportSmartClientPlayerGlobalCommentsMode:
          type: string
          enum:
          - 'Required'
          - 'Optional'
          - 'Unavailable'
          description: |
            Manage project comment.
            Value map to display names: 
            Required=Required  
            Optional=Optional  
            Unavailable=Unavailable  
          example: 'Optional'
        exportSmartClientPlayerGlobalCommentsModeLocked:
          type: boolean
          description: 'Manage project comment (Locked)'
          example: False
        exportSmartClientPlayerGlobalCommentsContent:
          type: string
          description: 'Project comment'
        exportSmartClientPlayerGlobalCommentsContentLocked:
          type: boolean
          description: 'Project comment (Locked)'
          example: False
        exportSmartClientPlayerIndividualCommentsMode:
          type: string
          enum:
          - 'Required'
          - 'Optional'
          - 'Unavailable'
          description: |
            Manage individual camera comments.
            Value map to display names: 
            Required=Required  
            Optional=Optional  
            Unavailable=Unavailable  
          example: 'Optional'
        exportSmartClientPlayerIndividualCommentsModeLocked:
          type: boolean
          description: 'Manage individual camera comments (Locked)'
          example: False
        exportSmartClientPlayerSignData:
          type: string
          enum:
          - 'Yes'
          - 'No'
          description: |
            Include digital signature.
            Value map to display names: 
            Yes=Yes  
            No=No  
          example: 'Yes'
        exportSmartClientPlayerSignDataLocked:
          type: boolean
          description: 'Include digital signature (Locked)'
          example: True
        exportStillImageFormat:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            Availability.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Unavailable'
        exportStillImageFormatLocked:
          type: boolean
          description: 'Availability (Locked)'
          example: True
        exportStillImageTimestamp:
          type: string
          enum:
          - 'Yes'
          - 'No'
          description: |
            Include timestamps.
            Value map to display names: 
            Yes=Yes  
            No=No  
          example: 'No'
        exportStillImageTimestampLocked:
          type: boolean
          description: 'Include timestamps (Locked)'
          example: False
    clientProfileGeneral:
      type: object
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'General'
        generalTimeInTitlebar:
          type: string
          enum:
          - 'Show'
          - 'Hide'
          description: |
            Show current time in title bar.
            Value map to display names: 
            Show=Show  
            Hide=Hide  
          example: 'Show'
        generalTimeInTitlebarLocked:
          type: boolean
          description: 'Show current time in title bar (Locked)'
          example: False
        generalTitleBar:
          type: string
          enum:
          - 'Show'
          - 'Hide'
          description: |
            Default for camera title bar.
            Value map to display names: 
            Show=Show  
            Hide=Hide  
          example: 'Show'
        generalTitleBarLocked:
          type: boolean
          description: 'Default for camera title bar (Locked)'
          example: False
        generalHtmlViewItemScripting:
          type: string
          enum:
          - 'Enabled'
          - 'Disabled'
          description: |
            HTML view item scripting.
            Value map to display names: 
            Enabled=Enabled  
            Disabled=Disabled  
          example: 'Disabled'
        generalEmptySpaces:
          type: string
          enum:
          - 'CompanyLogo'
          - 'CustomLogo'
          - 'Nothing'
          - 'BlackImage'
          description: |
            Show in empty view positions.
            Value map to display names: 
            CompanyLogo=Milestone logo  
            CustomLogo=Custom logo  
            Nothing=Nothing  
            BlackImage=Black image  
          example: 'CompanyLogo'
        generalEmptySpacesLocked:
          type: boolean
          description: 'Show in empty view positions (Locked)'
          example: False
        viewsCustomLogoInEmptySpaces:
          type: string
          description: 'Custom logo'
        generalCameraErrors:
          type: string
          enum:
          - 'ShowAsOverlay'
          - 'BlackImageWithOverlay'
          - 'Hidden'
          description: |
            Camera error messages.
            Value map to display names: 
            ShowAsOverlay=Show as overlay  
            BlackImageWithOverlay=Black image with overlay  
            Hidden=Hide (see the help)  
          example: 'BlackImageWithOverlay'
        generalCameraErrorsLocked:
          type: boolean
          description: 'Camera error messages (Locked)'
          example: False
        generalServerErrors:
          type: string
          enum:
          - 'ShowAsOverlay'
          - 'Hidden'
          description: |
            Server error messages.
            Value map to display names: 
            ShowAsOverlay=Show as overlay  
            Hidden=Hide  
          example: 'Hidden'
        generalServerErrorsLocked:
          type: boolean
          description: 'Server error messages (Locked)'
          example: False
        generalCameraStoppedMessage:
          type: string
          enum:
          - 'ShowAsOverlay'
          - 'BlackImageWithOverlay'
          - 'Hidden'
          description: |
            Live video stopped message.
            Value map to display names: 
            ShowAsOverlay=Show as overlay  
            BlackImageWithOverlay=Black image with overlay  
            Hidden=Hide (see the help)  
          example: 'BlackImageWithOverlay'
        generalCameraStoppedMessageLocked:
          type: boolean
          description: 'Live video stopped message (Locked)'
          example: False
        generalViewGridSpacer:
          type: string
          enum:
          - 'Hide'
          - 'Pixel1'
          - 'Pixel2'
          - 'Pixel3'
          - 'Pixel4'
          description: |
            View grid spacer.
            Value map to display names: 
            Hide=Hide  
            Pixel1=1 pixel  
            Pixel2=2 pixels  
            Pixel3=3 pixels  
            Pixel4=4 pixels  
          example: 'Pixel1'
        generalViewGridSpacerLocked:
          type: boolean
          description: 'View grid spacer (Locked)'
          example: False
        generalApplicationMaximization:
          type: string
          enum:
          - 'FullScreen'
          - 'NormalWindow'
          description: |
            Application maximization.
            Value map to display names: 
            FullScreen=Maximize to full screen  
            NormalWindow=Maximize as normal window  
          example: 'FullScreen'
        generalApplicationMaximizationLocked:
          type: boolean
          description: 'Application maximization (Locked)'
          example: False
        applicationInactivityTimeout:
          type: integer
          description: 'Inactive timeout (minutes)'
          example: 0
        generalDefaultImageQuality:
          type: string
          enum:
          - 'Full'
          - 'SuperHigh'
          - 'High'
          - 'Medium'
          - 'Low'
          description: |
            Default image quality.
            Value map to display names: 
            Full=Full  
            SuperHigh=Super high (for megapixel)  
            High=High  
            Medium=Medium  
            Low=Low  
          example: 'Full'
        generalDefaultImageQualityLocked:
          type: boolean
          description: 'Default image quality (Locked)'
          example: True
        generalDefaultFrameRate:
          type: string
          enum:
          - 'Unlimited'
          - 'Medium'
          - 'Low'
          description: |
            Default frame rate.
            Value map to display names: 
            Unlimited=Unrestricted  
            Medium=Medium  
            Low=Low  
          example: 'Unlimited'
        generalDefaultFrameRateLocked:
          type: boolean
          description: 'Default frame rate (Locked)'
          example: True
        generalDefaultVideoBuffer:
          type: string
          enum:
          - 'Standard'
          - 'Minimum'
          - 'VerySmall'
          - 'Small'
          - 'Medium'
          - 'Large'
          - 'VeryLarge'
          - 'Maximum'
          description: |
            Default video buffer.
            Value map to display names: 
            Standard=Standard  
            Minimum=None  
            VerySmall=Very small – (50 milliseconds)  
            Small=Small – (100 milliseconds)  
            Medium=Medium – (½ second)  
            Large=Large – (1 second)  
            VeryLarge=Very large – (1.5 seconds)  
            Maximum=Maximum – (2 seconds)  
          example: 'Standard'
        generalDefaultVideoBufferLocked:
          type: boolean
          description: 'Default video buffer (Locked)'
          example: False
        applicationMinimizeButton:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            Minimize button.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Available'
        applicationMaximizeButton:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            Maximize button.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Available'
        applicationLogoutButton:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            Log Out button.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Available'
        applicationExitButton:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            Exit button.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Available'
        applicationOptionsDialogButton:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            Settings dialog.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Available'
        applicationKeyboardSetup:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            Keyboard setup.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Available'
        applicationJoystickSetup:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            Joystick setup.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Available'
        applicationRememberPassword:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            Remember password.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Available'
        applicationAutoLogin:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            Auto-login.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Available'
        applicationStartMode:
          type: string
          enum:
          - 'FullScreen'
          - 'Maximized'
          - 'Window'
          - 'Last'
          description: |
            Start mode.
            Value map to display names: 
            FullScreen=Full screen  
            Maximized=Maximized  
            Window=Window  
            Last=Last  
          example: 'Last'
        applicationStartModeLocked:
          type: boolean
          description: 'Start mode (Locked)'
          example: False
        applicationStartView:
          type: string
          enum:
          - 'Last'
          - 'None'
          - 'Ask'
          description: |
            Start view.
            Value map to display names: 
            Last=Last  
            None=None  
            Ask=Ask  
          example: 'Last'
        applicationStartViewLocked:
          type: boolean
          description: 'Start view (Locked)'
          example: False
        applicationNewSCVersionWindow:
          type: string
          enum:
          - 'Show'
          - 'Hide'
          description: |
            New version on server message.
            Value map to display names: 
            Show=Show  
            Hide=Hide  
          example: 'Show'
        applicationNewSCVersionText:
          type: string
          description: 'New version - additional message'
        generalDefaultPtzPointAndClickMode:
          type: string
          enum:
          - 'VirtualJoystick'
          - 'ClickToCenter'
          description: |
            Default PTZ click mode.
            Value map to display names: 
            VirtualJoystick=Virtual Joystick  
            ClickToCenter=Click-to-center  
          example: 'VirtualJoystick'
        generalDefaultPtzPointAndClickModeLocked:
          type: boolean
          description: 'Default PTZ click mode (Locked)'
          example: False
        systemMonitorTab:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            System Monitor tab.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Available'
        centralizedSearchTab:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            Search tab.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Available'
        centralizedSearchMaxDeviceCount:
          type: string
          enum:
          - 'Count_50'
          - 'Count_100'
          - 'Count_500'
          - 'Count_Unlimited'
          description: |
            Cameras allowed during search.
            Value map to display names: 
            Count_50=50  
            Count_100=100  
            Count_500=500  
            Count_Unlimited=Unrestricted  
          example: 'Count_100'
        applicationHideMousePointerTimeout:
          type: string
          enum:
          - 'Disabled'
          - 'Seconds_5'
          - 'Seconds_10'
          - 'Seconds_20'
          - 'Seconds_30'
          description: |
            Hide mouse pointer.
            Value map to display names: 
            Disabled=Never  
            Seconds_5=after 5 seconds  
            Seconds_10=after 10 seconds  
            Seconds_20=after 20 seconds  
            Seconds_30=after 30 seconds  
          example: 'Seconds_5'
        applicationHideMousePointerTimeoutLocked:
          type: boolean
          description: 'Hide mouse pointer (Locked)'
          example: False
        alarmManagerTab:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            Alarm Manager tab.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Available'
        applicationSnapshotAvailability:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            Snapshot.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Available'
        applicationSnapshotAvailabilityLocked:
          type: boolean
          description: 'Snapshot (Locked)'
          example: False
        applicationSnapshotPath:
          type: string
          description: 'Snapshot path'
          example: 'c:\Snapshots'
        applicationSnapshotPathLocked:
          type: boolean
          description: 'Snapshot path (Locked)'
          example: False
        applicationEvidenceLock:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            Evidence lock.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Available'
        applicationLiftPrivacyMaskTimeout:
          type: string
          enum:
          - 'Minutes_2'
          - 'Minutes_10'
          - 'Minutes_30'
          - 'Minutes_60'
          - 'Minutes_120'
          - 'Until_Logout'
          description: |
            Lift privacy masks timeout.
            Value map to display names: 
            Minutes_2=2 minutes  
            Minutes_10=10 minutes  
            Minutes_30=30 minutes  
            Minutes_60=1 hour  
            Minutes_120=2 hours  
            Until_Logout=Until logged out  
          example: 'Minutes_30'
        applicationOnlineHelp:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            Online help.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Available'
        applicationOnlineHelpLocked:
          type: boolean
          description: 'Online help (Locked)'
          example: False
        applicationVideoTutorials:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            Video tutorials.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Available'
        applicationVideoTutorialsLocked:
          type: boolean
          description: 'Video tutorials (Locked)'
          example: False
        applicationTransactTab:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            Transact tab.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Available'
    clientProfileGisMap:
      type: object
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Smart map'
        gisMapOpenStreetMapGeographicLayer:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            Milestone Map Service.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Unavailable'
        gisMapOpenStreetMapGeographicLayerLocked:
          type: boolean
          description: 'Milestone Map Service (Locked)'
          example: True
        gisMapOpenStreetMapAlternativeServer:
          type: string
          description: 'OpenStreetMap server'
        gisMapOpenStreetMapAlternativeServerLocked:
          type: boolean
          description: 'OpenStreetMap server (Locked)'
          example: True
        gisMapCreateLayerLocation:
          type: string
          enum:
          - 'Yes'
          - 'No'
          description: |
            Create location when custom overlay is added.
            Value map to display names: 
            Yes=Yes  
            No=No  
          example: 'No'
        gisMapCreateLayerLocationLocked:
          type: boolean
          description: 'Create location when custom overlay is added (Locked)'
          example: False
        gisMapCacheCleanUp:
          type: string
          enum:
          - 'Never'
          - 'OnScClose'
          - 'OnScClose_IfFileNotUsed'
          description: |
            Remove cached smart map files.
            Value map to display names: 
            Never=Never  
            OnScClose=On exit  
            OnScClose_IfFileNotUsed=When not used for 30 days  
          example: 'OnScClose_IfFileNotUsed'
        gisMapCacheCleanUpLocked:
          type: boolean
          description: 'Remove cached smart map files (Locked)'
          example: False
        gisMapBingMapKey:
          type: string
          description: 'Bing Maps key'
        gisMapBingMapKeyLocked:
          type: boolean
          description: 'Bing Maps key (Locked)'
          example: True
        gisMapGoogleMapClientId:
          type: string
          description: 'Client ID for Google Maps'
        gisMapGoogleMapClientIdLocked:
          type: boolean
          description: 'Client ID for Google Maps (Locked)'
          example: True
        gisMapGoogleMapPrivateKey:
          type: string
          description: 'Private key for Google Maps'
        gisMapGoogleMapPrivateKeyLocked:
          type: boolean
          description: 'Private key for Google Maps (Locked)'
          example: True
        gisMapGoogleMapSigningSecret:
          type: string
          description: 'URL signing secret for Google Maps'
        gisMapGoogleMapSigningSecretLocked:
          type: boolean
          description: 'URL signing secret for Google Maps (Locked)'
          example: True
    clientProfileLive:
      type: object
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Live'
        panesLiveTab:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            Live tab.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Available'
        panesLiveViews:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            Views pane.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Available'
        panesLiveViewsLocked:
          type: boolean
          description: 'Views pane (Locked)'
          example: False
        panesLiveSystemOverview:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            Cameras pane.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Available'
        panesLiveSystemOverviewLocked:
          type: boolean
          description: 'Cameras pane (Locked)'
          example: False
        panesLiveAudio:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            Audio pane.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Available'
        panesLiveAudioLocked:
          type: boolean
          description: 'Audio pane (Locked)'
          example: False
        panesLiveOutputs:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            Output pane.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Available'
        panesLiveOutputsLocked:
          type: boolean
          description: 'Output pane (Locked)'
          example: False
        panesLiveEvents:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            Event pane.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Available'
        panesLiveEventsLocked:
          type: boolean
          description: 'Event pane (Locked)'
          example: False
        functionsLiveBookmarkMode:
          type: string
          enum:
          - 'Quick'
          - 'Detail'
          - 'Unavailable'
          description: |
            Bookmark function.
            Value map to display names: 
            Quick=Quick bookmark  
            Detail=Add bookmark details  
            Unavailable=Unavailable  
          example: 'Quick'
        functionsLiveBookmarkModeLocked:
          type: boolean
          description: 'Bookmark function (Locked)'
          example: False
        functionsLivePrintAvailability:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            Print function.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Available'
        functionsLivePrintAvailabilityLocked:
          type: boolean
          description: 'Print function (Locked)'
          example: False
        functionsLiveCameraPlayback:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            Camera playback.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Available'
        functionsLiveCameraPlaybackLocked:
          type: boolean
          description: 'Camera playback (Locked)'
          example: False
        functionsLiveOverlayButtons:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            Overlay buttons.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Available'
        functionsLiveOverlayButtonsLocked:
          type: boolean
          description: 'Overlay buttons (Locked)'
          example: False
        functionsLiveBoundingBoxes:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            Bounding boxes.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Available'
        functionsLiveBoundingBoxesLocked:
          type: boolean
          description: 'Bounding boxes (Locked)'
          example: False
        panesLiveMIPPlugin:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            MIP Plug-ins.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Available'
        panesLiveMIPPluginLocked:
          type: boolean
          description: 'MIP Plug-ins (Locked)'
          example: False
    clientProfilePlayback:
      type: object
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Playback'
        panesPlaybackTab:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            Playback tab.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Available'
        panesPlaybackViews:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            Views pane.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Available'
        panesPlaybackViewsLocked:
          type: boolean
          description: 'Views pane (Locked)'
          example: False
        panesPlaybackSystemOverview:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            Cameras pane.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Available'
        panesPlaybackSystemOverviewLocked:
          type: boolean
          description: 'Cameras pane (Locked)'
          example: False
        panesPlaybackAudio:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            Audio pane.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Available'
        panesPlaybackAudioLocked:
          type: boolean
          description: 'Audio pane (Locked)'
          example: False
        panesPlaybackPrint:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            Print function.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Available'
        panesPlaybackPrintLocked:
          type: boolean
          description: 'Print function (Locked)'
          example: False
        functionsPlaybackPrintReportHeadline:
          type: string
          enum:
          - 'Default'
          - 'Custom'
          - 'Hide'
          description: |
            Print report - Headline mode.
            Value map to display names: 
            Default=Default  
            Custom=Custom  
            Hide=Hide  
          example: 'Default'
        functionsPlaybackPrintReportHeadlineLocked:
          type: boolean
          description: 'Print report - Headline mode (Locked)'
          example: False
        functionsPlaybackPrintReportHeadlineText:
          type: string
          description: 'Print report - Custom headline text'
        functionsPlaybackPrintReportUserInformation:
          type: string
          enum:
          - 'Show'
          - 'Hide'
          description: |
            Print report - Include user information.
            Value map to display names: 
            Show=Show  
            Hide=Hide  
          example: 'Show'
        functionsPlaybackPrintReportCopyRights:
          type: string
          enum:
          - 'Show'
          - 'Hide'
          description: |
            Print report - Include copyright information.
            Value map to display names: 
            Show=Show  
            Hide=Hide  
          example: 'Show'
        functionsPlaybackIndependentPlayback:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            Independent playback.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Available'
        functionsPlaybackBookmarkMode:
          type: string
          enum:
          - 'Quick'
          - 'Detail'
          - 'Unavailable'
          description: |
            Bookmark function.
            Value map to display names: 
            Quick=Quick bookmark  
            Detail=Add bookmark details  
            Unavailable=Unavailable  
          example: 'Detail'
        functionsPlaybackBookmarkModeLocked:
          type: boolean
          description: 'Bookmark function (Locked)'
          example: False
        functionsPlaybackBoundingBoxes:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            Bounding boxes.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Available'
        functionsPlaybackBoundingBoxesLocked:
          type: boolean
          description: 'Bounding boxes (Locked)'
          example: False
        panesPlaybackMIPPlugin:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            MIP Plug-ins.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Available'
        panesPlaybackMIPPluginLocked:
          type: boolean
          description: 'MIP Plug-ins (Locked)'
          example: False
    clientProfileSetup:
      type: object
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Setup'
        panesSetupTab:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            Setup mode.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Available'
        panesSetupViews:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            Views pane.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Available'
        panesSetupViewsLocked:
          type: boolean
          description: 'Views pane (Locked)'
          example: False
        panesSetupSystemOverview:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            System Overview pane.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Available'
        panesSetupSystemOverviewLocked:
          type: boolean
          description: 'System Overview pane (Locked)'
          example: False
        panesSetupOverlayButtons:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            Overlay Buttons pane.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Available'
        panesSetupOverlayButtonsLocked:
          type: boolean
          description: 'Overlay Buttons pane (Locked)'
          example: False
        panesSetupProperties:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            Properties pane.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Available'
        panesSetupPropertiesLocked:
          type: boolean
          description: 'Properties pane (Locked)'
          example: False
        functionsSetupOverlayButtons:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            Edit overlay buttons.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Available'
        functionsSetupOverlayButtonsLocked:
          type: boolean
          description: 'Edit overlay buttons (Locked)'
          example: False
        functionsSetupEnableVideoBufferingOption:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            Edit live video buffering.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Available'
        functionsSetupEnableVideoBufferingOptionLocked:
          type: boolean
          description: 'Edit live video buffering (Locked)'
          example: False
        panesSetupMIPPlugin:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            MIP Plug-ins.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Available'
        panesSetupMIPPluginLocked:
          type: boolean
          description: 'MIP Plug-ins (Locked)'
          example: False
        mapEditMaps:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            Edit maps.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Available'
        mapEditGisMap:
          type: string
          enum:
          - 'Available'
          - 'Unavailable'
          description: |
            Edit smart map.
            Value map to display names: 
            Available=Available  
            Unavailable=Unavailable  
          example: 'Available'
    clientProfileTimeline:
      type: object
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Timeline'
        timelineIncomingAudio:
          type: string
          enum:
          - 'Show'
          - 'Hide'
          description: |
            Incoming audio.
            Value map to display names: 
            Show=Show  
            Hide=Hide  
          example: 'Hide'
        timelineIncomingAudioLocked:
          type: boolean
          description: 'Incoming audio (Locked)'
          example: False
        timelineOutgoingAudio:
          type: string
          enum:
          - 'Show'
          - 'Hide'
          description: |
            Outgoing audio.
            Value map to display names: 
            Show=Show  
            Hide=Hide  
          example: 'Hide'
        timelineOutgoingAudioLocked:
          type: boolean
          description: 'Outgoing audio (Locked)'
          example: False
        timelineMipData:
          type: string
          enum:
          - 'Show'
          - 'Hide'
          description: |
            Additional data.
            Value map to display names: 
            Show=Show  
            Hide=Hide  
          example: 'Hide'
        timelineMipDataLocked:
          type: boolean
          description: 'Additional data (Locked)'
          example: False
        timelineBookmarks:
          type: string
          enum:
          - 'Show'
          - 'Hide'
          description: |
            Bookmarks.
            Value map to display names: 
            Show=Show  
            Hide=Hide  
          example: 'Show'
        timelineBookmarksLocked:
          type: boolean
          description: 'Bookmarks (Locked)'
          example: False
        timelineMipMarker:
          type: string
          enum:
          - 'Show'
          - 'Hide'
          description: |
            Additional markers.
            Value map to display names: 
            Show=Show  
            Hide=Hide  
          example: 'Hide'
        timelineMipMarkerLocked:
          type: boolean
          description: 'Additional markers (Locked)'
          example: False
        timelineMotion:
          type: string
          enum:
          - 'Show'
          - 'Hide'
          description: |
            Motion indication.
            Value map to display names: 
            Show=Show  
            Hide=Hide  
          example: 'Show'
        timelineMotionLocked:
          type: boolean
          description: 'Motion indication (Locked)'
          example: False
        timelineAllCamerasTimeline:
          type: string
          enum:
          - 'Show'
          - 'Hide'
          description: |
            All cameras timeline.
            Value map to display names: 
            Show=Show  
            Hide=Hide  
          example: 'Show'
        timelineAllCamerasTimelineLocked:
          type: boolean
          description: 'All cameras timeline (Locked)'
          example: False
        timelineSkipGaps:
          type: string
          enum:
          - 'DoSkipGaps'
          - 'DoNotSkipGaps'
          description: |
            Playback.
            Value map to display names: 
            DoSkipGaps=Skip gaps  
            DoNotSkipGaps=Do not skip gaps  
          example: 'DoSkipGaps'
        timelineSkipGapsLocked:
          type: boolean
          description: 'Playback (Locked)'
          example: False
    clientProfileViewLayouts:
      type: object
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'View layouts'
        disabledViewLayouts:
          type: array
          items:
            $ref: '#/components/schemas/path_layouts'
    clientSettings:
      type: object
      description: 'Client settings folder'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Client settings'
        related:
          type: array
          items:
            $ref: '#/components/schemas/path_microphones'
        shortcut:
          type: integer
          description: 'Shortcut. Shortcut number to be used in clients. A number of 0 and higher to be used for keypad activation, and value of blank when not used - also represented as -1 in integer fields when not used.'
        multicastEnabled:
          type: boolean
          description: 'Multicast enabled'
          example: False
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'clientSettings'
                id:
                  type: string
                  example: '197be82c-36f1-4a69-8220-492a24f328d5'
            parent:
              type: object
              properties:
                type:
                  type: string
                  example: 'cameras'
                id:
                  type: string
                  example: '638bc8f1-cf28-4329-b8e6-5bba37bdb48f'

    customProperties:
      type: object
      description: 'Custom properties'
      properties:
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'customProperties'
                id:
                  type: string
                  example: 'ca65907a-7209-42d8-bab4-a05447670dc7'
            parent:
              type: object
              properties:
                type:
                  type: string
                  example: 'cameras'
                id:
                  type: string
                  example: '638bc8f1-cf28-4329-b8e6-5bba37bdb48f'

    settings:
      type: object
      description: 'Settings'
      properties:
        generalSettings:
          $ref: '#/components/schemas/generalSettings_childItem'
        ptz:
          $ref: '#/components/schemas/ptz_childItem'
        stream:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/stream_childItem'
        ptzSessionTimeout:
          $ref: '#/components/schemas/ptzSessionTimeout_childItem'
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Settings'
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'settings'
                id:
                  type: string
                  example: '5cce248d-79a0-453f-ae39-4b85ec0a5d98'
            parent:
              type: object
              properties:
                type:
                  type: string
                  example: 'cameras'
                id:
                  type: string
                  example: '638bc8f1-cf28-4329-b8e6-5bba37bdb48f'

    generalSettings_childItem:
      type: object
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'General'
        inputFilterType:
          type: string
          enum:
          - 'VideoFile'
          - 'WebCam'
          description: |
            Input Filter Type.
            Value map to display names: 
            VideoFile=Video File  
            WebCam=Web Cam  
          example: 'VideoFile'
        videoFilePath:
          type: string
          description: 'Video File Path'
          example: 'C:\key\AutomatedVideos\3Tone3MinXVID.avi'
        webCamId:
          type: string
          description: 'Web Cam'
        webCamPath:
          type: string
          description: 'Web Cam Path'
    ptz_childItem:
      type: object
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Pan-Tilt-Zoom'
        ptzEnabled:
          type: boolean
          readOnly: true
          description: 'PTZ Enabled'
          example: true
        ptzCenterOnPositionInView:
          type: boolean
          readOnly: true
          description: 'PTZ Center on position in view'
          example: true
        ptzCenterAndZoomToRectangle:
          type: boolean
          readOnly: true
          description: 'PTZ Center and zoom to rectangle'
          example: true
        ptzHomeSupport:
          type: boolean
          readOnly: true
          description: 'PTZ Home support'
          example: true
        ptzDiagonalSupport:
          type: boolean
          readOnly: true
          description: 'PTZ Diagonal support'
          example: true
        ptzIpix:
          type: boolean
          readOnly: true
          description: 'PTZ Ipix'
          example: false
        pan:
          type: string
          readOnly: true
          description: 'Pan'
          example: |
            <control>
              <absolutesupport>true</absolutesupport>
              <relativesupport>true</relativesupport>
              <stopsupport>true</stopsupport>
              <startsupport>true</startsupport>
              <automaticsupport>true</automaticsupport>
              <speedsupport>true</speedsupport>
            </control>
                  
        tilt:
          type: string
          readOnly: true
          description: 'Tilt'
          example: |
            <control>
              <absolutesupport>true</absolutesupport>
              <relativesupport>true</relativesupport>
              <stopsupport>true</stopsupport>
              <startsupport>true</startsupport>
              <automaticsupport>true</automaticsupport>
              <speedsupport>true</speedsupport>
            </control>
                  
        zoom:
          type: string
          readOnly: true
          description: 'Zoom'
          example: |
            <control>
              <absolutesupport>true</absolutesupport>
              <relativesupport>true</relativesupport>
              <stopsupport>true</stopsupport>
              <startsupport>true</startsupport>
              <automaticsupport>true</automaticsupport>
              <speedsupport>true</speedsupport>
            </control>
                  
        ptzPresetConfiguration:
          type: string
          readOnly: true
          description: 'Preset Configuration'
          example: |
            <ptzpresets>
              <presettype>both</presettype>
              <internal>
                <isnumbered>false</isnumbered>
                <minnumber>0</minnumber>
                <maxnumber>255</maxnumber>
               <formatexpression>(.*)</formatexpression>       <canloadfromdevice>true</canloadfromdevice>
                <cansetpreset>true</cansetpreset>
                <speedsupport>true</speedsupport>
              </internal>
              <absolute>  
                <canqueryposition>true</canqueryposition>
                <speedsupport>true</speedsupport>
              </absolute>
            </ptzpresets>
    stream_childItem:
      type: object
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Video stream 1'
        resolution:
          type: string
          enum:
          - '160x90'
          - '160x100'
          - '160x120'
          - '176x144'
          - '320x180'
          - '320x200'
          - '320x240'
          - '320x288'
          - '352x288'
          - '640x360'
          - '640x400'
          - '640x480'
          - '768x480'
          - '800x450'
          - '800x456'
          - '800x500'
          - '800x504'
          - '800x600'
          - '864x480'
          - '960x720'
          - '1024x768'
          - '1280x720'
          - '1280x800'
          - '1280x960'
          - '1280x1024'
          - '1600x900'
          - '1600x904'
          - '1600x1000'
          - '1600x1200'
          - '1920x1080'
          description: |
            Resolution.
            Value map to display names: 
            160x90=160x90  
            160x100=160x100  
            160x120=160x120  
            176x144=176x144  
            320x180=320x180  
            320x200=320x200  
            320x240=320x240  
            320x288=320x288  
            352x288=352x288  
            640x360=640x360  
            640x400=640x400  
            640x480=640x480  
            768x480=768x480  
            800x450=800x450  
            800x456=800x456  
            800x500=800x500  
            800x504=800x504  
            800x600=800x600  
            864x480=864x480  
            960x720=960x720  
            1024x768=1024x768  
            1280x720=1280x720  
            1280x800=1280x800  
            1280x960=1280x960  
            1280x1024=1280x1024  
            1600x900=1600x900  
            1600x904=1600x904  
            1600x1000=1600x1000  
            1600x1200=1600x1200  
            1920x1080=1920x1080  
          example: '320x240'
        codec:
          type: string
          enum:
          - 'jpeg'
          - 'raw'
          description: |
            Codec.
            Value map to display names: 
            jpeg=JPEG  
            raw=Raw  
          example: 'raw'
        FPS:
          type: number
          format: double
          description: 'Frames per second'
          example: 8.0
        streamReferenceId:
          type: string
          readOnly: true
          description: 'Stream reference ID'
          example: '28DC44C3-079E-4C94-8EC9-60363451EB40'
    ptzSessionTimeout_childItem:
      type: object
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'PTZ Session Timeouts'
        manualPTZTimeout:
          type: integer
          description: 'Manual PTZ timeout. Stored in seconds. A value of -1 for disabled. Value need to be in hours: e.g. multiple of 3600, or in minutes: multiple of 60, or in seconds: with max value of 999'
          example: -1
        pausePatrollingTimeout:
          type: integer
          description: 'Pause patrolling timeout. Stored in seconds. A value of -1 for disabled. Value need to be in hours: e.g. multiple of 3600, or in minutes: multiple of 60, or in seconds: with max value of 999'
          example: -1
        reservedPTZTimeout:
          type: integer
          description: 'Reserved PTZ timeout. Stored in seconds. A value of -1 for disabled. Value need to be in hours: e.g. multiple of 3600, or in minutes: multiple of 60, or in seconds: with max value of 999'
          example: -1
    eventTypes:
      type: object
      description: 'Events'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Communication Stopped'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: '6df795fa-2b74-48fe-9243-6c96f1104acd'
        name:
          type: string
          readOnly: true
          description: 'Name'
          example: 'CommunicationStopped'
        lastModified:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Last modified'
          example: '2022-05-23T09:24:58.9130000+02:00'
        description:
          type: string
          readOnly: true
          description: 'Description'
          example: 'EventType may have a long description'
        generatorType:
          type: string
          readOnly: true
          description: 'Originator type'
          example: 'Device'
        generatorSubtype:
          type: string
          readOnly: true
          description: 'Originator sub type'
        generatorName:
          type: string
          readOnly: true
          description: 'Originator name'
        generatorID:
          type: string
          readOnly: true
          description: 'Originator ID'
        generatorGroupName:
          type: string
          readOnly: true
          description: 'Originator group name'
        generatorGroupId:
          type: string
          readOnly: true
          description: 'Originator group ID'
        occursGlobally:
          type: boolean
          readOnly: true
          description: 'Occurs globally'
          example: False
        builtIn:
          type: boolean
          readOnly: true
          description: 'Built in'
          example: True
        counterEventID:
          type: string
          readOnly: true
          description: 'Counter event ID'
          example: '0ee90664-2924-42a0-a816-4129d0ecabdc'
        sourceArray:
          type: array
          readOnly: true
          items:
            type: string
          description: 'Source itemtypes. Contains an array of possible sources of the event.  Can contain *Camera*, *Hardware* and other itemtype values. For MIP plugin events the source itemtype is *MIPItem* and the filter contains the MIP Kind of source.  The actual source is selected in the rule and alarm definition configuration.'
        sourceFilterArray:
          type: array
          readOnly: true
          items:
            type: string
          description: 'Source filters. Contains an array where the index is matching the sources. Content is formatted as {value} or {type},{value}.  If source is "MIPItem" this value is the kind as defined in MIPKind - Like "3b559f2e-3693-5463-a6fb-005c1f0259dc". '
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'eventTypes'
                id:
                  type: string
                  example: '6df795fa-2b74-48fe-9243-6c96f1104acd'
            parent:
              type: object
              properties:
                type:
                  type: string
                  example: 'eventTypeGroups'
                id:
                  type: string
                  example: '29101d41-f0d7-44be-8d14-5f21c57d6bf0'

    eventTypeGroups:
      type: object
      description: 'Event Group'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Device - Predefined'
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'eventTypeGroups'
                id:
                  type: string
                  example: '29101d41-f0d7-44be-8d14-5f21c57d6bf0'

    failoverGroups:
      type: object
      description: 'Failover groups'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'MyFailoverGroup'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: '363c3fad-f404-49d2-baf4-a020ab50712c'
        name:
          type: string
          description: 'Name'
          example: 'MyFailoverGroup'
        description:
          type: string
          description: 'Description'
          example: 'FailoverGroup may have a long description'
        createdDate:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Created date'
          example: '2022-05-23T09:24:58.9130000+02:00'
        lastModified:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Last modified'
          example: '2022-05-23T09:24:58.9130000+02:00'
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'failoverGroups'
                id:
                  type: string
                  example: '363c3fad-f404-49d2-baf4-a020ab50712c'

    failoverRecorders:
      type: object
      description: 'Failover recorders'
      properties:
        enabled:
          type: boolean
          description: ''
          example: true
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'groupLevelFailover'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: '2b0bd2b2-aac8-40f5-b723-0c309f7b02eb'
        name:
          type: string
          description: 'Name'
          example: 'groupLevelFailover'
        description:
          type: string
          description: 'Description'
          example: 'FailoverRecorder may have a long description'
        hostName:
          type: string
          readOnly: true
          description: 'Host name. Host name  of the recording server (deprecated, use *Web Server Uri*)'
          example: 'servertest'
        portNumber:
          type: integer
          readOnly: true
          description: 'Port number. Port number of the recording server (deprecated, use *Web Server Uri*)'
          example: 7563
        webServerUri:
          type: string
          readOnly: true
          description: 'Web Server Uri. Web Server Uri of the recording server'
          example: 'http://servertest:7563/'
        activeWebServerUri:
          type: string
          readOnly: true
          description: 'Active Public Web server URI . Currently active public web server address '
        publicAccessEnabled:
          type: boolean
          description: 'Public address enabled. Enable or disable the public address'
          example: False
        publicWebserverHostName:
          type: string
          description: 'Public recording server address. Public recording server address'
        publicWebserverPort:
          type: integer
          description: 'Public recording server port. Public recording server port'
          example: 0
        multicastServerAddress:
          type: string
          description: 'Multicast server address. Multicast server address'
          example: '0.0.0.0'
        udpPort:
          type: integer
          description: 'Udp port. The port number used for communication between failover recording servers. Default port is 8844'
          example: 1111
        position:
          type: integer
          readOnly: true
          description: 'Group position. Defines the order this failover server has in the group'
          example: 0
        databasePath:
          type: string
          description: |
            Database location. Specify the path to the database used by the failover recording server for storing recordings.
            You cannot change the database path while the failover recording server is taking over from a recording server. The system applies the changes when the failover recording server is no longer taking over from a recording server.
          example: 'myDatabasePath'
        createdDate:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Created date'
          example: '2022-05-23T09:24:58.9130000+02:00'
        lastModified:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Last modified'
          example: '2022-05-23T09:24:58.9130000+02:00'
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'failoverRecorders'
                id:
                  type: string
                  example: '2b0bd2b2-aac8-40f5-b723-0c309f7b02eb'
            parent:
              type: object
              properties:
                type:
                  type: string
                  example: 'failoverGroups'
                id:
                  type: string
                  example: '363c3fad-f404-49d2-baf4-a020ab50712c'

    genericEvents:
      type: object
      description: 'Generic events'
      properties:
        enabled:
          type: boolean
          description: ''
          example: true
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'MyGenericEvent'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: 'd804a255-e028-4b62-be4b-fb09fd893a6c'
        name:
          type: string
          description: 'Name'
          example: 'MyGenericEvent'
        dataSource:
          type: string
          enum:
          - 'GenericEventDataSource[b867db0c-be9e-422b-b934-6fc7fa98c5d8]'
          - 'GenericEventDataSource[8607bccc-2bb5-4b47-a7de-8225d14c4213]'
          - 'GenericEventDataSource[fbe6f74b-23f3-4fdd-abb6-21e9fb857703]'
          description: |
            Data source.
            Value map to display names: 
            GenericEventDataSource[b867db0c-be9e-422b-b934-6fc7fa98c5d8]=Compatible  
            GenericEventDataSource[8607bccc-2bb5-4b47-a7de-8225d14c4213]=International  
            GenericEventDataSource[fbe6f74b-23f3-4fdd-abb6-21e9fb857703]=MyGenericEventDataSource  
          example: 'GenericEventDataSource[fbe6f74b-23f3-4fdd-abb6-21e9fb857703]'
        expression:
          type: string
          description: 'Expression'
          example: ' abc '
        expressionType:
          type: string
          enum:
          - '0'
          - '1'
          - '2'
          description: |
            Expression type.
            Value map to display names: 
            0=Search  
            1=Match  
            2=Regular expression  
          example: '0'
        priority:
          type: integer
          description: 'Priority'
          example: 100
        lastModified:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Last modified'
          example: '2022-05-23T09:24:58.9130000+02:00'
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'genericEvents'
                id:
                  type: string
                  example: 'd804a255-e028-4b62-be4b-fb09fd893a6c'

    genericEventDataSources:
      type: object
      description: 'Generic event data sources'
      properties:
        enabled:
          type: boolean
          description: ''
          example: true
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'MyGenericEventDataSource'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: '311a6f1d-7fa8-4bff-8daa-8850a08a6498'
        name:
          type: string
          description: 'Name'
          example: 'MyGenericEventDataSource'
        dataSourcePort:
          type: integer
          description: 'Port'
          example: 5555
        dataSourceSeparator:
          type: string
          description: 'Separator bytes'
        dataSourceEncoding:
          type: integer
          description: 'Encoding (code page)'
          example: 1252
        dataSourceLog:
          type: boolean
          description: 'Write to log'
          example: False
        dataSourceEcho:
          type: string
          enum:
          - 'Full'
          - 'Statistics'
          - 'None'
          description: |
            Echo type selector.
            Value map to display names: 
            Full=Echo all bytes  
            Statistics=Echo statistics  
            None=No echo  
          example: 'None'
        dataSourceAllowed:
          type: string
          description: 'Allowed external IPv4 addresses'
        dataSourceAllowed6:
          type: string
          description: 'Allowed external IPv6 addresses'
        dataSourceProtocol:
          type: string
          enum:
          - 'Tcp'
          - 'Udp'
          - 'Both'
          description: |
            Protocol type(s).
            Value map to display names: 
            Tcp=TCP  
            Udp=UDP  
            Both=TCP and UDP  
          example: 'Tcp'
        dataSourceAddressFamily:
          type: string
          enum:
          - 'InterNetwork'
          - 'InterNetworkV6'
          - 'Both'
          description: |
            IP address family.
            Value map to display names: 
            InterNetwork=IPv4  
            InterNetworkV6=IPv6  
            Both=IPv4 and IPv6  
          example: 'Both'
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'genericEventDataSources'
                id:
                  type: string
                  example: '311a6f1d-7fa8-4bff-8daa-8850a08a6498'

    gisMapLocations:
      type: object
      description: 'GIS map locations'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'MyGisMapLocation'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: '42bb29be-4bb2-4b59-986a-6314ce59569c'
        name:
          type: string
          description: 'Name'
          example: 'MyGisMapLocation'
        scale:
          type: number
          format: double
          description: 'Scale. Defines how to scale map when going to this location. A value of 2 million will show approximately an area of 300x300 kilometers / 200x200 miles.  A value of 2000 will show approximately a city block.'
          example: 1
        color:
          type: string
          description: 'Color. Define the color of the marker. Value is a string formatted with a leading hash sign. Default value is a red marked with value #FFFF5611'
          example: '#FFFF00AE'
        positionX:
          type: number
          format: double
          description: 'Longitude. Contains the longitude value as a double, e.g. -74.0 for New York and is culture invariant always using decimal point.'
          example: 42
        positionY:
          type: number
          format: double
          description: 'Latitude. Contains the latitude value as a double, e.g. 40.716 for New York, and is culture invariant always using decimal point.'
          example: 84
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'gisMapLocations'
                id:
                  type: string
                  example: '42bb29be-4bb2-4b59-986a-6314ce59569c'

    hardware:
      type: object
      description: 'Hardware'
      properties:
        enabled:
          type: boolean
          description: ''
          example: true
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'DirectShow Hardware'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: '965c4a97-449a-4b4b-b772-e50e7b44f700'
        name:
          type: string
          description: 'Name'
          example: 'DirectShow Hardware'
        description:
          type: string
          description: 'Description'
          example: 'Hardware may have a long description'
        address:
          type: string
          description: 'Address'
          example: 'http://0.0.0.111/'
        userName:
          type: string
          description: 'User name'
          example: 'DirectShow'
        model:
          type: string
          readOnly: true
          description: 'Model'
          example: 'DirectShow'
        passwordLastModified:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Password last changed. Password last changed'
          example: '2022-05-23T09:24:58.9130000+02:00'
        lastModified:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Last modified'
          example: '2022-05-23T09:24:58.9130000+02:00'
        hardwareDriverPath:
          $ref: '#/components/schemas/path_hardwareDrivers'
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'hardware'
                id:
                  type: string
                  example: '965c4a97-449a-4b4b-b772-e50e7b44f700'
            parent:
              type: object
              properties:
                type:
                  type: string
                  example: 'recordingServers'
                id:
                  type: string
                  example: '9f21d63b-6693-4dfc-ad0c-829f27ef9315'

    hardwareDeviceEvents:
      type: object
      description: 'Hardware device event'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Hardware device events'
        hardwareDeviceEvents:
          $ref: '#/components/schemas/hardwareDeviceEvents'
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'hardwareDeviceEvents'
                id:
                  type: string
                  example: '0d13e292-075b-4e14-a375-3c9ba7d017ac'
            parent:
              type: object
              properties:
                type:
                  type: string
                  example: 'cameras'
                id:
                  type: string
                  example: '638bc8f1-cf28-4329-b8e6-5bba37bdb48f'

    hardwareDrivers:
      type: object
      description: 'Drivers'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Mobotix M/D/V/S series'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: '1d8bafdb-0998-4008-85e2-67e878d2fe97'
        name:
          type: string
          description: 'Name'
          example: 'Mobotix M/D/V/S series'
        groupName:
          type: string
          readOnly: true
          description: 'Driver group name'
          example: 'Mobotix'
        number:
          type: integer
          readOnly: true
          description: 'Driver number'
          example: 86
        useCount:
          type: integer
          readOnly: true
          description: 'Number of hardware using driver'
          example: 0
        driverVersion:
          type: string
          readOnly: true
          description: 'Version'
          example: 'DevicePack: 12.4a, Device Pack, Build: 12.4a.694'
        driverRevision:
          type: string
          readOnly: true
          description: 'Revision'
          example: '1.58'
        driverType:
          type: string
          readOnly: true
          enum:
          - 'Unknown'
          - 'DevicePack'
          - 'InterconnectedProduct'
          description: |
            Driver type.
            Value map to display names: 
            Unknown=Unknown  
            DevicePack=DevicePack  
            InterconnectedProduct=InterconnectedProduct  
          example: 'DevicePack'
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'hardwareDrivers'
                id:
                  type: string
                  example: '1d8bafdb-0998-4008-85e2-67e878d2fe97'
            parent:
              type: object
              properties:
                type:
                  type: string
                  example: 'recordingServers'
                id:
                  type: string
                  example: '9f21d63b-6693-4dfc-ad0c-829f27ef9315'

    hardwareDriverSettings:
      type: object
      description: 'Hardware settings'
      properties:
        hardwarePtz:
          $ref: '#/components/schemas/hardwarePtz_childItem'
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Settings'
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'hardwareDriverSettings'
                id:
                  type: string
                  example: 'cc12d372-a0fc-4d00-a816-2894a15f11ef'
            parent:
              type: object
              properties:
                type:
                  type: string
                  example: 'hardware'
                id:
                  type: string
                  example: '965c4a97-449a-4b4b-b772-e50e7b44f700'

    hardwarePtz_childItem:
      type: object
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Pan-Tilt-Zoom'
        ptzUsePtzDeviceID:
          type: boolean
          readOnly: true
          description: 'PTZ Device ID Required'
          example: true
    hardwarePtzDeviceSettings:
      type: object
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Test Driver Camera 1'
    hardwarePtzSettings:
      type: object
      description: 'PTZ'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'PTZ'
        hardwarePtzDeviceSettings:
          $ref: '#/components/schemas/hardwarePtzDeviceSettings'
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'hardwarePtzSettings'
                id:
                  type: string
                  example: '67e0b238-efaa-4c52-bcf4-52bcb874cfbd'
            parent:
              type: object
              properties:
                type:
                  type: string
                  example: 'hardware'
                id:
                  type: string
                  example: '965c4a97-449a-4b4b-b772-e50e7b44f700'

    inputEvents:
      type: object
      description: 'Input'
      properties:
        enabled:
          type: boolean
          description: ''
          example: true
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Test Driver Input 1'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: '1ee97b92-664b-4841-860a-b9d53b158d00'
        name:
          type: string
          description: 'Name'
          example: 'Test Driver Input 1'
        channel:
          type: integer
          readOnly: true
          description: 'Channel'
          example: 0
        description:
          type: string
          description: 'Description'
          example: 'InputEvent may have a long description'
        createdDate:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Created date'
          example: '2022-05-23T09:24:58.9130000+02:00'
        lastModified:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Last modified'
          example: '2022-05-23T09:24:58.9130000+02:00'
        gisPoint:
          type: string
          description: |
            Device position. Device position. Position of device in longitude, latitude and potentially altitude. 
            The format is "POINT (LONGITUDE LATITUDE)" and if you want to clear the coordinates, the value to use is "POINT EMPTY". 
            Examples: "POINT (55.656932878513 12.3763545558449)" "POINT EMPTY"  
            Can also include altitude, if so the format is "POINT (LONGITUDE LATITUDE ALTITUDE)"
          example: 'POINT EMPTY'
        shortName:
          type: string
          description: 'Short name. Used as name in the user interface where appropriate.'
        icon:
          type: integer
          description: 'Icon identifier. The relevant device icon to show.'
          example: 0
        coverageDirection:
          type: number
          format: double
          description: 'Direction. Indicate the viewing direction of the device.'
          example: 0
        coverageDepth:
          type: number
          format: double
          description: 'Depth. Indicate the viewing depth of the device.'
          example: 0
        coverageFieldOfView:
          type: number
          format: double
          description: 'Field of view. Indicate the field of view of the device.'
          example: 0
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'inputEvents'
                id:
                  type: string
                  example: '1ee97b92-664b-4841-860a-b9d53b158d00'
            parent:
              type: object
              properties:
                type:
                  type: string
                  example: 'hardware'
                id:
                  type: string
                  example: '965c4a97-449a-4b4b-b772-e50e7b44f700'

    inputEventGroups:
      type: object
      description: 'Input groups'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Input Group 1'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: '3f28850e-21be-45e1-bf27-607d8b930c75'
        name:
          type: string
          description: 'Name'
          example: 'Input Group 1'
        description:
          type: string
          description: 'Description'
          example: 'InputEventGroup may have a long description'
        lastModified:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Last modified'
          example: '2022-05-23T09:24:58.9130000+02:00'
        builtIn:
          type: boolean
          readOnly: true
          description: 'Built-in group'
          example: False
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'inputEventGroups'
                id:
                  type: string
                  example: '3f28850e-21be-45e1-bf27-607d8b930c75'

    layouts:
      type: object
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: '1 + 1'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: '314254b7-be6b-4c5d-bf6b-aae579bf88c0'
        name:
          type: string
          readOnly: true
          description: 'Name'
          example: '1 + 1'
        description:
          type: string
          readOnly: true
          description: 'Description'
          example: 'Layout may have a long description'
        lastModified:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Last modified'
          example: '2022-05-23T09:24:58.9130000+02:00'
        createdDate:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Created date'
          example: '2022-05-23T09:24:58.9130000+02:00'
        definitionXml:
          type: string
          readOnly: true
          description: 'Definition (XML). XML defining the layout'
          example: '<ViewLayout ViewLayoutType= VideoOS.RemoteClient.Application.Data.ViewLayouts.ViewLayoutCustom, VideoOS.RemoteClient.Application  Id= e4391ae5-7d96-4a0f-835a-9019a73f269a  ViewLayoutGroupId= 7EB5B9CC-D56F-4785-BA72-4E71FADA8C6B ><ViewLayoutIcon>iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGOfPtRkwAAACBjSFJNAACHDwAAjA8AAP1SAACBQAAAfXkAAOmLAAA85QAAGcxzPIV3AAAKOWlDQ1BQaG90b3Nob3AgSUNDIHByb2ZpbGUAAEjHnZZ3VFTXFofPvXd6oc0wAlKG3rvAANJ7k15FYZgZYCgDDjM0sSGiAhFFRJoiSFDEgNFQJFZEsRAUVLAHJAgoMRhFVCxvRtaLrqy89/Ly++Osb+2z97n77L3PWhcAkqcvl5cGSwGQyhPwgzyc6RGRUXTsAIABHmCAKQBMVka6X7B7CBDJy82FniFyAl8EAfB6WLwCcNPQM4BOB/+fpFnpfIHomAARm7M5GSwRF4g4JUuQLrbPipgalyxmGCVmvihBEcuJOWGRDT77LLKjmNmpPLaIxTmns1PZYu4V8bZMIUfEiK+ICzO5nCwR3xKxRoowlSviN+LYVA4zAwAUSWwXcFiJIjYRMYkfEuQi4uUA4EgJX3HcVyzgZAvEl3JJS8/hcxMSBXQdli7d1NqaQffkZKVwBALDACYrmcln013SUtOZvBwAFu/8WTLi2tJFRbY0tba0NDQzMv2qUP91829K3NtFehn4uWcQrf+L7a/80hoAYMyJarPziy2uCoDOLQDI3fti0zgAgKSobx3Xv7oPTTwviQJBuo2xcVZWlhGXwzISF/QP/U+Hv6GvvmckPu6P8tBdOfFMYYqALq4bKy0lTcinZ6QzWRy64Z+H+B8H/nUeBkGceA6fwxNFhImmjMtLELWbx+YKuGk8Opf3n5r4D8P+pMW5FonS+BFQY4yA1HUqQH7tBygKESDR+8Vd/6NvvvgwIH554SqTi3P/7zf9Z8Gl4iWDm/A5ziUohM4S8jMX98TPEqABAUgCKpAHykAd6ABDYAasgC1wBG7AG/iDEBAJVgMWSASpgA+yQB7YBApBMdgJ9oBqUAcaQTNoBcdBJzgFzoNL4Bq4AW6D+2AUTIBnYBa8BgsQBGEhMkSB5CEVSBPSh8wgBmQPuUG+UBAUCcVCCRAPEkJ50GaoGCqDqqF6qBn6HjoJnYeuQIPQXWgMmoZ+h97BCEyCqbASrAUbwwzYCfaBQ+BVcAK8Bs6FC+AdcCXcAB+FO+Dz8DX4NjwKP4PnEIAQERqiihgiDMQF8UeikHiEj6xHipAKpAFpRbqRPuQmMorMIG9RGBQFRUcZomxRnqhQFAu1BrUeVYKqRh1GdaB6UTdRY6hZ1Ec0Ga2I1kfboL3QEegEdBa6EF2BbkK3oy+ib6Mn0K8xGAwNo42xwnhiIjFJmLWYEsw+TBvmHGYQM46Zw2Kx8lh9rB3WH8vECrCF2CrsUexZ7BB2AvsGR8Sp4Mxw7rgoHA+Xj6vAHcGdwQ3hJnELeCm8Jt4G749n43PwpfhGfDf+On4Cv0CQJmgT7AghhCTCJkIloZVwkfCA8JJIJKoRrYmBRC5xI7GSeIx4mThGfEuSIemRXEjRJCFpB+kQ6RzpLuklmUzWIjuSo8gC8g5yM/kC+RH5jQRFwkjCS4ItsUGiRqJDYkjiuSReUlPSSXK1ZK5kheQJyeuSM1J4KS0pFymm1HqpGqmTUiNSc9IUaVNpf+lU6RLpI9JXpKdksDJaMm4ybJkCmYMyF2TGKQhFneJCYVE2UxopFykTVAxVm+pFTaIWU7+jDlBnZWVkl8mGyWbL1sielh2lITQtmhcthVZKO04bpr1borTEaQlnyfYlrUuGlszLLZVzlOPIFcm1yd2WeydPl3eTT5bfJd8p/1ABpaCnEKiQpbBf4aLCzFLqUtulrKVFS48vvacIK+opBimuVTyo2K84p6Ss5KGUrlSldEFpRpmm7KicpFyufEZ5WoWiYq/CVSlXOavylC5Ld6Kn0CvpvfRZVUVVT1Whar3qgOqCmrZaqFq+WpvaQ3WCOkM9Xr1cvUd9VkNFw08jT6NF454mXpOhmai5V7NPc15LWytca6tWp9aUtpy2l3audov2Ax2yjoPOGp0GnVu6GF2GbrLuPt0berCehV6iXo3edX1Y31Kfq79Pf9AAbWBtwDNoMBgxJBk6GWYathiOGdGMfI3yjTqNnhtrGEcZ7zLuM/5oYmGSYtJoct9UxtTbNN+02/R3Mz0zllmN2S1zsrm7+QbzLvMXy/SXcZbtX3bHgmLhZ7HVosfig6WVJd+y1XLaSsMq1qrWaoRBZQQwShiXrdHWztYbrE9Zv7WxtBHYHLf5zdbQNtn2iO3Ucu3lnOWNy8ft1OyYdvV2o/Z0+1j7A/ajDqoOTIcGh8eO6o5sxybHSSddpySno07PnU2c+c7tzvMuNi7rXM65Iq4erkWuA24ybqFu1W6P3NXcE9xb3Gc9LDzWepzzRHv6eO7yHPFS8mJ5NXvNelt5r/Pu9SH5BPtU+zz21fPl+3b7wX7efrv9HqzQXMFb0ekP/L38d/s/DNAOWBPwYyAmMCCwJvBJkGlQXlBfMCU4JvhI8OsQ55DSkPuhOqHC0J4wybDosOaw+XDX8LLw0QjjiHUR1yIVIrmRXVHYqLCopqi5lW4r96yciLaILoweXqW9KnvVldUKq1NWn46RjGHGnIhFx4bHHol9z/RnNjDn4rziauNmWS6svaxnbEd2OXuaY8cp40zG28WXxU8l2CXsTphOdEisSJzhunCruS+SPJPqkuaT/ZMPJX9KCU9pS8Wlxqae5Mnwknm9acpp2WmD6frphemja2zW7Fkzy/fhN2VAGasyugRU0c9Uv1BHuEU4lmmfWZP5Jiss60S2dDYvuz9HL2d7zmSue+63a1FrWWt78lTzNuWNrXNaV78eWh+3vmeD+oaCDRMbPTYe3kTYlLzpp3yT/LL8V5vDN3cXKBVsLBjf4rGlpVCikF84stV2a9021DbutoHt5turtn8sYhddLTYprih+X8IqufqN6TeV33zaEb9joNSydP9OzE7ezuFdDrsOl0mX5ZaN7/bb3VFOLy8qf7UnZs+VimUVdXsJe4V7Ryt9K7uqNKp2Vr2vTqy+XeNc01arWLu9dn4fe9/Qfsf9rXVKdcV17w5wD9yp96jvaNBqqDiIOZh58EljWGPft4xvm5sUmoqbPhziHRo9HHS4t9mqufmI4pHSFrhF2DJ9NProje9cv+tqNWytb6O1FR8Dx4THnn4f+/3wcZ/jPScYJ1p/0Pyhtp3SXtQBdeR0zHYmdo52RXYNnvQ+2dNt293+o9GPh06pnqo5LXu69AzhTMGZT2dzz86dSz83cz7h/HhPTM/9CxEXbvUG9g5c9Ll4+ZL7pQt9Tn1nL9tdPnXF5srJq4yrndcsr3X0W/S3/2TxU/uA5UDHdavrXTesb3QPLh88M+QwdP6m681Lt7xuXbu94vbgcOjwnZHokdE77DtTd1PuvriXeW/h/sYH6AdFD6UeVjxSfNTws+7PbaOWo6fHXMf6Hwc/vj/OGn/2S8Yv7ycKnpCfVEyqTDZPmU2dmnafvvF05dOJZ+nPFmYKf5X+tfa5zvMffnP8rX82YnbiBf/Fp99LXsq/PPRq2aueuYC5R69TXy/MF72Rf3P4LeNt37vwd5MLWe+x7ys/6H7o/ujz8cGn1E+f/gUDmPP8usTo0wAAAAlwSFlzAAAOwwAADsMBx2+oZAAAAF5JREFUOE+t0jEKACEMRFFPKoKdhWAREPHuf9k5wsTil3mBkAKUTKnhf3G59+Im4JyDm4C9N24CIgI3AWst3ATMOXETMMbATUDmiQT03nET0FrDTUCtFbc3N0gfMQt8Az2T1PzTGoAAAAAASUVORK5CYII=</ViewLayoutIcon><ViewItems><ViewItem><Position><X>0</X><Y>0</Y></Position><Size><Width>1000</Width><Height>666</Height></Size></ViewItem><ViewItem><Position><X>0</X><Y>666</Y></Position><Size><Width>1000</Width><Height>333</Height></Size></ViewItem></ViewItems></ViewLayout>'
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'layouts'
                id:
                  type: string
                  example: '314254b7-be6b-4c5d-bf6b-aae579bf88c0'
            parent:
              type: object
              properties:
                type:
                  type: string
                  example: 'layoutGroups'
                id:
                  type: string
                  example: 'b0e14cf5-0ead-4612-a2d0-9d071073c50d'

    layoutGroups:
      type: object
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: '4:3'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: 'b0e14cf5-0ead-4612-a2d0-9d071073c50d'
        name:
          type: string
          readOnly: true
          description: 'Name'
          example: '4:3'
        description:
          type: string
          readOnly: true
          description: 'Description'
          example: 'LayoutGroup may have a long description'
        lastModified:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Last modified'
          example: '2022-05-23T09:24:58.9130000+02:00'
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'layoutGroups'
                id:
                  type: string
                  example: 'b0e14cf5-0ead-4612-a2d0-9d071073c50d'

    licenseDetail:
      type: object
      description: 'License information details'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Device License'
        pluginId:
          type: string
          readOnly: true
          description: 'Plug-in ID'
          example: '00000000-0000-0000-0000-000000000000'
        licenseType:
          type: string
          readOnly: true
          description: 'License type'
          example: 'Device License'
        activated:
          type: string
          readOnly: true
          description: 'Activated'
          example: '13'
        changesWithoutActivation:
          type: string
          readOnly: true
          description: 'Changes without activation'
          example: '0 out of 10'
        inGrace:
          type: integer
          readOnly: true
          description: 'In grace period'
          example: 0
        graceExpired:
          type: string
          readOnly: true
          description: 'Grace period expired'
          example: '0'
        notLicensed:
          type: string
          readOnly: true
          description: 'Without license'
          example: '0'
        note:
          type: string
          readOnly: true
          description: 'Note'
    licenseInformations:
      type: object
      description: 'License information'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'XProtect Corporate 2022 R3'
        slc:
          type: string
          readOnly: true
          description: 'Software License Code'
          example: 'M01-C01-223-01-6C429D'
        sku:
          type: string
          readOnly: true
          description: 'Product SKU'
          example: 'XPCO'
        careLevel:
          type: string
          readOnly: true
          description: 'Care level'
          example: 'Premium'
        careId:
          type: string
          readOnly: true
          description: 'Care ID'
        activationAutomatic:
          type: boolean
          readOnly: true
          description: 'Enable automatic license activation'
          example: False
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'licenseInformations'
                id:
                  type: string
                  example: 'f0e83649-e1aa-4424-a5be-cd507d041cd6'

    licenseInstalledProducts:
      type: object
      description: 'Installed product license information'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'XProtect Corporate 2022 R3'
        productDisplayName:
          type: string
          readOnly: true
          description: 'Product name'
          example: 'XProtect Corporate 2022 R3'
        pluginId:
          type: string
          readOnly: true
          description: 'Plug-in ID'
          example: '00000000-0000-0000-0000-000000000000'
        slc:
          type: string
          readOnly: true
          description: 'Software License Code'
          example: 'M01-C01-223-01-6C429D'
        expirationDate:
          type: string
          readOnly: true
          description: 'Expiration date'
          example: 'Unrestricted'
        carePlus:
          type: string
          readOnly: true
          description: 'Milestone Care Plus'
          example: '5/10/2027'
        carePremium:
          type: string
          readOnly: true
          description: 'Milestone Care Premium'
          example: '5/10/2027'
    licenseOverviewAll:
      type: object
      description: 'License overview for all sites'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Device License'
        pluginId:
          type: string
          readOnly: true
          description: 'Plug-in ID'
          example: '00000000-0000-0000-0000-000000000000'
        licenseType:
          type: string
          readOnly: true
          description: 'License type'
          example: 'Device License'
        activated:
          type: string
          readOnly: true
          description: 'Activated'
          example: '15 out of 5000'
    loginProviders:
      type: object
      description: 'External IDP'
      properties:
        enabled:
          type: boolean
          description: ''
          example: true
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'TA External Provider'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: 'cb707285-8180-49d3-89c9-2916186be755'
        name:
          type: string
          description: 'Name'
          example: 'TA External Provider'
        clientId:
          type: string
          description: 'Client ID. Client ID is retrieved as part of registering with the external IDP'
          example: 'ms.idp'
        clientSecret:
          type: string
          description: 'Client secret. Client secret is retrieved as part of registering with the external IDP'
        clientSecretHasValue:
          type: boolean
          readOnly: true
          description: 'Client secret has value. Tells if the client secret stored on the server has a value or not.'
          example: True
        authority:
          type: string
          description: 'Authentication authority. Authentication authority for the external IDP'
          example: 'https://DKTA-1102SK0009.ta.rd.local:5001'
        callbackPath:
          type: string
          description: 'Callback path. Callback path for the identity provider'
          example: '/signin-oidc'
        scopes:
          type: array
          items:
            type: string
          description: 'Scopes. Scopes to include in queries to external IDP'
        userNameClaimType:
          type: string
          description: 'Preferred user name claim. The name of the claim used for generating unique user names for the local users'
        promptForLogin:
          type: boolean
          description: 'Prompt for login. Determines whether users will be prompted for credentials every time they log on'
          example: True
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'loginProviders'
                id:
                  type: string
                  example: 'cb707285-8180-49d3-89c9-2916186be755'

    lprMatchLists:
      type: object
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Unlisted license plate'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: '55ae8798-1e4a-45c9-939a-d9a9ea444610'
        name:
          type: string
          description: 'Name'
          example: 'Unlisted license plate'
        triggerEventList:
          type: array
          items:
            $ref: '#/components/schemas/path_outputs'
        customFields:
          type: string
          format: list-of-items
          description: 'The semicolon separated list of names of custom fields'
        registrationNumbers:
          type: string
          readOnly: true
          format: list-of-items
          description: 'The semicolon separated list of registration numbers'
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'lprMatchLists'
                id:
                  type: string
                  example: '55ae8798-1e4a-45c9-939a-d9a9ea444610'

    metadata:
      type: object
      description: 'Metadata'
      properties:
        enabled:
          type: boolean
          description: ''
          example: true
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Test Driver Metadata 1'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: '5eb4ff4a-d570-4440-91a8-faee8b1ba205'
        name:
          type: string
          description: 'Name'
          example: 'Test Driver Metadata 1'
        channel:
          type: integer
          readOnly: true
          description: 'Channel'
          example: 0
        description:
          type: string
          description: 'Description'
          example: 'Metadata may have a long description'
        createdDate:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Created date'
          example: '2022-05-23T09:24:58.9130000+02:00'
        lastModified:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Last modified'
          example: '2022-05-23T09:24:58.9130000+02:00'
        gisPoint:
          type: string
          description: |
            Device position. Device position. Position of device in longitude, latitude and potentially altitude. 
            The format is "POINT (LONGITUDE LATITUDE)" and if you want to clear the coordinates, the value to use is "POINT EMPTY". 
            Examples: "POINT (55.656932878513 12.3763545558449)" "POINT EMPTY"  
            Can also include altitude, if so the format is "POINT (LONGITUDE LATITUDE ALTITUDE)"
          example: 'POINT EMPTY'
        shortName:
          type: string
          description: 'Short name. Used as name in the user interface where appropriate.'
        icon:
          type: integer
          description: 'Icon identifier. The relevant device icon to show.'
          example: 0
        coverageDirection:
          type: number
          format: double
          description: 'Direction. Indicate the viewing direction of the device.'
          example: 0
        coverageDepth:
          type: number
          format: double
          description: 'Depth. Indicate the viewing depth of the device.'
          example: 0
        coverageFieldOfView:
          type: number
          format: double
          description: 'Field of view. Indicate the field of view of the device.'
          example: 0
        recordingEnabled:
          type: boolean
          description: 'Recording enabled'
          example: True
        prebufferEnabled:
          type: boolean
          description: 'Prebuffer enabled'
          example: True
        prebufferInMemory:
          type: boolean
          description: 'Prebuffer in memory'
          example: True
        prebufferSeconds:
          type: integer
          description: 'Prebuffer seconds'
          example: 3
        edgeStorageEnabled:
          type: boolean
          description: 'Remote recording enabled'
          example: False
        edgeStoragePlaybackEnabled:
          type: boolean
          description: 'Remote recording playback'
          example: False
        manualRecordingTimeoutEnabled:
          type: boolean
          description: 'Manual recording timeout enabled'
          example: True
        manualRecordingTimeoutMinutes:
          type: integer
          description: 'Manual recording timeout in minutes'
          example: 5
        recordingStorage:
          $ref: '#/components/schemas/path_storages'
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'metadata'
                id:
                  type: string
                  example: '5eb4ff4a-d570-4440-91a8-faee8b1ba205'
            parent:
              type: object
              properties:
                type:
                  type: string
                  example: 'hardware'
                id:
                  type: string
                  example: '965c4a97-449a-4b4b-b772-e50e7b44f700'

    metadataGroups:
      type: object
      description: 'Metadata groups'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Metadata Group 1'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: 'b37f4500-1dd1-4995-bafa-baf09c9f64ec'
        name:
          type: string
          description: 'Name'
          example: 'Metadata Group 1'
        description:
          type: string
          description: 'Description'
          example: 'MetadataGroup may have a long description'
        lastModified:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Last modified'
          example: '2022-05-23T09:24:58.9130000+02:00'
        builtIn:
          type: boolean
          readOnly: true
          description: 'Built-in group'
          example: False
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'metadataGroups'
                id:
                  type: string
                  example: 'b37f4500-1dd1-4995-bafa-baf09c9f64ec'

    microphones:
      type: object
      description: 'Microphone'
      properties:
        enabled:
          type: boolean
          description: ''
          example: true
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'DirectShow Virtual Video Server (0.0.0.111) - Microphone 1'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: '2a0fa0e1-129f-4f66-be7a-9f1c190bfd3c'
        name:
          type: string
          description: 'Name'
          example: 'DirectShow Virtual Video Server (0.0.0.111) - Microphone 1'
        channel:
          type: integer
          readOnly: true
          description: 'Channel'
          example: 0
        description:
          type: string
          description: 'Description'
          example: 'Microphone may have a long description'
        createdDate:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Created date'
          example: '2022-05-23T09:24:58.9130000+02:00'
        lastModified:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Last modified'
          example: '2022-05-23T09:24:58.9130000+02:00'
        gisPoint:
          type: string
          description: |
            Device position. Device position. Position of device in longitude, latitude and potentially altitude. 
            The format is "POINT (LONGITUDE LATITUDE)" and if you want to clear the coordinates, the value to use is "POINT EMPTY". 
            Examples: "POINT (55.656932878513 12.3763545558449)" "POINT EMPTY"  
            Can also include altitude, if so the format is "POINT (LONGITUDE LATITUDE ALTITUDE)"
          example: 'POINT EMPTY'
        shortName:
          type: string
          description: 'Short name. Used as name in the user interface where appropriate.'
        icon:
          type: integer
          description: 'Icon identifier. The relevant device icon to show.'
          example: 0
        coverageDirection:
          type: number
          format: double
          description: 'Direction. Indicate the viewing direction of the device.'
          example: 0
        coverageDepth:
          type: number
          format: double
          description: 'Depth. Indicate the viewing depth of the device.'
          example: 0
        coverageFieldOfView:
          type: number
          format: double
          description: 'Field of view. Indicate the field of view of the device.'
          example: 0
        recordingEnabled:
          type: boolean
          description: 'Recording enabled'
          example: True
        prebufferEnabled:
          type: boolean
          description: 'Prebuffer enabled'
          example: True
        prebufferInMemory:
          type: boolean
          description: 'Prebuffer in memory'
          example: True
        prebufferSeconds:
          type: integer
          description: 'Prebuffer seconds'
          example: 3
        edgeStorageEnabled:
          type: boolean
          description: 'Remote recording enabled'
          example: False
        edgeStoragePlaybackEnabled:
          type: boolean
          description: 'Remote recording playback'
          example: False
        manualRecordingTimeoutEnabled:
          type: boolean
          description: 'Manual recording timeout enabled'
          example: True
        manualRecordingTimeoutMinutes:
          type: integer
          description: 'Manual recording timeout in minutes'
          example: 5
        recordingStorage:
          $ref: '#/components/schemas/path_storages'
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'microphones'
                id:
                  type: string
                  example: '2a0fa0e1-129f-4f66-be7a-9f1c190bfd3c'
            parent:
              type: object
              properties:
                type:
                  type: string
                  example: 'hardware'
                id:
                  type: string
                  example: '965c4a97-449a-4b4b-b772-e50e7b44f700'

    microphoneGroups:
      type: object
      description: 'Microphone groups'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Microphone Group'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: 'db393d9d-3008-4307-8e41-408dd7f920d5'
        name:
          type: string
          description: 'Name'
          example: 'Microphone Group'
        description:
          type: string
          description: 'Description'
          example: 'MicrophoneGroup may have a long description'
        lastModified:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Last modified'
          example: '2022-05-23T09:24:58.9130000+02:00'
        builtIn:
          type: boolean
          readOnly: true
          description: 'Built-in group'
          example: False
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'microphoneGroups'
                id:
                  type: string
                  example: 'db393d9d-3008-4307-8e41-408dd7f920d5'

    mipItems:
      type: object
      description: 'Item folder'
      properties:
        enabled:
          type: boolean
          description: ''
          example: true
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Incident projects'
        Id:
          type: string
          readOnly: true
          description: 'ID'
          example: '77F8F2A9-9DE8-4048-8D63-26BF44DCCED1'
        Name:
          type: string
          description: 'Name'
          example: 'Incident projects'
        GisPoint:
          type: string
          description: 'Gis point'
          example: 'POINT EMPTY'
        __Encrypt:
          type: boolean
          description: 'Encrypt'
          example: False
        LastModified:
          type: string
          description: 'LastModified'
          example: '2022-11-03T12:54:02.0430000Z'
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'mipItems'
                id:
                  type: string
                  example: '9f44adfa-ceab-427a-b669-fc79cbcf04c9'
            parent:
              type: object
              properties:
                type:
                  type: string
                  example: 'mipKinds'
                id:
                  type: string
                  example: 'c5d5ab61-9eee-425a-96e9-62e08cac6b0f'

    mipKinds:
      type: object
      description: 'MIP kinds'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'DLNA Servers'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: 'c5d5ab61-9eee-425a-96e9-62e08cac6b0f'
        name:
          type: string
          description: 'Name'
          example: 'DLNA Servers'
        pluginId:
          type: string
          readOnly: true
          description: 'Plugin ID'
          example: 'b0650ff4-06bd-4076-9f30-bba7df90ceb4'
        pluginName:
          type: string
          description: 'Plugin name'
          example: 'DLNA Servers'
        kindType:
          type: string
          enum:
          - 'ITEM'
          - 'OPTION'
          description: |
            Define content type ITEM or OPTION.
            Value map to display names: 
            ITEM=Item  
            OPTION=Option  
          example: 'ITEM'
        securityAction:
          type: string
          description: 'Comma separated list of action IDs . Contains a comma separated list of ActionId*s. If security is not to be used, this field should be set to String.Empty.  Note that when used, the *GENERIC_READ* , *GENERIC_WRITE* and *ADMIN_SECURITY* actionId*s should always be available.'
        displayOnGisMap:
          type: boolean
          description: 'Display on GIS map (if supported by plugin)'
          example: True
        parentKind:
          type: string
          description: 'Parent kind'
          example: '00000000-0000-0000-0000-000000000000'
        dataVersion:
          type: integer
          readOnly: true
          description: 'Sum of all DataVersions'
          example: 1
        modifiedUser:
          type: string
          readOnly: true
          description: 'Modified by user'
          example: 'TA\TATest'
        lastModified:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Last modified'
          example: '2022-05-23T09:24:58.9130000+02:00'
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'mipKinds'
                id:
                  type: string
                  example: 'c5d5ab61-9eee-425a-96e9-62e08cac6b0f'

    monitors:
      type: object
      description: 'Monitor'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Front desk monitor'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: 'ba113936-9a15-4be5-84b6-29a9d0e3cd3f'
        name:
          type: string
          description: 'Name'
          example: 'Front desk monitor'
        description:
          type: string
          description: 'Description'
          example: 'Monitor may have a long description'
        lastModified:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Last modified'
          example: '2022-05-23T09:24:58.9130000+02:00'
        createdDate:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Created date'
          example: '2022-05-23T09:24:58.9130000+02:00'
        aspectRatio:
          type: string
          enum:
          - 'Aspect16x9'
          - 'Aspect4x3'
          description: |
            Aspect ratio.
            Value map to display names: 
            Aspect16x9=Aspect16x9  
            Aspect4x3=Aspect4x3  
          example: 'Aspect4x3'
        emptyViewItems:
          type: string
          enum:
          - 'Preserve'
          - 'Clear'
          description: |
            Empty preset item. What to show in an empty preset layout item.
            Value map to display names: 
            Preserve=Preserve  
            Clear=Clear  
          example: 'Preserve'
        insertionMethod:
          type: string
          enum:
          - 'Linked'
          - 'Independent'
          description: |
            Element insertion.
            Value map to display names: 
            Linked=Linked  
            Independent=Independent  
          example: 'Linked'
        locationX:
          type: number
          format: double
          description: 'Location X coordinate. X coordinate of monitor upper left corner'
          example: 0
        locationY:
          type: number
          format: double
          description: 'Location Y coordinate. Y coordinate of monitor upper left corner'
          example: 0
        monitorSize:
          type: number
          format: double
          description: 'Size. Size of monitor in inches'
          example: 20
        noLayout:
          type: string
          enum:
          - 'Preserve'
          - 'Clear'
          description: |
            Empty preset. What to show in an empty preset layout.
            Value map to display names: 
            Preserve=Preserve  
            Clear=Clear  
          example: 'Preserve'
        monitorState:
          type: string
          readOnly: true
          description: 'Monitor state. Current monitor state'
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'monitors'
                id:
                  type: string
                  example: 'ba113936-9a15-4be5-84b6-29a9d0e3cd3f'
            parent:
              type: object
              properties:
                type:
                  type: string
                  example: 'videoWalls'
                id:
                  type: string
                  example: '1da906e6-9599-4f39-b63a-e1a597649ae7'

    monitorPresets:
      type: object
      description: 'Monitor presets'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Night'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: '23b6c495-5fbd-4f4e-9a44-23d3e55f7adc'
        name:
          type: string
          readOnly: true
          description: 'Name'
          example: 'Night'
        lastModified:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Last modified'
          example: '2022-05-23T09:24:58.9130000+02:00'
        definitionXml:
          type: string
          description: 'Definition XML. XML defining the monitor preset'
          example: '<view viewlayouttype= VideoOS.RemoteClient.Application.Data.ViewLayouts.ViewLayout5x5, VideoOS.RemoteClient.Application  shortcut=   displayname= Night  id= 14cae5f3-2e04-41b6-b8ef-243a8a52984c ><viewitems><viewitem id= 583bbfa8-aa52-41aa-b354-b658071480a1  shortcut=   displayname= LPR camera  type= VideoOS.RemoteClient.Application.Data.ContentTypes.CameraContentType.CameraViewItem, VideoOS.RemoteClient.Application ><iteminfo lastknowncameradisplayname= LPR camera  cameraid= 20c27c10-ce0c-4f09-85ea-85b46841ab9d  imagequality= 100  framerate= 0  ipixsplitmode= 0  keepimagequalitywhenmaximized= False  maintainimageaspectratio= True  updateonmotiononly= False  soundonmotion= 0  soundonevent= 0  smartsearchgridwidth= 0  smartsearchgridheight= 0  smartsearchgridmask=   /><properties /></viewitem><viewitem id= d0cfdbb1-864d-4ef5-97b4-35f81ab92a8f  shortcut=   displayname= Empty position.  type= VideoOS.RemoteClient.Application.Data.Configuration.EmptyViewItem, VideoOS.RemoteClient.Application ><properties /></viewitem><viewitem id= b177877d-bac6-416f-99a5-6a299ab96597  shortcut=   displayname= Empty position.  type= VideoOS.RemoteClient.Application.Data.Configuration.EmptyViewItem, VideoOS.RemoteClient.Application ><properties /></viewitem><viewitem id= 1fb3729c-c50b-49a9-ae33-619b2e6c720e  shortcut=   displayname= Empty position.  type= VideoOS.RemoteClient.Application.Data.Configuration.EmptyViewItem, VideoOS.RemoteClient.Application ><properties /></viewitem><viewitem id= f66e7d0a-cfa0-4a80-85da-19b74fe09602  shortcut=   displayname= Empty position.  type= VideoOS.RemoteClient.Application.Data.Configuration.EmptyViewItem, VideoOS.RemoteClient.Application ><properties /></viewitem><viewitem id= b0739c7a-f24e-417f-92f4-0cbbd0c8303e  shortcut=   displayname= Empty position.  type= VideoOS.RemoteClient.Application.Data.Configuration.EmptyViewItem, VideoOS.RemoteClient.Application ><properties /></viewitem><viewitem id= 202e4a07-76ab-44e2-8d56-0a70a4d51240  shortcut=   displayname= Empty position.  type= VideoOS.RemoteClient.Application.Data.Configuration.EmptyViewItem, VideoOS.RemoteClient.Application ><properties /></viewitem><viewitem id= 808c02e1-45fa-41fc-9680-7b7871e7ac38  shortcut=   displayname= Empty position.  type= VideoOS.RemoteClient.Application.Data.Configuration.EmptyViewItem, VideoOS.RemoteClient.Application ><properties /></viewitem><viewitem id= a91c9168-9457-49b6-885c-55858e8a4b4c  shortcut=   displayname= Empty position.  type= VideoOS.RemoteClient.Application.Data.Configuration.EmptyViewItem, VideoOS.RemoteClient.Application ><properties /></viewitem><viewitem id= 8d2e0cd6-6fb8-4943-ad99-6babbc39ab1e  shortcut=   displayname= Empty position.  type= VideoOS.RemoteClient.Application.Data.Configuration.EmptyViewItem, VideoOS.RemoteClient.Application ><properties /></viewitem><viewitem id= 39ddb6b7-05aa-4834-908d-1560b10cd79f  shortcut=   displayname= Empty position.  type= VideoOS.RemoteClient.Application.Data.Configuration.EmptyViewItem, VideoOS.RemoteClient.Application ><properties /></viewitem><viewitem id= db7beaa0-8586-4df2-a1f6-05db7c8e863f  shortcut=   displayname= Empty position.  type= VideoOS.RemoteClient.Application.Data.Configuration.EmptyViewItem, VideoOS.RemoteClient.Application ><properties /></viewitem><viewitem id= 488dd84b-8741-4e31-b279-79910f093b68  shortcut=   displayname= Empty position.  type= VideoOS.RemoteClient.Application.Data.Configuration.EmptyViewItem, VideoOS.RemoteClient.Application ><properties /></viewitem><viewitem id= e587d6b8-e079-4391-b797-8e17944db05b  shortcut=   displayname= Empty position.  type= VideoOS.RemoteClient.Application.Data.Configuration.EmptyViewItem, VideoOS.RemoteClient.Application ><properties /></viewitem><viewitem id= 60f88269-8d9d-4525-98a4-36536d738f8d  shortcut=   displayname= Empty position.  type= VideoOS.RemoteClient.Application.Data.Configuration.EmptyViewItem, VideoOS.RemoteClient.Application ><properties /></viewitem><viewitem id= 54c0c002-b861-4439-83e0-f7b8d3e251f3  shortcut=   displayname= Empty position.  type= VideoOS.RemoteClient.Application.Data.Configuration.EmptyViewItem, VideoOS.RemoteClient.Application ><properties /></viewitem><viewitem id= 07e276a1-20db-405e-af63-5f61d732534c  shortcut=   displayname= Empty position.  type= VideoOS.RemoteClient.Application.Data.Configuration.EmptyViewItem, VideoOS.RemoteClient.Application ><properties /></viewitem><viewitem id= e42dc9a6-d351-4e06-bad1-32cfbe367928  shortcut=   displayname= Empty position.  type= VideoOS.RemoteClient.Application.Data.Configuration.EmptyViewItem, VideoOS.RemoteClient.Application ><properties /></viewitem><viewitem id= fd2d5c24-b53f-4cbd-b7b8-542b3659bdd0  shortcut=   displayname= Empty position.  type= VideoOS.RemoteClient.Application.Data.Configuration.EmptyViewItem, VideoOS.RemoteClient.Application ><properties /></viewitem><viewitem id= eebf09d8-0022-4889-a964-83136bff6963  shortcut=   displayname= Empty position.  type= VideoOS.RemoteClient.Application.Data.Configuration.EmptyViewItem, VideoOS.RemoteClient.Application ><properties /></viewitem><viewitem id= 6323d0c0-1dc3-4763-bbaf-c1d1080adfe5  shortcut=   displayname= Empty position.  type= VideoOS.RemoteClient.Application.Data.Configuration.EmptyViewItem, VideoOS.RemoteClient.Application ><properties /></viewitem><viewitem id= 36633e2e-f519-41d2-99b3-89b452d96289  shortcut=   displayname= Empty position.  type= VideoOS.RemoteClient.Application.Data.Configuration.EmptyViewItem, VideoOS.RemoteClient.Application ><properties /></viewitem><viewitem id= 4d7f1f93-149d-494e-b7d6-0e0aef41d261  shortcut=   displayname= Empty position.  type= VideoOS.RemoteClient.Application.Data.Configuration.EmptyViewItem, VideoOS.RemoteClient.Application ><properties /></viewitem><viewitem id= e51ddeda-d11e-450e-a780-e914219e7b2b  shortcut=   displayname= Empty position.  type= VideoOS.RemoteClient.Application.Data.Configuration.EmptyViewItem, VideoOS.RemoteClient.Application ><properties /></viewitem><viewitem id= ea807161-8cf6-4d27-a200-83f13c2dbf5e  shortcut=   displayname= Empty position.  type= VideoOS.RemoteClient.Application.Data.Configuration.EmptyViewItem, VideoOS.RemoteClient.Application ><properties /></viewitem></viewitems><properties><property value= &lt;ViewLayout&gt;&lt;Icon&gt;iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGOfPtRkwAAACBjSFJNAACHDwAAjA8AAP1SAACBQAAAfXkAAOmLAAA85QAAGcxzPIV3AAAKOWlDQ1BQaG90b3Nob3AgSUNDIHByb2ZpbGUAAEjHnZZ3VFTXFofPvXd6oc0wAlKG3rvAANJ7k15FYZgZYCgDDjM0sSGiAhFFRJoiSFDEgNFQJFZEsRAUVLAHJAgoMRhFVCxvRtaLrqy89/Ly++Osb+2z97n77L3PWhcAkqcvl5cGSwGQyhPwgzyc6RGRUXTsAIABHmCAKQBMVka6X7B7CBDJy82FniFyAl8EAfB6WLwCcNPQM4BOB/+fpFnpfIHomAARm7M5GSwRF4g4JUuQLrbPipgalyxmGCVmvihBEcuJOWGRDT77LLKjmNmpPLaIxTmns1PZYu4V8bZMIUfEiK+ICzO5nCwR3xKxRoowlSviN+LYVA4zAwAUSWwXcFiJIjYRMYkfEuQi4uUA4EgJX3HcVyzgZAvEl3JJS8/hcxMSBXQdli7d1NqaQffkZKVwBALDACYrmcln013SUtOZvBwAFu/8WTLi2tJFRbY0tba0NDQzMv2qUP91829K3NtFehn4uWcQrf+L7a/80hoAYMyJarPziy2uCoDOLQDI3fti0zgAgKSobx3Xv7oPTTwviQJBuo2xcVZWlhGXwzISF/QP/U+Hv6GvvmckPu6P8tBdOfFMYYqALq4bKy0lTcinZ6QzWRy64Z+H+B8H/nUeBkGceA6fwxNFhImmjMtLELWbx+YKuGk8Opf3n5r4D8P+pMW5FonS+BFQY4yA1HUqQH7tBygKESDR+8Vd/6NvvvgwIH554SqTi3P/7zf9Z8Gl4iWDm/A5ziUohM4S8jMX98TPEqABAUgCKpAHykAd6ABDYAasgC1wBG7AG/iDEBAJVgMWSASpgA+yQB7YBApBMdgJ9oBqUAcaQTNoBcdBJzgFzoNL4Bq4AW6D+2AUTIBnYBa8BgsQBGEhMkSB5CEVSBPSh8wgBmQPuUG+UBAUCcVCCRAPEkJ50GaoGCqDqqF6qBn6HjoJnYeuQIPQXWgMmoZ+h97BCEyCqbASrAUbwwzYCfaBQ+BVcAK8Bs6FC+AdcCXcAB+FO+Dz8DX4NjwKP4PnEIAQERqiihgiDMQF8UeikHiEj6xHipAKpAFpRbqRPuQmMorMIG9RGBQFRUcZomxRnqhQFAu1BrUeVYKqRh1GdaB6UTdRY6hZ1Ec0Ga2I1kfboL3QEegEdBa6EF2BbkK3oy+ib6Mn0K8xGAwNo42xwnhiIjFJmLWYEsw+TBvmHGYQM46Zw2Kx8lh9rB3WH8vECrCF2CrsUexZ7BB2AvsGR8Sp4Mxw7rgoHA+Xj6vAHcGdwQ3hJnELeCm8Jt4G749n43PwpfhGfDf+On4Cv0CQJmgT7AghhCTCJkIloZVwkfCA8JJIJKoRrYmBRC5xI7GSeIx4mThGfEuSIemRXEjRJCFpB+kQ6RzpLuklmUzWIjuSo8gC8g5yM/kC+RH5jQRFwkjCS4ItsUGiRqJDYkjiuSReUlPSSXK1ZK5kheQJyeuSM1J4KS0pFymm1HqpGqmTUiNSc9IUaVNpf+lU6RLpI9JXpKdksDJaMm4ybJkCmYMyF2TGKQhFneJCYVE2UxopFykTVAxVm+pFTaIWU7+jDlBnZWVkl8mGyWbL1sielh2lITQtmhcthVZKO04bpr1borTEaQlnyfYlrUuGlszLLZVzlOPIFcm1yd2WeydPl3eTT5bfJd8p/1ABpaCnEKiQpbBf4aLCzFLqUtulrKVFS48vvacIK+opBimuVTyo2K84p6Ss5KGUrlSldEFpRpmm7KicpFyufEZ5WoWiYq/CVSlXOavylC5Ld6Kn0CvpvfRZVUVVT1Whar3qgOqCmrZaqFq+WpvaQ3WCOkM9Xr1cvUd9VkNFw08jT6NF454mXpOhmai5V7NPc15LWytca6tWp9aUtpy2l3audov2Ax2yjoPOGp0GnVu6GF2GbrLuPt0berCehV6iXo3edX1Y31Kfq79Pf9AAbWBtwDNoMBgxJBk6GWYathiOGdGMfI3yjTqNnhtrGEcZ7zLuM/5oYmGSYtJoct9UxtTbNN+02/R3Mz0zllmN2S1zsrm7+QbzLvMXy/SXcZbtX3bHgmLhZ7HVosfig6WVJd+y1XLaSsMq1qrWaoRBZQQwShiXrdHWztYbrE9Zv7WxtBHYHLf5zdbQNtn2iO3Ucu3lnOWNy8ft1OyYdvV2o/Z0+1j7A/ajDqoOTIcGh8eO6o5sxybHSSddpySno07PnU2c+c7tzvMuNi7rXM65Iq4erkWuA24ybqFu1W6P3NXcE9xb3Gc9LDzWepzzRHv6eO7yHPFS8mJ5NXvNelt5r/Pu9SH5BPtU+zz21fPl+3b7wX7efrv9HqzQXMFb0ekP/L38d/s/DNAOWBPwYyAmMCCwJvBJkGlQXlBfMCU4JvhI8OsQ55DSkPuhOqHC0J4wybDosOaw+XDX8LLw0QjjiHUR1yIVIrmRXVHYqLCopqi5lW4r96yciLaILoweXqW9KnvVldUKq1NWn46RjGHGnIhFx4bHHol9z/RnNjDn4rziauNmWS6svaxnbEd2OXuaY8cp40zG28WXxU8l2CXsTphOdEisSJzhunCruS+SPJPqkuaT/ZMPJX9KCU9pS8Wlxqae5Mnwknm9acpp2WmD6frphemja2zW7Fkzy/fhN2VAGasyugRU0c9Uv1BHuEU4lmmfWZP5Jiss60S2dDYvuz9HL2d7zmSue+63a1FrWWt78lTzNuWNrXNaV78eWh+3vmeD+oaCDRMbPTYe3kTYlLzpp3yT/LL8V5vDN3cXKBVsLBjf4rGlpVCikF84stV2a9021DbutoHt5turtn8sYhddLTYprih+X8IqufqN6TeV33zaEb9joNSydP9OzE7ezuFdDrsOl0mX5ZaN7/bb3VFOLy8qf7UnZs+VimUVdXsJe4V7Ryt9K7uqNKp2Vr2vTqy+XeNc01arWLu9dn4fe9/Qfsf9rXVKdcV17w5wD9yp96jvaNBqqDiIOZh58EljWGPft4xvm5sUmoqbPhziHRo9HHS4t9mqufmI4pHSFrhF2DJ9NProje9cv+tqNWytb6O1FR8Dx4THnn4f+/3wcZ/jPScYJ1p/0Pyhtp3SXtQBdeR0zHYmdo52RXYNnvQ+2dNt293+o9GPh06pnqo5LXu69AzhTMGZT2dzz86dSz83cz7h/HhPTM/9CxEXbvUG9g5c9Ll4+ZL7pQt9Tn1nL9tdPnXF5srJq4yrndcsr3X0W/S3/2TxU/uA5UDHdavrXTesb3QPLh88M+QwdP6m681Lt7xuXbu94vbgcOjwnZHokdE77DtTd1PuvriXeW/h/sYH6AdFD6UeVjxSfNTws+7PbaOWo6fHXMf6Hwc/vj/OGn/2S8Yv7ycKnpCfVEyqTDZPmU2dmnafvvF05dOJZ+nPFmYKf5X+tfa5zvMffnP8rX82YnbiBf/Fp99LXsq/PPRq2aueuYC5R69TXy/MF72Rf3P4LeNt37vwd5MLWe+x7ys/6H7o/ujz8cGn1E+f/gUDmPP8usTo0wAAAAlwSFlzAAAOwgAADsIBFShKgAAAAPFJREFUOE+l0DELRWAUBuDvl0oZlEEZlCSr8iOUkkkSyeQHmGQim4x263udU4QM97qnHtf3Or1XBIC/PIa/EI7j4C0usG0bb3GBZVnYNU1DIU9VVUfu+z7Wdb1kZBshTNPEbhxHuK4Lz/O4hO4pn+cZXdehLMtjl3CBYRi4o9ejf6Tfuq5RFMXhvMcFuq7jbhgG5HmOIAjQti1ndCbnPS7QNA1nfd8jyzK+X5aFli4Tx/Gxu40QqqqC0CtN04Qoivh8l6YpO2dcoCgKSBiGFFyGvvT+PEkStp/JNkLIsoy3uECSJLzFBXT5x2P4i8fwexAfaTG5M3dgCiwAAAAASUVORK5CYII=&lt;/Icon&gt;&lt;ViewItems&gt;&lt;ViewItem&gt;&lt;Position&gt;&lt;X&gt;0&lt;/X&gt;&lt;Y&gt;0&lt;/Y&gt;&lt;/Position&gt;&lt;Size&gt;&lt;Width&gt;200&lt;/Width&gt;&lt;Height&gt;200&lt;/Height&gt;&lt;/Size&gt;&lt;/ViewItem&gt;&lt;ViewItem&gt;&lt;Position&gt;&lt;X&gt;200&lt;/X&gt;&lt;Y&gt;0&lt;/Y&gt;&lt;/Position&gt;&lt;Size&gt;&lt;Width&gt;200&lt;/Width&gt;&lt;Height&gt;200&lt;/Height&gt;&lt;/Size&gt;&lt;/ViewItem&gt;&lt;ViewItem&gt;&lt;Position&gt;&lt;X&gt;400&lt;/X&gt;&lt;Y&gt;0&lt;/Y&gt;&lt;/Position&gt;&lt;Size&gt;&lt;Width&gt;200&lt;/Width&gt;&lt;Height&gt;200&lt;/Height&gt;&lt;/Size&gt;&lt;/ViewItem&gt;&lt;ViewItem&gt;&lt;Position&gt;&lt;X&gt;600&lt;/X&gt;&lt;Y&gt;0&lt;/Y&gt;&lt;/Position&gt;&lt;Size&gt;&lt;Width&gt;200&lt;/Width&gt;&lt;Height&gt;200&lt;/Height&gt;&lt;/Size&gt;&lt;/ViewItem&gt;&lt;ViewItem&gt;&lt;Position&gt;&lt;X&gt;800&lt;/X&gt;&lt;Y&gt;0&lt;/Y&gt;&lt;/Position&gt;&lt;Size&gt;&lt;Width&gt;200&lt;/Width&gt;&lt;Height&gt;200&lt;/Height&gt;&lt;/Size&gt;&lt;/ViewItem&gt;&lt;ViewItem&gt;&lt;Position&gt;&lt;X&gt;0&lt;/X&gt;&lt;Y&gt;200&lt;/Y&gt;&lt;/Position&gt;&lt;Size&gt;&lt;Width&gt;200&lt;/Width&gt;&lt;Height&gt;200&lt;/Height&gt;&lt;/Size&gt;&lt;/ViewItem&gt;&lt;ViewItem&gt;&lt;Position&gt;&lt;X&gt;200&lt;/X&gt;&lt;Y&gt;200&lt;/Y&gt;&lt;/Position&gt;&lt;Size&gt;&lt;Width&gt;200&lt;/Width&gt;&lt;Height&gt;200&lt;/Height&gt;&lt;/Size&gt;&lt;/ViewItem&gt;&lt;ViewItem&gt;&lt;Position&gt;&lt;X&gt;400&lt;/X&gt;&lt;Y&gt;200&lt;/Y&gt;&lt;/Position&gt;&lt;Size&gt;&lt;Width&gt;200&lt;/Width&gt;&lt;Height&gt;200&lt;/Height&gt;&lt;/Size&gt;&lt;/ViewItem&gt;&lt;ViewItem&gt;&lt;Position&gt;&lt;X&gt;600&lt;/X&gt;&lt;Y&gt;200&lt;/Y&gt;&lt;/Position&gt;&lt;Size&gt;&lt;Width&gt;200&lt;/Width&gt;&lt;Height&gt;200&lt;/Height&gt;&lt;/Size&gt;&lt;/ViewItem&gt;&lt;ViewItem&gt;&lt;Position&gt;&lt;X&gt;800&lt;/X&gt;&lt;Y&gt;200&lt;/Y&gt;&lt;/Position&gt;&lt;Size&gt;&lt;Width&gt;200&lt;/Width&gt;&lt;Height&gt;200&lt;/Height&gt;&lt;/Size&gt;&lt;/ViewItem&gt;&lt;ViewItem&gt;&lt;Position&gt;&lt;X&gt;0&lt;/X&gt;&lt;Y&gt;400&lt;/Y&gt;&lt;/Position&gt;&lt;Size&gt;&lt;Width&gt;200&lt;/Width&gt;&lt;Height&gt;200&lt;/Height&gt;&lt;/Size&gt;&lt;/ViewItem&gt;&lt;ViewItem&gt;&lt;Position&gt;&lt;X&gt;200&lt;/X&gt;&lt;Y&gt;400&lt;/Y&gt;&lt;/Position&gt;&lt;Size&gt;&lt;Width&gt;200&lt;/Width&gt;&lt;Height&gt;200&lt;/Height&gt;&lt;/Size&gt;&lt;/ViewItem&gt;&lt;ViewItem&gt;&lt;Position&gt;&lt;X&gt;400&lt;/X&gt;&lt;Y&gt;400&lt;/Y&gt;&lt;/Position&gt;&lt;Size&gt;&lt;Width&gt;200&lt;/Width&gt;&lt;Height&gt;200&lt;/Height&gt;&lt;/Size&gt;&lt;/ViewItem&gt;&lt;ViewItem&gt;&lt;Position&gt;&lt;X&gt;600&lt;/X&gt;&lt;Y&gt;400&lt;/Y&gt;&lt;/Position&gt;&lt;Size&gt;&lt;Width&gt;200&lt;/Width&gt;&lt;Height&gt;200&lt;/Height&gt;&lt;/Size&gt;&lt;/ViewItem&gt;&lt;ViewItem&gt;&lt;Position&gt;&lt;X&gt;800&lt;/X&gt;&lt;Y&gt;400&lt;/Y&gt;&lt;/Position&gt;&lt;Size&gt;&lt;Width&gt;200&lt;/Width&gt;&lt;Height&gt;200&lt;/Height&gt;&lt;/Size&gt;&lt;/ViewItem&gt;&lt;ViewItem&gt;&lt;Position&gt;&lt;X&gt;0&lt;/X&gt;&lt;Y&gt;600&lt;/Y&gt;&lt;/Position&gt;&lt;Size&gt;&lt;Width&gt;200&lt;/Width&gt;&lt;Height&gt;200&lt;/Height&gt;&lt;/Size&gt;&lt;/ViewItem&gt;&lt;ViewItem&gt;&lt;Position&gt;&lt;X&gt;200&lt;/X&gt;&lt;Y&gt;600&lt;/Y&gt;&lt;/Position&gt;&lt;Size&gt;&lt;Width&gt;200&lt;/Width&gt;&lt;Height&gt;200&lt;/Height&gt;&lt;/Size&gt;&lt;/ViewItem&gt;&lt;ViewItem&gt;&lt;Position&gt;&lt;X&gt;400&lt;/X&gt;&lt;Y&gt;600&lt;/Y&gt;&lt;/Position&gt;&lt;Size&gt;&lt;Width&gt;200&lt;/Width&gt;&lt;Height&gt;200&lt;/Height&gt;&lt;/Size&gt;&lt;/ViewItem&gt;&lt;ViewItem&gt;&lt;Position&gt;&lt;X&gt;600&lt;/X&gt;&lt;Y&gt;600&lt;/Y&gt;&lt;/Position&gt;&lt;Size&gt;&lt;Width&gt;200&lt;/Width&gt;&lt;Height&gt;200&lt;/Height&gt;&lt;/Size&gt;&lt;/ViewItem&gt;&lt;ViewItem&gt;&lt;Position&gt;&lt;X&gt;800&lt;/X&gt;&lt;Y&gt;600&lt;/Y&gt;&lt;/Position&gt;&lt;Size&gt;&lt;Width&gt;200&lt;/Width&gt;&lt;Height&gt;200&lt;/Height&gt;&lt;/Size&gt;&lt;/ViewItem&gt;&lt;ViewItem&gt;&lt;Position&gt;&lt;X&gt;0&lt;/X&gt;&lt;Y&gt;800&lt;/Y&gt;&lt;/Position&gt;&lt;Size&gt;&lt;Width&gt;200&lt;/Width&gt;&lt;Height&gt;200&lt;/Height&gt;&lt;/Size&gt;&lt;/ViewItem&gt;&lt;ViewItem&gt;&lt;Position&gt;&lt;X&gt;200&lt;/X&gt;&lt;Y&gt;800&lt;/Y&gt;&lt;/Position&gt;&lt;Size&gt;&lt;Width&gt;200&lt;/Width&gt;&lt;Height&gt;200&lt;/Height&gt;&lt;/Size&gt;&lt;/ViewItem&gt;&lt;ViewItem&gt;&lt;Position&gt;&lt;X&gt;400&lt;/X&gt;&lt;Y&gt;800&lt;/Y&gt;&lt;/Position&gt;&lt;Size&gt;&lt;Width&gt;200&lt;/Width&gt;&lt;Height&gt;200&lt;/Height&gt;&lt;/Size&gt;&lt;/ViewItem&gt;&lt;ViewItem&gt;&lt;Position&gt;&lt;X&gt;600&lt;/X&gt;&lt;Y&gt;800&lt;/Y&gt;&lt;/Position&gt;&lt;Size&gt;&lt;Width&gt;200&lt;/Width&gt;&lt;Height&gt;200&lt;/Height&gt;&lt;/Size&gt;&lt;/ViewItem&gt;&lt;ViewItem&gt;&lt;Position&gt;&lt;X&gt;800&lt;/X&gt;&lt;Y&gt;800&lt;/Y&gt;&lt;/Position&gt;&lt;Size&gt;&lt;Width&gt;200&lt;/Width&gt;&lt;Height&gt;200&lt;/Height&gt;&lt;/Size&gt;&lt;/ViewItem&gt;&lt;/ViewItems&gt;&lt;/ViewLayout&gt;  name= LayoutPropperty  /></properties></view>'
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'monitorPresets'
                id:
                  type: string
                  example: '23b6c495-5fbd-4f4e-9a44-23d3e55f7adc'
            parent:
              type: object
              properties:
                type:
                  type: string
                  example: 'monitors'
                id:
                  type: string
                  example: 'ba113936-9a15-4be5-84b6-29a9d0e3cd3f'

    motionDetections:
      type: object
      description: 'Motion detection'
      properties:
        enabled:
          type: boolean
          description: ''
          example: true
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Motion detection'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: '87b0798f-0c37-4120-86db-aab5a2e7c293'
        manualSensitivityEnabled:
          type: boolean
          description: 'Enable manual motion sensitivity. Disable to let the system dynamically calculate the optimal level'
          example: False
        manualSensitivity:
          type: integer
          description: 'Motion detection sensitivity. Specify the minimum change required before counting as motion. Value in range 0 - 765'
          example: 100
        threshold:
          type: integer
          description: 'Motion detection threshold. Specify the level of motion required for an event. Value in range 0 - 10000'
          example: 2000
        keyframesOnly:
          type: boolean
          description: 'Enable motion detection on keyframes only. Optimize the performance on MPEG-4/H.264/H.265 by detecting motion on keyframes only'
          example: True
        processTime:
          type: string
          enum:
          - 'Ms100'
          - 'Ms250'
          - 'Ms500'
          - 'Ms750'
          - 'Ms1000'
          description: |
            Motion detection check interval. Interval for how often to check for motion.
            Value map to display names: 
            Ms100=Ms100  
            Ms250=Ms250  
            Ms500=Ms500  
            Ms750=Ms750  
            Ms1000=Ms1000  
          example: 'Ms500'
        detectionMethod:
          type: string
          enum:
          - 'Normal'
          - 'Optimized'
          - 'Fast'
          description: |
            Motion detection method. Optimize motion detection by analyzing only a percentage of the image.
            Value map to display names: 
            Normal=Normal  
            Optimized=Optimized  
            Fast=Fast  
          example: 'Fast'
        generateMotionMetadata:
          type: boolean
          description: 'Generate motion metadata. Generate motion metadata for smart search function'
          example: True
        useExcludeRegions:
          type: boolean
          description: 'Use exclude regions. Enable exclude regions in the motion detection'
          example: False
        gridSize:
          type: string
          enum:
          - 'Grid8X8'
          - 'Grid16X16'
          - 'Grid32X32'
          - 'Grid64X64'
          description: |
            Grid size. The grid divides the image into selectable regions. If None is selected, exclude regions are disabled.
            Value map to display names: 
            Grid8X8=Grid8X8  
            Grid16X16=Grid16X16  
            Grid32X32=Grid32X32  
            Grid64X64=Grid64X64  
          example: 'Grid16X16'
        excludeRegions:
          type: string
          description: 'Exclude regions. Disable motion detection in specific regions. If you use an 8x8 grid, the string should have a length of 64. If you specify 0 or 1, regions are included or excluded respectively from top left region and going left to right.'
          example: '0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
        hardwareAccelerationMode:
          type: string
          enum:
          - 'Off'
          - 'Automatic'
          description: |
            Hardware acceleration mode. Defines if the motion detection resolution uses automatic or no hardware acceleration.
            Value map to display names: 
            Off=Off  
            Automatic=Automatic  
          example: 'Automatic'
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'motionDetections'
                id:
                  type: string
                  example: '87b0798f-0c37-4120-86db-aab5a2e7c293'
            parent:
              type: object
              properties:
                type:
                  type: string
                  example: 'cameras'
                id:
                  type: string
                  example: '638bc8f1-cf28-4329-b8e6-5bba37bdb48f'

    outputs:
      type: object
      description: 'Output'
      properties:
        enabled:
          type: boolean
          description: ''
          example: true
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Bunny Output'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: '2d6e053a-6e1b-462b-81ec-a2c3d54148c0'
        name:
          type: string
          description: 'Name'
          example: 'Bunny Output'
        channel:
          type: integer
          readOnly: true
          description: 'Channel'
          example: 0
        description:
          type: string
          description: 'Description'
          example: 'Output may have a long description'
        createdDate:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Created date'
          example: '2022-05-23T09:24:58.9130000+02:00'
        lastModified:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Last modified'
          example: '2022-05-23T09:24:58.9130000+02:00'
        gisPoint:
          type: string
          description: |
            Device position. Device position. Position of device in longitude, latitude and potentially altitude. 
            The format is "POINT (LONGITUDE LATITUDE)" and if you want to clear the coordinates, the value to use is "POINT EMPTY". 
            Examples: "POINT (55.656932878513 12.3763545558449)" "POINT EMPTY"  
            Can also include altitude, if so the format is "POINT (LONGITUDE LATITUDE ALTITUDE)"
          example: 'POINT EMPTY'
        shortName:
          type: string
          description: 'Short name. Used as name in the user interface where appropriate.'
        icon:
          type: integer
          description: 'Icon identifier. The relevant device icon to show.'
          example: 0
        coverageDirection:
          type: number
          format: double
          description: 'Direction. Indicate the viewing direction of the device.'
          example: 0
        coverageDepth:
          type: number
          format: double
          description: 'Depth. Indicate the viewing depth of the device.'
          example: 0
        coverageFieldOfView:
          type: number
          format: double
          description: 'Field of view. Indicate the field of view of the device.'
          example: 0
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'outputs'
                id:
                  type: string
                  example: '2d6e053a-6e1b-462b-81ec-a2c3d54148c0'
            parent:
              type: object
              properties:
                type:
                  type: string
                  example: 'hardware'
                id:
                  type: string
                  example: '965c4a97-449a-4b4b-b772-e50e7b44f700'

    outputGroups:
      type: object
      description: 'Output groups'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Test Driver Camera 1'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: '806ebe93-aa00-4476-99ea-9e44418a7acd'
        name:
          type: string
          description: 'Name'
          example: 'Test Driver Camera 1'
        description:
          type: string
          description: 'Description'
          example: 'OutputGroup may have a long description'
        lastModified:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Last modified'
          example: '2022-05-23T09:24:58.9130000+02:00'
        builtIn:
          type: boolean
          readOnly: true
          description: 'Built-in group'
          example: False
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'outputGroups'
                id:
                  type: string
                  example: '806ebe93-aa00-4476-99ea-9e44418a7acd'

    patrollingEntry:
      type: object
      description: 'Patrolling entry'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Patrolling entry'
        order:
          type: integer
          description: 'Order. Defines the order in which the presets are used. Value from 0 to x.'
          example: 0
        presetId:
          type: string
          enum:
          - '5d4cc62f-6473-44da-8a72-98378d42d02d'
          - '30f7d653-08f3-4c11-9b43-e02a79972fe3'
          description: |
            Preset ID. .
            Value map to display names: 
            5d4cc62f-6473-44da-8a72-98378d42d02d=Ptz Preset 1  
            30f7d653-08f3-4c11-9b43-e02a79972fe3=Ptz Preset 2  
          example: '5d4cc62f-6473-44da-8a72-98378d42d02d'
        waitTime:
          type: number
          format: double
          description: 'Wait time. The number of seconds the camera should stay at this preset position'
          example: 5
    patrollingProfiles:
      type: object
      description: 'Patrolling profile'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Profile 1'
        name:
          type: string
          description: 'Name'
          example: 'Profile 1'
        description:
          type: string
          description: 'Description'
          example: 'PatrollingProfile may have a long description'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: '0592c885-be06-4b65-b058-0118c873b733'
        customizeTransitions:
          type: boolean
          description: 'Customize transitions. Indicates if transition from one preset to another should to be configured'
          example: False
        initSpeed:
          type: number
          format: double
          description: 'Initial transition: Speed. A value between 0.0 and 1.0, where 1.0 is full speed'
          example: 1
        initTransitionTime:
          type: number
          format: double
          description: 'Initial transition: Transition time. The number of seconds it is expected to take for the movement to complete'
          example: 3
        endPresetId:
          type: string
          enum:
          - '5d4cc62f-6473-44da-8a72-98378d42d02d'
          - '30f7d653-08f3-4c11-9b43-e02a79972fe3'
          description: |
            End position: Preset. .
            Value map to display names: 
            5d4cc62f-6473-44da-8a72-98378d42d02d=Ptz Preset 1  
            30f7d653-08f3-4c11-9b43-e02a79972fe3=Ptz Preset 2  
          example: '5d4cc62f-6473-44da-8a72-98378d42d02d'
        endSpeed:
          type: number
          format: double
          description: 'End position: Speed. A value between 0.0 and 1.0, where 1.0 is full speed'
          example: 0
        endTransitionTime:
          type: number
          format: double
          description: 'End position: Transition time. The number of seconds it is expected to take for the movement to complete'
          example: 0
        patrollingEntry:
          $ref: '#/components/schemas/patrollingEntry'
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'patrollingProfiles'
                id:
                  type: string
                  example: '0592c885-be06-4b65-b058-0118c873b733'
            parent:
              type: object
              properties:
                type:
                  type: string
                  example: 'cameras'
                id:
                  type: string
                  example: '638bc8f1-cf28-4329-b8e6-5bba37bdb48f'

    privacyProtections:
      type: object
      description: 'Privacy masking'
      properties:
        enabled:
          type: boolean
          description: ''
          example: true
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Privacy masking'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: '8dbdeb9f-0ed8-4e15-818e-f197d0d0e8d6'
        privacyMaskXml:
          type: string
          description: 'Privacy mask xml. Xml that defines the privacy mask'
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'privacyProtections'
                id:
                  type: string
                  example: '8dbdeb9f-0ed8-4e15-818e-f197d0d0e8d6'
            parent:
              type: object
              properties:
                type:
                  type: string
                  example: 'cameras'
                id:
                  type: string
                  example: '638bc8f1-cf28-4329-b8e6-5bba37bdb48f'

    ptzPresets:
      type: object
      description: 'PTZ presets'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Ptz Preset 1'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: 'ae4b8747-b4dd-4d0d-973c-7b5f3db4c5c1'
        name:
          type: string
          description: 'Name'
          example: 'Ptz Preset 1'
        description:
          type: string
          description: 'Description'
          example: 'PtzPreset may have a long description'
        devicePreset:
          type: boolean
          readOnly: true
          description: 'PTZ preset'
          example: False
        devicePresetInternalId:
          type: string
          readOnly: true
          description: 'Internal ID for PTZ preset'
        defaultPreset:
          type: boolean
          readOnly: true
          description: 'Default PTZ preset'
          example: False
        pan:
          type: number
          format: double
          description: 'Pan'
          example: 0.1
        tilt:
          type: number
          format: double
          description: 'Tilt'
          example: 0.2
        zoom:
          type: number
          format: double
          description: 'Zoom'
          example: 0.3
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'ptzPresets'
                id:
                  type: string
                  example: 'ae4b8747-b4dd-4d0d-973c-7b5f3db4c5c1'
            parent:
              type: object
              properties:
                type:
                  type: string
                  example: 'cameras'
                id:
                  type: string
                  example: '638bc8f1-cf28-4329-b8e6-5bba37bdb48f'

    recordingServers:
      type: object
      description: 'Recording Server'
      properties:
        enabled:
          type: boolean
          description: ''
          example: true
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'DKTA-1103SK0008'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: '9f21d63b-6693-4dfc-ad0c-829f27ef9315'
        name:
          type: string
          description: 'Name'
          example: 'DKTA-1103SK0008'
        description:
          type: string
          description: 'Description'
          example: 'RecordingServer may have a long description'
        lastModified:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Last modified'
          example: '2022-05-23T09:24:58.9130000+02:00'
        synchronizationTime:
          type: integer
          description: 'Synchronization time. Defines when the configuration is synchronized with the hardware. Define when to start the synchronization by entering a number of minutes after midnight (local time of recording server). The default value is -1, which means no synchronization.'
          example: -1
        timeZoneName:
          type: string
          readOnly: true
          description: 'Time zone'
          example: 'Romance Standard Time'
        hostName:
          type: string
          readOnly: true
          description: 'Host name. Host name  of the recording server (deprecated, use *Web Server Uri*)'
          example: 'dkta-1103sk0008.ta.rd.local'
        portNumber:
          type: integer
          readOnly: true
          description: 'Port number. Port number of the recording server (deprecated, use *Web Server Uri*)'
          example: 7563
        webServerUri:
          type: string
          readOnly: true
          description: 'Web Server Uri. Web Server Uri of the recording server'
          example: 'https://dkta-1103sk0008.ta.rd.local:7563/'
        activeWebServerUri:
          type: string
          readOnly: true
          description: 'Active Public Web server URI . Currently active public web server address '
        publicAccessEnabled:
          type: boolean
          description: 'Public address enabled. Enable or disable the public address'
          example: False
        publicWebserverHostName:
          type: string
          description: 'Public recording server address. Public recording server address'
        publicWebserverPort:
          type: integer
          description: 'Public recording server port. Public recording server port'
          example: 0
        multicastServerAddress:
          type: string
          description: 'Multicast server address. Multicast server address'
          example: '0.0.0.0'
        shutdownOnStorageFailure:
          type: boolean
          description: 'Shutdown on storage failure. Shutdown on storage failure'
          example: False
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'recordingServers'
                id:
                  type: string
                  example: '9f21d63b-6693-4dfc-ad0c-829f27ef9315'

    recordingServerFailovers:
      type: object
      description: 'Failover settings'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Failover settings'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: '7f6f3877-d8ad-4064-95e5-6e7fd57e70b9'
        primaryFailoverGroup:
          type: string
          enum:
          - 'FailoverGroup[00000000-0000-0000-0000-000000000000]'
          - 'FailoverGroup[391066CE-6C83-4FEF-9B47-4FDFAA136EF8]'
          description: |
            Primary failover group. .
            Value map to display names: 
            FailoverGroup[00000000-0000-0000-0000-000000000000]=Not used  
            FailoverGroup[391066CE-6C83-4FEF-9B47-4FDFAA136EF8]=MyFailoverGroup  
          example: 'FailoverGroup[00000000-0000-0000-0000-000000000000]'
        secondaryFailoverGroup:
          type: string
          enum:
          - 'FailoverGroup[00000000-0000-0000-0000-000000000000]'
          - 'FailoverGroup[391066CE-6C83-4FEF-9B47-4FDFAA136EF8]'
          description: |
            Secondary failover group. .
            Value map to display names: 
            FailoverGroup[00000000-0000-0000-0000-000000000000]=Not used  
            FailoverGroup[391066CE-6C83-4FEF-9B47-4FDFAA136EF8]=MyFailoverGroup  
          example: 'FailoverGroup[00000000-0000-0000-0000-000000000000]'
        hotStandby:
          type: string
          enum:
          - 'FailoverRecorder[98209E97-4D74-4A8A-80C4-3A7970DDB216]'
          description: |
            Hot standby. .
            Value map to display names: 
            FailoverRecorder[98209E97-4D74-4A8A-80C4-3A7970DDB216]=rootLevelFailover  
          example: 'FailoverRecorder[98209E97-4D74-4A8A-80C4-3A7970DDB216]'
        failoverPort:
          type: integer
          description: 'Failover port'
          example: 11000
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'recordingServerFailovers'
                id:
                  type: string
                  example: '7f6f3877-d8ad-4064-95e5-6e7fd57e70b9'
            parent:
              type: object
              properties:
                type:
                  type: string
                  example: 'recordingServers'
                id:
                  type: string
                  example: '9f21d63b-6693-4dfc-ad0c-829f27ef9315'

    recordingServerMulticasts:
      type: object
      description: 'Multicast'
      properties:
        enabled:
          type: boolean
          description: ''
          example: true
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Multicast'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: '536c696f-29c3-4be8-8e35-be5720192620'
        iPAddressStart:
          type: string
          description: 'IP address start'
          example: '232.100.1.0'
        iPAddressEnd:
          type: string
          description: 'IP address end'
          example: '232.100.1.0'
        portRangeStart:
          type: integer
          description: 'Port range start'
          example: 15900
        portRangeEnd:
          type: integer
          description: 'Port range end'
          example: 15999
        MTU:
          type: string
          description: 'MTU. Maximum Transmission Unit'
          example: '1500'
        TTL:
          type: string
          description: 'TTL. Time to live'
          example: '32'
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'recordingServerMulticasts'
                id:
                  type: string
                  example: '536c696f-29c3-4be8-8e35-be5720192620'
            parent:
              type: object
              properties:
                type:
                  type: string
                  example: 'recordingServers'
                id:
                  type: string
                  example: '9f21d63b-6693-4dfc-ad0c-829f27ef9315'

    registeredClaims:
      type: object
      description: 'Registered claims'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'VMS role'
        id:
          type: integer
          readOnly: true
          description: 'ID'
          example: 1
        name:
          type: string
          description: 'Name'
          example: 'vms_role'
        caseSensitive:
          type: boolean
          readOnly: true
          description: 'Case sensitive. Determines whether the claim values are compared case sensitive'
          example: False
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'registeredClaims'
                id:
                  type: string
                  example: '95206c2c-cf5f-46ca-9c64-4cb44b4e5a1e'
            parent:
              type: object
              properties:
                type:
                  type: string
                  example: 'loginProviders'
                id:
                  type: string
                  example: 'cb707285-8180-49d3-89c9-2916186be755'

    roles:
      type: object
      description: 'Role'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Default Role'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: '4a6c31be-631c-48a7-b5bd-f8d65291c8d8'
        name:
          type: string
          description: 'Name'
          example: 'Default Role'
        description:
          type: string
          description: 'Description'
          example: 'Role may have a long description'
        roleType:
          type: string
          readOnly: true
          enum:
          - 'Adminstrative'
          - 'UserDefined'
          description: |
            Type of role.
            Value map to display names: 
            Adminstrative=Adminstrative  
            UserDefined=UserDefined  
          example: 'UserDefined'
        lastModified:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Last modified'
          example: '2022-05-23T09:24:58.9130000+02:00'
        dualAuthorizationRequired:
          type: boolean
          description: 'Login authorization required'
          example: False
        makeUsersAnonymousDuringPTZSession:
          type: boolean
          description: 'Make users anonymous during PTZ session'
          example: False
        allowMobileClientLogOn:
          type: boolean
          description: 'Allow Mobile Client login. Allow members of the role to log in from a Mobile Client'
          example: True
        allowSmartClientLogOn:
          type: boolean
          description: 'Allow Smart Client login. Allow members of the role to log in from a Smart Client'
          example: True
        allowWebClientLogOn:
          type: boolean
          description: 'Allow Web Client login. Allow members of the role to log in from a Web Client'
          example: True
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'roles'
                id:
                  type: string
                  example: '4a6c31be-631c-48a7-b5bd-f8d65291c8d8'

    rules:
      type: object
      description: 'Rule'
      properties:
        enabled:
          type: boolean
          description: ''
          example: true
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Default Start Audio Feed Rule'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: '43609ca5-bfdd-4238-88ff-686b6657138f'
        name:
          type: string
          description: 'Name'
          example: 'Default Start Audio Feed Rule'
        description:
          type: string
          description: 'Description'
          example: 'Rule may have a long description'
        startRuleType:
          type: string
          enum:
          - 'TimeInterval'
          - 'Event'
          - 'RecurringTime'
          description: |
            Start rule type. .
            Value map to display names: 
            TimeInterval=Interval rule type  
            Event=Event rule type  
            RecurringTime=Recurring rule type  
          example: 'TimeInterval'
        stopRuleType:
          type: string
          enum:
          - 'TimeInterval'
          - 'Event'
          - 'Timer'
          - 'None'
          description: |
            Stop rule type. .
            Value map to display names: 
            TimeInterval=Interval rule type  
            Event=Event rule type  
            Timer=Timer rule type  
            None=None  
          example: 'TimeInterval'
        always:
          type: boolean
          description: 'Always'
          example: True
        withinTimeProfile:
          type: boolean
          description: 'Within selected time in <time profile>'
          example: False
        outsideTimeProfile:
          type: boolean
          description: 'Outside selected time in <time profile>'
          example: False
        timeOfDayBetween:
          type: boolean
          description: 'Within the time period <start time> to <end time>'
          example: False
        daysOfWeek:
          type: boolean
          description: 'Day(s) of week '
          example: False
        startActions:
          type: string
          enum:
          - 'StartRecording'
          - 'PtzMoveToDefault'
          - 'PtzMoveToPreset'
          - 'SetDeviceOutputState'
          - 'StartSetFramerate'
          - 'StartSetRecordingFramerate'
          - 'StartFeed'
          - 'RetrieveEdgeStorage'
          - 'RetrieveEdgeStorageTimeOrMetadata'
          - 'StartRecordAllFrames'
          - 'SetBookmark'
          - 'CreateLogEntry'
          - 'VideoWallSetToCameras'
          - 'VideoWallSetToText'
          - 'VideoWallSetToPreset'
          - 'ActivateArchiving'
          - 'VideoWallRemoveCameras'
          - 'DeviceChangeSettings'
          - 'StartPatrolling'
          - 'PausePatrolling'
          - 'MIPAction:9c75c34f-8fe4-5267-91a4-357d9962ec6c'
          - 'MIPAction:47c713ce-920e-5b05-ae25-b7cbc2f66235'
          - 'StartPluginOnDevices'
          - 'StopPluginOnDevices'
          - 'TriggerEventOnRemoteSite'
          description: |
            Start actions.
            Value map to display names: 
            StartRecording=Start recording on <devices>  
            PtzMoveToDefault=Move to default preset on <devices> with PTZ <priority>  
            PtzMoveToPreset=Move <device> to <preset> position with PTZ <priority>  
            SetDeviceOutputState=Set device output to <state>  
            StartSetFramerate=Set live frame rate on <devices>  
            StartSetRecordingFramerate=Set recording framerate to <framerate> on <devices>  
            StartFeed=Start feed on <devices>  
            RetrieveEdgeStorage=Retrieve and store remote recordings from <devices>  
            RetrieveEdgeStorageTimeOrMetadata=Retrieve and store remote recordings between <start and end time> from <devices>  
            StartRecordAllFrames=Set recording frame rate to all frames for MPEG-4/H.264/H.265 on <devices>  
            SetBookmark=Create bookmark on <devices>  
            CreateLogEntry=Make new <log entry>  
            VideoWallSetToCameras=Set <video wall> <monitor> to show <cameras>  
            VideoWallSetToText=Set <video wall> <monitor> to show text *<message>*  
            VideoWallSetToPreset=Set <video wall> to <preset>  
            ActivateArchiving=Activate archiving on <archives>  
            VideoWallRemoveCameras=Remove <cameras> from <video wall> <monitor>  
            DeviceChangeSettings=Apply new settings on <devices>  
            StartPatrolling=Start patrolling on <device>  
            PausePatrolling=Pause patrolling on <devices>  
            MIPAction:9c75c34f-8fe4-5267-91a4-357d9962ec6c=Lock Door Unit, Access Point  
            MIPAction:47c713ce-920e-5b05-ae25-b7cbc2f66235=Unlock Door Unit, Access Point  
            StartPluginOnDevices=Start plug-in on <devices>  
            StopPluginOnDevices=Stop plug-in on <devices>  
            TriggerEventOnRemoteSite=On <site> trigger <user-defined event>  
          example: 'StartFeed'
        stopActions:
          type: string
          enum:
          - 'StopRecording'
          - 'PtzMoveToDefault'
          - 'PtzMoveToPreset'
          - 'SetDeviceOutputState'
          - 'StopSetFramerate'
          - 'StopSetRecordingFramerate'
          - 'StopFeed'
          - 'StopRecordAllFrames'
          - 'VideoWallSetToCameras'
          - 'VideoWallSetToText'
          - 'VideoWallSetToPreset'
          - 'VideoWallRemoveCameras'
          - 'DeviceChangeSettings'
          - 'StopPatrolling'
          - 'ResumePatrolling'
          - 'MIPAction:9c75c34f-8fe4-5267-91a4-357d9962ec6c'
          - 'MIPAction:47c713ce-920e-5b05-ae25-b7cbc2f66235'
          - 'StartPluginOnDevices'
          - 'StopPluginOnDevices'
          - 'TriggerEventOnRemoteSite'
          description: |
            Stop actions.
            Value map to display names: 
            StopRecording=Stop recording  
            PtzMoveToDefault=Move to default preset on <devices> with PTZ <priority>  
            PtzMoveToPreset=Move <device> to <preset> position with PTZ <priority>  
            SetDeviceOutputState=Set device output to <state>  
            StopSetFramerate=Restore default live frame rate  
            StopSetRecordingFramerate=Reset recording framerate to default  
            StopFeed=Stop feed  
            StopRecordAllFrames=Restore default recording frame rate of keyframes for MPEG-4/H.264/H.265  
            VideoWallSetToCameras=Set <video wall> <monitor> to show <cameras>  
            VideoWallSetToText=Set <video wall> <monitor> to show text *<message>*  
            VideoWallSetToPreset=Set <video wall> to <preset>  
            VideoWallRemoveCameras=Remove <cameras> from <video wall> <monitor>  
            DeviceChangeSettings=Apply new settings on <devices>  
            StopPatrolling=Stop patrolling on <device>  
            ResumePatrolling=Resume patrolling  
            MIPAction:9c75c34f-8fe4-5267-91a4-357d9962ec6c=Lock Door Unit, Access Point  
            MIPAction:47c713ce-920e-5b05-ae25-b7cbc2f66235=Unlock Door Unit, Access Point  
            StartPluginOnDevices=Start plug-in on <devices>  
            StopPluginOnDevices=Stop plug-in on <devices>  
            TriggerEventOnRemoteSite=On <site> trigger <user-defined event>  
          example: 'StopFeed'
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'rules'
                id:
                  type: string
                  example: '43609ca5-bfdd-4238-88ff-686b6657138f'

    saveSearches:
      type: object
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'MySaveSearch'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: '6815cc27-524e-4664-8d1c-28041e28a4d4'
        name:
          type: string
          description: 'Name'
          example: 'MySaveSearch'
        description:
          type: string
          description: 'Description'
          example: 'SaveSearches may have a long description'
        searchQuery:
          type: string
          description: 'Search query'
          example: 'searchQuery'
        availability:
          type: string
          enum:
          - 'Private'
          - 'Public'
          description: |
            Availability.
            Value map to display names: 
            Private=Private  
            Public=Public  
          example: 'Public'
        includesScopeItems:
          type: boolean
          readOnly: true
          description: 'Devices are included in the search query'
          example: False
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'saveSearches'
                id:
                  type: string
                  example: '6815cc27-524e-4664-8d1c-28041e28a4d4'

    childSites:
      type: object
      description: 'Child sites'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'DKTA-1029SK0009'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: '89b2eec5-8235-4382-8312-c55d87a7b510'
        description:
          type: string
          readOnly: true
          description: 'Description'
          example: 'Site may have a long description'
        lastModified:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Last modified'
          example: '2022-05-23T09:24:58.9130000+02:00'
        connectionState:
          type: string
          readOnly: true
          description: 'Site connection state. '
          example: 'Attached'
        version:
          type: string
          readOnly: true
          description: 'Product version'
          example: '22.3.0.1'
        serviceAccount:
          type: string
          readOnly: true
          description: 'Management server service account'
          example: 'S-1-5-20'
        synchronizationStatus:
          type: integer
          readOnly: true
          description: 'Site synchronization status'
          example: 201
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'childSites'
                id:
                  type: string
                  example: '89b2eec5-8235-4382-8312-c55d87a7b510'

    siteAddresses:
      type: object
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'https://dkta-1029sk0009.ta.rd.local:443/'
        url:
          type: string
          readOnly: true
          description: 'URL'
          example: 'https://dkta-1029sk0009.ta.rd.local:443/'
        addressType:
          type: string
          readOnly: true
          enum:
          - 'Internal'
          - 'External'
          - 'Server'
          description: |
            Type.
            Value map to display names: 
            Internal=Internal  
            External=External  
            Server=Server  
          example: 'Internal'
    speakers:
      type: object
      description: 'Speaker'
      properties:
        enabled:
          type: boolean
          description: ''
          example: true
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Bunny Speaker'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: 'f8d828d4-f2fc-4ee1-a7d9-f9bd2c275bd7'
        name:
          type: string
          description: 'Name'
          example: 'Bunny Speaker'
        channel:
          type: integer
          readOnly: true
          description: 'Channel'
          example: 0
        description:
          type: string
          description: 'Description'
          example: 'Speaker may have a long description'
        createdDate:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Created date'
          example: '2022-05-23T09:24:58.9130000+02:00'
        lastModified:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Last modified'
          example: '2022-05-23T09:24:58.9130000+02:00'
        gisPoint:
          type: string
          description: |
            Device position. Device position. Position of device in longitude, latitude and potentially altitude. 
            The format is "POINT (LONGITUDE LATITUDE)" and if you want to clear the coordinates, the value to use is "POINT EMPTY". 
            Examples: "POINT (55.656932878513 12.3763545558449)" "POINT EMPTY"  
            Can also include altitude, if so the format is "POINT (LONGITUDE LATITUDE ALTITUDE)"
          example: 'POINT EMPTY'
        shortName:
          type: string
          description: 'Short name. Used as name in the user interface where appropriate.'
        icon:
          type: integer
          description: 'Icon identifier. The relevant device icon to show.'
          example: 0
        coverageDirection:
          type: number
          format: double
          description: 'Direction. Indicate the viewing direction of the device.'
          example: 0
        coverageDepth:
          type: number
          format: double
          description: 'Depth. Indicate the viewing depth of the device.'
          example: 0
        coverageFieldOfView:
          type: number
          format: double
          description: 'Field of view. Indicate the field of view of the device.'
          example: 0
        recordingEnabled:
          type: boolean
          description: 'Recording enabled'
          example: True
        prebufferEnabled:
          type: boolean
          description: 'Prebuffer enabled'
          example: True
        prebufferInMemory:
          type: boolean
          description: 'Prebuffer in memory'
          example: True
        prebufferSeconds:
          type: integer
          description: 'Prebuffer seconds'
          example: 3
        edgeStorageEnabled:
          type: boolean
          description: 'Remote recording enabled'
          example: False
        edgeStoragePlaybackEnabled:
          type: boolean
          description: 'Remote recording playback'
          example: False
        manualRecordingTimeoutEnabled:
          type: boolean
          description: 'Manual recording timeout enabled'
          example: True
        manualRecordingTimeoutMinutes:
          type: integer
          description: 'Manual recording timeout in minutes'
          example: 5
        recordingStorage:
          $ref: '#/components/schemas/path_storages'
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'speakers'
                id:
                  type: string
                  example: 'f8d828d4-f2fc-4ee1-a7d9-f9bd2c275bd7'
            parent:
              type: object
              properties:
                type:
                  type: string
                  example: 'hardware'
                id:
                  type: string
                  example: '965c4a97-449a-4b4b-b772-e50e7b44f700'

    speakerGroups:
      type: object
      description: 'Speaker groups'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Speaker Group'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: '097b561d-e5b4-4c73-be5e-8289a3df0390'
        name:
          type: string
          description: 'Name'
          example: 'Speaker Group'
        description:
          type: string
          description: 'Description'
          example: 'SpeakerGroup may have a long description'
        lastModified:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Last modified'
          example: '2022-05-23T09:24:58.9130000+02:00'
        builtIn:
          type: boolean
          readOnly: true
          description: 'Built-in group'
          example: False
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'speakerGroups'
                id:
                  type: string
                  example: '097b561d-e5b4-4c73-be5e-8289a3df0390'

    storages:
      type: object
      description: 'Storage'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'encryptedStorage'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: 'f1e406c5-2da8-47cd-8b1c-9a2f8db33949'
        name:
          type: string
          description: 'Name'
          example: 'encryptedStorage'
        description:
          type: string
          description: 'Description'
          example: 'Storage may have a long description'
        diskPath:
          type: string
          readOnly: true
          description: 'Path. Contains the path to the storage disk'
          example: 'c:\encryptedStorage'
        createdDate:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Created date'
          example: '2022-05-23T09:24:58.9130000+02:00'
        lastModified:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Last modified'
          example: '2022-05-23T09:24:58.9130000+02:00'
        retainMinutes:
          type: integer
          description: 'Retention time. The number of minutes that must elapse before data are deleted or archived. The value that specifies the retention period in minutes. The value have to be between 1 and  525600000 (365000 days). By default, the value is 1440, which is 1 day.'
          example: 30
        maxSize:
          type: integer
          description: 'Max size (in MB). The maximum size of the recording storage in MB.  The value have to be between 1 and 1099511627776 (1 exabyte). By default, the value is set to 1024, which is 1 GB.'
          example: 1024
        isDefault:
          type: boolean
          readOnly: true
          description: 'Default storage. Is default'
          example: True
        signing:
          type: boolean
          description: 'Signing. Specifies if database should be signed'
          example: False
        encryptionMethod:
          type: string
          readOnly: true
          enum:
          - 'None'
          - 'Light'
          - 'Strong'
          description: |
            Encryption. Specifies the strength of the encryption.
            Value map to display names: 
            None=None  
            Light=Light  
            Strong=Strong  
          example: 'Light'
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'storages'
                id:
                  type: string
                  example: 'f1e406c5-2da8-47cd-8b1c-9a2f8db33949'
            parent:
              type: object
              properties:
                type:
                  type: string
                  example: 'recordingServers'
                id:
                  type: string
                  example: '9f21d63b-6693-4dfc-ad0c-829f27ef9315'

    storageInformation:
      type: object
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
        anyTablesWithData:
          type: string
          readOnly: true
          enum:
          - 'Unknown'
          - 'ContainsData'
          - 'DoesNotContainData'
          description: |
            Any table with data. Specifies if status regarding data usage have been received from the recording server (Unknown if no status have been received).
            Value map to display names: 
            Unknown=Unknown  
            ContainsData=ContainsData  
            DoesNotContainData=DoesNotContainData  
          example: 'DoesNotContainData'
        lastUpdated:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Last update. Shows when status regarding data usage was received from the recording server'
          example: '2022-05-23T09:24:58.9130000+02:00'
        lockedUsedSpace:
          type: integer
          readOnly: true
          description: 'Locked data (MB). Evidence locked data in storage or archive (in MB)'
          example: 0
        usedSpace:
          type: integer
          readOnly: true
          description: 'Used space (MB). Data in storage or archive (in MB)'
          example: 0
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'storageInformation'
                id:
                  type: string
                  example: 'ab067b12-25b6-4784-aeba-ee09b00f3bf2'
            parent:
              type: object
              properties:
                type:
                  type: string
                  example: 'storages'
                id:
                  type: string
                  example: 'f1e406c5-2da8-47cd-8b1c-9a2f8db33949'

    streams:
      type: object
      description: 'Stream'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Streams'
        stream:
          type: array
          items:
            $ref: '#/components/schemas/stream'
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'streams'
                id:
                  type: string
                  example: 'e2537088-a892-43d8-885d-a454b5f98869'
            parent:
              type: object
              properties:
                type:
                  type: string
                  example: 'cameras'
                id:
                  type: string
                  example: '638bc8f1-cf28-4329-b8e6-5bba37bdb48f'

    stream:
      type: object
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Video stream 1'
        name:
          type: string
          description: 'Name'
          example: 'Video stream 1'
        streamReferenceId:
          type: string
          enum:
          - '28DC44C3-079E-4C94-8EC9-60363451EB40'
          description: |
            Stream reference ID.
            Value map to display names: 
            28DC44C3-079E-4C94-8EC9-60363451EB40=Video stream 1  
          example: '28DC44C3-079E-4C94-8EC9-60363451EB40'
        liveDefault:
          type: boolean
          description: 'Default live stream'
          example: True
        liveMode:
          type: string
          enum:
          - 'Always'
          - 'Never'
          - 'WhenNeeded'
          description: |
            Mode for live stream.
            Value map to display names: 
            Always=Always  
            Never=Never  
            WhenNeeded=WhenNeeded  
          example: 'WhenNeeded'
        record:
          type: boolean
          description: 'Default recording stream'
          example: True
    sites:
      type: object
      description: 'Management Server'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'DKTA-1103SK0008'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: '00645af0-db75-40c2-82cc-2ad2e820aca9'
        name:
          type: string
          description: 'Name'
          example: 'DKTA-1103SK0008'
        description:
          type: string
          description: 'Description'
          example: 'System may have a long description'
        lastModified:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Last modified'
          example: '2022-05-23T09:24:58.9130000+02:00'
        timeZone:
          type: string
          readOnly: true
          description: 'Time zone'
          example: 'Romance Standard Time'
        computerName:
          type: string
          readOnly: true
          description: 'Computer name'
          example: 'DKTA-1103SK0008'
        domainName:
          type: string
          readOnly: true
          description: 'Domain'
          example: 'ta.rd.local'
        lastStatusHandshake:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Last site status handshake'
          example: '2022-05-23T09:24:58.9130000+02:00'
        physicalMemory:
          type: integer
          readOnly: true
          description: 'Physical memory (MB)'
          example: 0
        platform:
          type: string
          readOnly: true
          description: 'Windows platform'
          example: '[Not Available]'
        processors:
          type: integer
          readOnly: true
          description: 'Processors'
          example: 0
        serviceAccount:
          type: string
          readOnly: true
          description: 'Management server service account'
          example: 'S-1-5-20'
        synchronizationStatus:
          type: integer
          readOnly: true
          description: 'Site synchronization status'
          example: 0
        masterSiteAddress:
          type: string
          readOnly: true
          description: 'Master site url'
        version:
          type: string
          readOnly: true
          description: 'Product version'
          example: '22.3.0.1'
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'sites'
                id:
                  type: string
                  example: '00645af0-db75-40c2-82cc-2ad2e820aca9'

    systemAddresses:
      type: object
      description: 'Address'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'https://dkta-1103sk0008.ta.rd.local:443/'
        url:
          type: string
          readOnly: true
          description: 'URL'
          example: 'https://dkta-1103sk0008.ta.rd.local:443/'
        addressType:
          type: string
          readOnly: true
          enum:
          - 'Internal'
          - 'External'
          - 'Server'
          description: |
            Type.
            Value map to display names: 
            Internal=Internal  
            External=External  
            Server=Server  
          example: 'Internal'
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'systemAddresses'
                id:
                  type: string
                  example: '99b5bd81-ffbe-456d-b9d6-877e605440ea'

    timeProfiles:
      type: object
      description: 'Time profile'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Day Length Time Profile'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: 'da463d61-0d95-42a7-a063-918387743029'
        name:
          type: string
          description: 'Name'
          example: 'Day Length Time Profile'
        description:
          type: string
          description: 'Description'
          example: 'TimeProfile may have a long description'
        lastModified:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Last modified'
          example: '2022-05-23T09:24:58.9130000+02:00'
        timeProfileType:
          type: string
          readOnly: true
          enum:
          - 'Sunclock'
          - 'Calendar'
          description: |
            Time profile type.
            Value map to display names: 
            Sunclock=Sunclock  
            Calendar=Calendar  
          example: 'Sunclock'
        sunclockGPSCoordinate:
          type: string
          description: 'GPS coordinates. The GIS location for the calculation, impacts day length when far north or far south, for example N40.7083 W74.0086, or 40.7083 -74.0086'
          example: 'N55 00 E08 50'
        sunclockSunRise:
          type: integer
          description: 'Offset to sunrise in minutes. Offset to calculated sunrise in minutes, from -120 to 120'
          example: 0
        sunclockSunSet:
          type: integer
          description: 'Offset to sunset in minutes. Offset to calculated sunset in minutes, from -120 to 120'
          example: 0
        sunclockTimeZone:
          type: string
          enum:
          - 'Dateline Standard Time'
          - 'UTC-11'
          - 'Aleutian Standard Time'
          - 'Hawaiian Standard Time'
          - 'Marquesas Standard Time'
          - 'Alaskan Standard Time'
          - 'UTC-09'
          - 'Pacific Standard Time (Mexico)'
          - 'UTC-08'
          - 'Pacific Standard Time'
          - 'US Mountain Standard Time'
          - 'Mountain Standard Time (Mexico)'
          - 'Mountain Standard Time'
          - 'Yukon Standard Time'
          - 'Central America Standard Time'
          - 'Central Standard Time'
          - 'Easter Island Standard Time'
          - 'Central Standard Time (Mexico)'
          - 'Canada Central Standard Time'
          - 'SA Pacific Standard Time'
          - 'Eastern Standard Time (Mexico)'
          - 'Eastern Standard Time'
          - 'Haiti Standard Time'
          - 'Cuba Standard Time'
          - 'US Eastern Standard Time'
          - 'Turks And Caicos Standard Time'
          - 'Paraguay Standard Time'
          - 'Atlantic Standard Time'
          - 'Venezuela Standard Time'
          - 'Central Brazilian Standard Time'
          - 'SA Western Standard Time'
          - 'Pacific SA Standard Time'
          - 'Newfoundland Standard Time'
          - 'Tocantins Standard Time'
          - 'E. South America Standard Time'
          - 'SA Eastern Standard Time'
          - 'Argentina Standard Time'
          - 'Greenland Standard Time'
          - 'Montevideo Standard Time'
          - 'Magallanes Standard Time'
          - 'Saint Pierre Standard Time'
          - 'Bahia Standard Time'
          - 'UTC-02'
          - 'Mid-Atlantic Standard Time'
          - 'Azores Standard Time'
          - 'Cape Verde Standard Time'
          - 'UTC'
          - 'GMT Standard Time'
          - 'Greenwich Standard Time'
          - 'Sao Tome Standard Time'
          - 'Morocco Standard Time'
          - 'W. Europe Standard Time'
          - 'Central Europe Standard Time'
          - 'Romance Standard Time'
          - 'Central European Standard Time'
          - 'W. Central Africa Standard Time'
          - 'Jordan Standard Time'
          - 'GTB Standard Time'
          - 'Middle East Standard Time'
          - 'Egypt Standard Time'
          - 'E. Europe Standard Time'
          - 'Syria Standard Time'
          - 'West Bank Standard Time'
          - 'South Africa Standard Time'
          - 'FLE Standard Time'
          - 'Israel Standard Time'
          - 'South Sudan Standard Time'
          - 'Kaliningrad Standard Time'
          - 'Sudan Standard Time'
          - 'Libya Standard Time'
          - 'Namibia Standard Time'
          - 'Arabic Standard Time'
          - 'Turkey Standard Time'
          - 'Arab Standard Time'
          - 'Belarus Standard Time'
          - 'Russian Standard Time'
          - 'E. Africa Standard Time'
          - 'Volgograd Standard Time'
          - 'Iran Standard Time'
          - 'Arabian Standard Time'
          - 'Astrakhan Standard Time'
          - 'Azerbaijan Standard Time'
          - 'Russia Time Zone 3'
          - 'Mauritius Standard Time'
          - 'Saratov Standard Time'
          - 'Georgian Standard Time'
          - 'Caucasus Standard Time'
          - 'Afghanistan Standard Time'
          - 'West Asia Standard Time'
          - 'Ekaterinburg Standard Time'
          - 'Pakistan Standard Time'
          - 'Qyzylorda Standard Time'
          - 'India Standard Time'
          - 'Sri Lanka Standard Time'
          - 'Nepal Standard Time'
          - 'Central Asia Standard Time'
          - 'Bangladesh Standard Time'
          - 'Omsk Standard Time'
          - 'Myanmar Standard Time'
          - 'SE Asia Standard Time'
          - 'Altai Standard Time'
          - 'W. Mongolia Standard Time'
          - 'North Asia Standard Time'
          - 'N. Central Asia Standard Time'
          - 'Tomsk Standard Time'
          - 'China Standard Time'
          - 'North Asia East Standard Time'
          - 'Singapore Standard Time'
          - 'W. Australia Standard Time'
          - 'Taipei Standard Time'
          - 'Ulaanbaatar Standard Time'
          - 'Aus Central W. Standard Time'
          - 'Transbaikal Standard Time'
          - 'Tokyo Standard Time'
          - 'North Korea Standard Time'
          - 'Korea Standard Time'
          - 'Yakutsk Standard Time'
          - 'Cen. Australia Standard Time'
          - 'AUS Central Standard Time'
          - 'E. Australia Standard Time'
          - 'AUS Eastern Standard Time'
          - 'West Pacific Standard Time'
          - 'Tasmania Standard Time'
          - 'Vladivostok Standard Time'
          - 'Lord Howe Standard Time'
          - 'Bougainville Standard Time'
          - 'Russia Time Zone 10'
          - 'Magadan Standard Time'
          - 'Norfolk Standard Time'
          - 'Sakhalin Standard Time'
          - 'Central Pacific Standard Time'
          - 'Russia Time Zone 11'
          - 'New Zealand Standard Time'
          - 'UTC+12'
          - 'Fiji Standard Time'
          - 'Kamchatka Standard Time'
          - 'Chatham Islands Standard Time'
          - 'UTC+13'
          - 'Tonga Standard Time'
          - 'Samoa Standard Time'
          - 'Line Islands Standard Time'
          description: |
            Time zone ID. Contains the ID of the time zone, for example Eastern Standard Time.
            Value map to display names: 
            Dateline Standard Time=(UTC-12:00) International Date Line West  
            UTC-11=(UTC-11:00) Coordinated Universal Time-11  
            Aleutian Standard Time=(UTC-10:00) Aleutian Islands  
            Hawaiian Standard Time=(UTC-10:00) Hawaii  
            Marquesas Standard Time=(UTC-09:30) Marquesas Islands  
            Alaskan Standard Time=(UTC-09:00) Alaska  
            UTC-09=(UTC-09:00) Coordinated Universal Time-09  
            Pacific Standard Time (Mexico)=(UTC-08:00) Baja California  
            UTC-08=(UTC-08:00) Coordinated Universal Time-08  
            Pacific Standard Time=(UTC-08:00) Pacific Time (US & Canada)  
            US Mountain Standard Time=(UTC-07:00) Arizona  
            Mountain Standard Time (Mexico)=(UTC-07:00) Chihuahua, La Paz, Mazatlan  
            Mountain Standard Time=(UTC-07:00) Mountain Time (US & Canada)  
            Yukon Standard Time=(UTC-07:00) Yukon  
            Central America Standard Time=(UTC-06:00) Central America  
            Central Standard Time=(UTC-06:00) Central Time (US & Canada)  
            Easter Island Standard Time=(UTC-06:00) Easter Island  
            Central Standard Time (Mexico)=(UTC-06:00) Guadalajara, Mexico City, Monterrey  
            Canada Central Standard Time=(UTC-06:00) Saskatchewan  
            SA Pacific Standard Time=(UTC-05:00) Bogota, Lima, Quito, Rio Branco  
            Eastern Standard Time (Mexico)=(UTC-05:00) Chetumal  
            Eastern Standard Time=(UTC-05:00) Eastern Time (US & Canada)  
            Haiti Standard Time=(UTC-05:00) Haiti  
            Cuba Standard Time=(UTC-05:00) Havana  
            US Eastern Standard Time=(UTC-05:00) Indiana (East)  
            Turks And Caicos Standard Time=(UTC-05:00) Turks and Caicos  
            Paraguay Standard Time=(UTC-04:00) Asuncion  
            Atlantic Standard Time=(UTC-04:00) Atlantic Time (Canada)  
            Venezuela Standard Time=(UTC-04:00) Caracas  
            Central Brazilian Standard Time=(UTC-04:00) Cuiaba  
            SA Western Standard Time=(UTC-04:00) Georgetown, La Paz, Manaus, San Juan  
            Pacific SA Standard Time=(UTC-04:00) Santiago  
            Newfoundland Standard Time=(UTC-03:30) Newfoundland  
            Tocantins Standard Time=(UTC-03:00) Araguaina  
            E. South America Standard Time=(UTC-03:00) Brasilia  
            SA Eastern Standard Time=(UTC-03:00) Cayenne, Fortaleza  
            Argentina Standard Time=(UTC-03:00) City of Buenos Aires  
            Greenland Standard Time=(UTC-03:00) Greenland  
            Montevideo Standard Time=(UTC-03:00) Montevideo  
            Magallanes Standard Time=(UTC-03:00) Punta Arenas  
            Saint Pierre Standard Time=(UTC-03:00) Saint Pierre and Miquelon  
            Bahia Standard Time=(UTC-03:00) Salvador  
            UTC-02=(UTC-02:00) Coordinated Universal Time-02  
            Mid-Atlantic Standard Time=(UTC-02:00) Mid-Atlantic - Old  
            Azores Standard Time=(UTC-01:00) Azores  
            Cape Verde Standard Time=(UTC-01:00) Cabo Verde Is.  
            UTC=(UTC) Coordinated Universal Time  
            GMT Standard Time=(UTC+00:00) Dublin, Edinburgh, Lisbon, London  
            Greenwich Standard Time=(UTC+00:00) Monrovia, Reykjavik  
            Sao Tome Standard Time=(UTC+00:00) Sao Tome  
            Morocco Standard Time=(UTC+01:00) Casablanca  
            W. Europe Standard Time=(UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna  
            Central Europe Standard Time=(UTC+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague  
            Romance Standard Time=(UTC+01:00) Brussels, Copenhagen, Madrid, Paris  
            Central European Standard Time=(UTC+01:00) Sarajevo, Skopje, Warsaw, Zagreb  
            W. Central Africa Standard Time=(UTC+01:00) West Central Africa  
            Jordan Standard Time=(UTC+02:00) Amman  
            GTB Standard Time=(UTC+02:00) Athens, Bucharest  
            Middle East Standard Time=(UTC+02:00) Beirut  
            Egypt Standard Time=(UTC+02:00) Cairo  
            E. Europe Standard Time=(UTC+02:00) Chisinau  
            Syria Standard Time=(UTC+02:00) Damascus  
            West Bank Standard Time=(UTC+02:00) Gaza, Hebron  
            South Africa Standard Time=(UTC+02:00) Harare, Pretoria  
            FLE Standard Time=(UTC+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius  
            Israel Standard Time=(UTC+02:00) Jerusalem  
            South Sudan Standard Time=(UTC+02:00) Juba  
            Kaliningrad Standard Time=(UTC+02:00) Kaliningrad  
            Sudan Standard Time=(UTC+02:00) Khartoum  
            Libya Standard Time=(UTC+02:00) Tripoli  
            Namibia Standard Time=(UTC+02:00) Windhoek  
            Arabic Standard Time=(UTC+03:00) Baghdad  
            Turkey Standard Time=(UTC+03:00) Istanbul  
            Arab Standard Time=(UTC+03:00) Kuwait, Riyadh  
            Belarus Standard Time=(UTC+03:00) Minsk  
            Russian Standard Time=(UTC+03:00) Moscow, St. Petersburg  
            E. Africa Standard Time=(UTC+03:00) Nairobi  
            Volgograd Standard Time=(UTC+03:00) Volgograd  
            Iran Standard Time=(UTC+03:30) Tehran  
            Arabian Standard Time=(UTC+04:00) Abu Dhabi, Muscat  
            Astrakhan Standard Time=(UTC+04:00) Astrakhan, Ulyanovsk  
            Azerbaijan Standard Time=(UTC+04:00) Baku  
            Russia Time Zone 3=(UTC+04:00) Izhevsk, Samara  
            Mauritius Standard Time=(UTC+04:00) Port Louis  
            Saratov Standard Time=(UTC+04:00) Saratov  
            Georgian Standard Time=(UTC+04:00) Tbilisi  
            Caucasus Standard Time=(UTC+04:00) Yerevan  
            Afghanistan Standard Time=(UTC+04:30) Kabul  
            West Asia Standard Time=(UTC+05:00) Ashgabat, Tashkent  
            Ekaterinburg Standard Time=(UTC+05:00) Ekaterinburg  
            Pakistan Standard Time=(UTC+05:00) Islamabad, Karachi  
            Qyzylorda Standard Time=(UTC+05:00) Qyzylorda  
            India Standard Time=(UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi  
            Sri Lanka Standard Time=(UTC+05:30) Sri Jayawardenepura  
            Nepal Standard Time=(UTC+05:45) Kathmandu  
            Central Asia Standard Time=(UTC+06:00) Astana  
            Bangladesh Standard Time=(UTC+06:00) Dhaka  
            Omsk Standard Time=(UTC+06:00) Omsk  
            Myanmar Standard Time=(UTC+06:30) Yangon (Rangoon)  
            SE Asia Standard Time=(UTC+07:00) Bangkok, Hanoi, Jakarta  
            Altai Standard Time=(UTC+07:00) Barnaul, Gorno-Altaysk  
            W. Mongolia Standard Time=(UTC+07:00) Hovd  
            North Asia Standard Time=(UTC+07:00) Krasnoyarsk  
            N. Central Asia Standard Time=(UTC+07:00) Novosibirsk  
            Tomsk Standard Time=(UTC+07:00) Tomsk  
            China Standard Time=(UTC+08:00) Beijing, Chongqing, Hong Kong, Urumqi  
            North Asia East Standard Time=(UTC+08:00) Irkutsk  
            Singapore Standard Time=(UTC+08:00) Kuala Lumpur, Singapore  
            W. Australia Standard Time=(UTC+08:00) Perth  
            Taipei Standard Time=(UTC+08:00) Taipei  
            Ulaanbaatar Standard Time=(UTC+08:00) Ulaanbaatar  
            Aus Central W. Standard Time=(UTC+08:45) Eucla  
            Transbaikal Standard Time=(UTC+09:00) Chita  
            Tokyo Standard Time=(UTC+09:00) Osaka, Sapporo, Tokyo  
            North Korea Standard Time=(UTC+09:00) Pyongyang  
            Korea Standard Time=(UTC+09:00) Seoul  
            Yakutsk Standard Time=(UTC+09:00) Yakutsk  
            Cen. Australia Standard Time=(UTC+09:30) Adelaide  
            AUS Central Standard Time=(UTC+09:30) Darwin  
            E. Australia Standard Time=(UTC+10:00) Brisbane  
            AUS Eastern Standard Time=(UTC+10:00) Canberra, Melbourne, Sydney  
            West Pacific Standard Time=(UTC+10:00) Guam, Port Moresby  
            Tasmania Standard Time=(UTC+10:00) Hobart  
            Vladivostok Standard Time=(UTC+10:00) Vladivostok  
            Lord Howe Standard Time=(UTC+10:30) Lord Howe Island  
            Bougainville Standard Time=(UTC+11:00) Bougainville Island  
            Russia Time Zone 10=(UTC+11:00) Chokurdakh  
            Magadan Standard Time=(UTC+11:00) Magadan  
            Norfolk Standard Time=(UTC+11:00) Norfolk Island  
            Sakhalin Standard Time=(UTC+11:00) Sakhalin  
            Central Pacific Standard Time=(UTC+11:00) Solomon Is., New Caledonia  
            Russia Time Zone 11=(UTC+12:00) Anadyr, Petropavlovsk-Kamchatsky  
            New Zealand Standard Time=(UTC+12:00) Auckland, Wellington  
            UTC+12=(UTC+12:00) Coordinated Universal Time+12  
            Fiji Standard Time=(UTC+12:00) Fiji  
            Kamchatka Standard Time=(UTC+12:00) Petropavlovsk-Kamchatsky - Old  
            Chatham Islands Standard Time=(UTC+12:45) Chatham Islands  
            UTC+13=(UTC+13:00) Coordinated Universal Time+13  
            Tonga Standard Time=(UTC+13:00) Nuku*alofa  
            Samoa Standard Time=(UTC+13:00) Samoa  
            Line Islands Standard Time=(UTC+14:00) Kiritimati Island  
          example: 'Romance Standard Time'
        timeProfileAppointmentRecur:
          $ref: '#/components/schemas/timeProfileAppointmentRecur'
        timeProfileAppointmentRoot:
          $ref: '#/components/schemas/timeProfileAppointmentRoot'
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'timeProfiles'
                id:
                  type: string
                  example: 'da463d61-0d95-42a7-a063-918387743029'

    timeProfileAppointmentRecur:
      type: object
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'My recurring appointment'
        appointmentRootId:
          type: string
          readOnly: true
          description: 'ID of the recurrence'
          example: '4e417363-d0c3-4a9a-bd1a-0662ff9ec3cf'
        allDayEvent:
          type: boolean
          readOnly: true
          description: 'All day event'
          example: False
        startDateTime:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Start time'
          example: '2022-05-23T09:24:58.9130000+02:00'
        endDateTime:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'End time'
          example: '2022-05-23T09:24:58.9130000+02:00'
        subject:
          type: string
          description: 'Subject'
          example: 'My recurring appointment'
        recurrenceDescription:
          type: string
          readOnly: true
          description: 'Description'
          example: 'Occurs every day effective 11/3/2022 until 11/3/2122 from 10:54 AM to 11:54 AM.'
        recurrenceOccurrenceStartTime:
          type: string
          format: time
          description: 'Start time. The start time of each appointment, formatted as HH:mm:ss (seconds are ignored)'
          example: '10:54:01'
        recurrenceOccurrenceDuration:
          type: string
          description: 'Duration'
          example: '01:00:00'
        recurrencePatternType:
          type: string
          enum:
          - 'Explicit'
          - 'Calculated'
          description: |
            Define occurrences. Setting Define occurrences to Explicit will use the specific relevant values, for example Date in the month repeated each month - while setting Define occurrences to Calculated will calculate what the date should be, based on Days of the week as bitmask and Week number within the month, for example second Tuesday in each month.
            Value map to display names: 
            Explicit=Explicit  
            Calculated=Calculated  
          example: 'Calculated'
        recurrencePatternFrequency:
          type: string
          enum:
          - 'Daily'
          - 'Weekly'
          - 'Monthly'
          - 'Yearly'
          description: |
            Frequency.
            Value map to display names: 
            Daily=Daily  
            Weekly=Weekly  
            Monthly=Monthly  
            Yearly=Yearly  
          example: 'Daily'
        recurrencePatternInterval:
          type: integer
          description: 'Interval'
          example: 1
        recurrencePatternDaysOfWeek:
          type: integer
          description: 'Days of the week as bitmask. Bitmask for what days to include. Bit 0 is Sunday, 1 is Monday etc. Value of 127 (hexadecimal 7f) indicates all days of the week.'
          example: 127
        recurrencePatternDayOfMonth:
          type: integer
          description: 'Date in the month. Used when frequency is Monthly or Yearly'
          example: 23
        recurrencePatternMonthOfYear:
          type: integer
          description: 'Month. Used when Frequency is Yearly'
          example: 9
        recurrencePatternOccurrenceOfDayInMonth:
          type: string
          enum:
          - 'None'
          - 'First'
          - 'Second'
          - 'Third'
          - 'Fourth'
          - 'Last'
          description: |
            Week number within the month. Defines the day of the week within the month for which the occurrence takes place. For example if bitmask defines 4 = Tuesdays, and this field is Second then the result is the second time it is a Tuesday in each month.
            Used when Frequency is Monthly or Yearly, and Define occurrences is Calculated.  
            Possible values:
            None
            First
            Second
            Third
            Fourth
            Last.
            Value map to display names: 
            None=None  
            First=First  
            Second=Second  
            Third=Third  
            Fourth=Fourth  
            Last=Last  
          example: 'Fourth'
        recurrenceRangeStartDate:
          type: string
          format: date-time-fraction
          description: 'Start of occurrences'
          example: '2022-05-23T09:24:58.9130000+02:00'
        recurrenceRangeEndDate:
          type: string
          format: date-time-fraction
          description: 'End of occurrences'
          example: '2022-05-23T09:24:58.9130000+02:00'
        recurrenceRangeLimit:
          type: string
          enum:
          - 'NoLimit'
          - 'LimitByNumberOfOccurrences'
          - 'LimitByDate'
          description: |
            End of occurrences is defined by:.
            Value map to display names: 
            NoLimit=NoLimit  
            LimitByNumberOfOccurrences=LimitByNumberOfOccurrences  
            LimitByDate=LimitByDate  
          example: 'LimitByDate'
        recurrenceRangeMaxOccurrences:
          type: integer
          description: 'End of occurrences by count'
          example: 10
    timeProfileAppointmentRoot:
      type: object
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'My appointment'
        allDayEvent:
          type: boolean
          description: 'All day event'
          example: False
        originalStartDateTime:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Start date and time (before modification)'
          example: '2022-05-23T09:24:58.9130000+02:00'
        startDateTime:
          type: string
          format: date-time-fraction
          description: 'Start time'
          example: '2022-05-23T09:24:58.9130000+02:00'
        endDateTime:
          type: string
          format: date-time-fraction
          description: 'End time'
          example: '2022-05-23T09:24:58.9130000+02:00'
        subject:
          type: string
          description: 'Subject'
          example: 'My appointment'
    toolOptions:
      type: object
      description: 'System options'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Recording Server options'
        ptzManualSessionTimeoutSec:
          type: integer
          description: 'Timeout for manual PTZ sessions (sec). A value in seconds.  Value need to be in hours: e.g. multiple of 3600, or in minutes: multiple of 60, or in seconds: with max value of 999'
          example: 15
        pausePatrollingTimeoutSec:
          type: integer
          description: 'Timeout for pause patrolling sessions (sec). A value in seconds.  Value need to be in hours: e.g. multiple of 3600, or in minutes: multiple of 60, or in seconds: with max value of 999'
          example: 600
        ptzReservedSessionTimeoutSec:
          type: integer
          description: 'Timeout for reserved PTZ sessions (sec). A value in seconds.  Value need to be in hours: e.g. multiple of 3600, or in minutes: multiple of 60, or in seconds: with max value of 999'
          example: 3600
        ptzUseDefaultPresetAsPtzHome:
          type: boolean
          description: 'Use default preset as PTZ home position. '
          example: False
        deviceErrorTimeoutSec:
          type: string
          enum:
          - '0'
          - '5'
          - '10'
          - '15'
          - '30'
          - '45'
          - '60'
          - '120'
          - '300'
          description: |
            Ignore device communication errors for. The number of seconds to pass before logging a device communication error. Legal values are 0,1,5,10,15,30,45,60,120,300.
            Value map to display names: 
            0=0  
            5=5  
            10=10  
            15=15  
            30=30  
            45=45  
            60=60  
            120=120  
            300=300  
          example: '0'
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'toolOptions'
                id:
                  type: string
                  example: 'ec9c3acc-518e-4cfd-931b-7ee69925b82c'

    users:
      type: object
      description: 'Basic user'
      properties:
        sid:
          type: string
          readOnly: true
          description: 'SID'
          example: '439E379B-46A1-4A80-9A8A-C0C78618E25D'
        identityType:
          type: string
          readOnly: true
          enum:
          - 'InvalidIdentity'
          - 'UnknownIdentityType'
          - 'WindowsUser'
          - 'WindowsGroup'
          - 'Role'
          - 'BasicUser'
          description: |
            User type.
            Value map to display names: 
            InvalidIdentity=InvalidIdentity  
            UnknownIdentityType=UnknownIdentityType  
            WindowsUser=WindowsUser  
            WindowsGroup=WindowsGroup  
            Role=Role  
            BasicUser=BasicUser  
          example: 'BasicUser'
        accountName:
          type: string
          readOnly: true
          description: 'Account name'
          example: 'Bob'
        displayName:
          type: string
          readOnly: true
          description: 'Role display name'
          example: 'Bob'
        domain:
          type: string
          readOnly: true
          description: 'Domain'
          example: '[BASIC]'
        description:
          type: string
          description: 'Description'
          example: 'User may have a long description'
        memberOf:
          type: string
          readOnly: true
          description: 'Member of groups. Only filled when getting specific user, call the GetItem(item.Path) to fill the property'
        memberOfRoles:
          type: string
          readOnly: true
          description: 'Member of roles. Only filled when getting specific user, call the GetItem(item.Path) to fill the property'
        members:
          type: string
          readOnly: true
          description: 'Members. Only filled when getting specific user, call the GetItem(item.Path) to fill the property'
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'users'
                id:
                  type: string
                  example: '71456a60-cf20-4764-a7a0-a1f89ca56546'
            parent:
              type: object
              properties:
                type:
                  type: string
                  example: 'users'
                id:
                  type: string
                  example: '71456a60-cf20-4764-a7a0-a1f89ca56546'

    userDefinedEvents:
      type: object
      description: 'User-defined event'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Event Custom'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: 'd8b5a5a4-161d-42c0-bfb8-6a023d6f43e1'
        name:
          type: string
          description: 'Name'
          example: 'Event Custom'
        lastModified:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Last modified'
          example: '2022-05-23T09:24:58.9130000+02:00'
        createdDate:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Created date'
          example: '2022-05-23T09:24:58.9130000+02:00'
        subtype:
          type: string
          readOnly: true
          description: 'Subtype'
          example: 'UserDefined'
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'userDefinedEvents'
                id:
                  type: string
                  example: 'd8b5a5a4-161d-42c0-bfb8-6a023d6f43e1'

    videoWalls:
      type: object
      description: 'Video wall'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'My wall'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: '1da906e6-9599-4f39-b63a-e1a597649ae7'
        name:
          type: string
          description: 'Name'
          example: 'My wall'
        description:
          type: string
          description: 'Description'
          example: 'VideoWall may have a long description'
        lastModified:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Last modified'
          example: '2022-05-23T09:24:58.9130000+02:00'
        createdDate:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Created date'
          example: '2022-05-23T09:24:58.9130000+02:00'
        height:
          type: number
          readOnly: true
          format: double
          description: 'Height'
          example: 200
        statusText:
          type: boolean
          description: 'Status text. Is status text shown'
          example: True
        titleBar:
          type: string
          enum:
          - 'None'
          - 'Caption'
          description: |
            Title bar. What to show in the title bar.
            Value map to display names: 
            None=None  
            Caption=Caption  
          example: 'None'
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'videoWalls'
                id:
                  type: string
                  example: '1da906e6-9599-4f39-b63a-e1a597649ae7'

    videoWallPresets:
      type: object
      description: 'Video wall preset'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Night'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: '3cc421f4-f20e-4254-a472-425ded951bc4'
        name:
          type: string
          description: 'Name'
          example: 'Night'
        description:
          type: string
          description: 'Description'
          example: 'VideoWallPreset may have a long description'
        lastModified:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Last modified'
          example: '2022-05-23T09:24:58.9130000+02:00'
        createdDate:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Created date'
          example: '2022-05-23T09:24:58.9130000+02:00'
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'videoWallPresets'
                id:
                  type: string
                  example: '3cc421f4-f20e-4254-a472-425ded951bc4'
            parent:
              type: object
              properties:
                type:
                  type: string
                  example: 'videoWalls'
                id:
                  type: string
                  example: '1da906e6-9599-4f39-b63a-e1a597649ae7'

    views:
      type: object
      description: 'View folder'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'MyView'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: '3800261d-bd75-4d01-a822-e2a0d364d208'
        name:
          type: string
          description: 'Name'
          example: 'MyView'
        lastModified:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Last modified'
          example: '2022-05-23T09:24:58.9130000+02:00'
        shortcut:
          type: string
          description: 'View shortcut'
        viewLayoutType:
          type: string
          description: 'View layout type. Must refer to a class in the Smart Client, like: *VideoOS.RemoteClient.Application.Data.ViewLayouts.ViewLayoutCustom, VideoOS.RemoteClient.Application*. Can be taken from the Layout xml definition: *viewLayoutType* node.'
          example: 'VideoOS.RemoteClient.Application.Data.ViewLayouts.ViewLayoutCustom, VideoOS.RemoteClient.Application'
        layoutCustomId:
          type: string
          description: 'Custom ID. The specific instance ID of this view and layout'
        layoutIcon:
          type: string
          description: 'Layout icon. Base 64 encoded image representing the layout format, size should be 16x16 pixels'
          example: 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGOfPtRkwAAACBjSFJNAACHDwAAjA8AAP1SAACBQAAAfXkAAOmLAAA85QAAGcxzPIV3AAAKOWlDQ1BQaG90b3Nob3AgSUNDIHByb2ZpbGUAAEjHnZZ3VFTXFofPvXd6oc0wAlKG3rvAANJ7k15FYZgZYCgDDjM0sSGiAhFFRJoiSFDEgNFQJFZEsRAUVLAHJAgoMRhFVCxvRtaLrqy89/Ly++Osb+2z97n77L3PWhcAkqcvl5cGSwGQyhPwgzyc6RGRUXTsAIABHmCAKQBMVka6X7B7CBDJy82FniFyAl8EAfB6WLwCcNPQM4BOB/+fpFnpfIHomAARm7M5GSwRF4g4JUuQLrbPipgalyxmGCVmvihBEcuJOWGRDT77LLKjmNmpPLaIxTmns1PZYu4V8bZMIUfEiK+ICzO5nCwR3xKxRoowlSviN+LYVA4zAwAUSWwXcFiJIjYRMYkfEuQi4uUA4EgJX3HcVyzgZAvEl3JJS8/hcxMSBXQdli7d1NqaQffkZKVwBALDACYrmcln013SUtOZvBwAFu/8WTLi2tJFRbY0tba0NDQzMv2qUP91829K3NtFehn4uWcQrf+L7a/80hoAYMyJarPziy2uCoDOLQDI3fti0zgAgKSobx3Xv7oPTTwviQJBuo2xcVZWlhGXwzISF/QP/U+Hv6GvvmckPu6P8tBdOfFMYYqALq4bKy0lTcinZ6QzWRy64Z+H+B8H/nUeBkGceA6fwxNFhImmjMtLELWbx+YKuGk8Opf3n5r4D8P+pMW5FonS+BFQY4yA1HUqQH7tBygKESDR+8Vd/6NvvvgwIH554SqTi3P/7zf9Z8Gl4iWDm/A5ziUohM4S8jMX98TPEqABAUgCKpAHykAd6ABDYAasgC1wBG7AG/iDEBAJVgMWSASpgA+yQB7YBApBMdgJ9oBqUAcaQTNoBcdBJzgFzoNL4Bq4AW6D+2AUTIBnYBa8BgsQBGEhMkSB5CEVSBPSh8wgBmQPuUG+UBAUCcVCCRAPEkJ50GaoGCqDqqF6qBn6HjoJnYeuQIPQXWgMmoZ+h97BCEyCqbASrAUbwwzYCfaBQ+BVcAK8Bs6FC+AdcCXcAB+FO+Dz8DX4NjwKP4PnEIAQERqiihgiDMQF8UeikHiEj6xHipAKpAFpRbqRPuQmMorMIG9RGBQFRUcZomxRnqhQFAu1BrUeVYKqRh1GdaB6UTdRY6hZ1Ec0Ga2I1kfboL3QEegEdBa6EF2BbkK3oy+ib6Mn0K8xGAwNo42xwnhiIjFJmLWYEsw+TBvmHGYQM46Zw2Kx8lh9rB3WH8vECrCF2CrsUexZ7BB2AvsGR8Sp4Mxw7rgoHA+Xj6vAHcGdwQ3hJnELeCm8Jt4G749n43PwpfhGfDf+On4Cv0CQJmgT7AghhCTCJkIloZVwkfCA8JJIJKoRrYmBRC5xI7GSeIx4mThGfEuSIemRXEjRJCFpB+kQ6RzpLuklmUzWIjuSo8gC8g5yM/kC+RH5jQRFwkjCS4ItsUGiRqJDYkjiuSReUlPSSXK1ZK5kheQJyeuSM1J4KS0pFymm1HqpGqmTUiNSc9IUaVNpf+lU6RLpI9JXpKdksDJaMm4ybJkCmYMyF2TGKQhFneJCYVE2UxopFykTVAxVm+pFTaIWU7+jDlBnZWVkl8mGyWbL1sielh2lITQtmhcthVZKO04bpr1borTEaQlnyfYlrUuGlszLLZVzlOPIFcm1yd2WeydPl3eTT5bfJd8p/1ABpaCnEKiQpbBf4aLCzFLqUtulrKVFS48vvacIK+opBimuVTyo2K84p6Ss5KGUrlSldEFpRpmm7KicpFyufEZ5WoWiYq/CVSlXOavylC5Ld6Kn0CvpvfRZVUVVT1Whar3qgOqCmrZaqFq+WpvaQ3WCOkM9Xr1cvUd9VkNFw08jT6NF454mXpOhmai5V7NPc15LWytca6tWp9aUtpy2l3audov2Ax2yjoPOGp0GnVu6GF2GbrLuPt0berCehV6iXo3edX1Y31Kfq79Pf9AAbWBtwDNoMBgxJBk6GWYathiOGdGMfI3yjTqNnhtrGEcZ7zLuM/5oYmGSYtJoct9UxtTbNN+02/R3Mz0zllmN2S1zsrm7+QbzLvMXy/SXcZbtX3bHgmLhZ7HVosfig6WVJd+y1XLaSsMq1qrWaoRBZQQwShiXrdHWztYbrE9Zv7WxtBHYHLf5zdbQNtn2iO3Ucu3lnOWNy8ft1OyYdvV2o/Z0+1j7A/ajDqoOTIcGh8eO6o5sxybHSSddpySno07PnU2c+c7tzvMuNi7rXM65Iq4erkWuA24ybqFu1W6P3NXcE9xb3Gc9LDzWepzzRHv6eO7yHPFS8mJ5NXvNelt5r/Pu9SH5BPtU+zz21fPl+3b7wX7efrv9HqzQXMFb0ekP/L38d/s/DNAOWBPwYyAmMCCwJvBJkGlQXlBfMCU4JvhI8OsQ55DSkPuhOqHC0J4wybDosOaw+XDX8LLw0QjjiHUR1yIVIrmRXVHYqLCopqi5lW4r96yciLaILoweXqW9KnvVldUKq1NWn46RjGHGnIhFx4bHHol9z/RnNjDn4rziauNmWS6svaxnbEd2OXuaY8cp40zG28WXxU8l2CXsTphOdEisSJzhunCruS+SPJPqkuaT/ZMPJX9KCU9pS8Wlxqae5Mnwknm9acpp2WmD6frphemja2zW7Fkzy/fhN2VAGasyugRU0c9Uv1BHuEU4lmmfWZP5Jiss60S2dDYvuz9HL2d7zmSue+63a1FrWWt78lTzNuWNrXNaV78eWh+3vmeD+oaCDRMbPTYe3kTYlLzpp3yT/LL8V5vDN3cXKBVsLBjf4rGlpVCikF84stV2a9021DbutoHt5turtn8sYhddLTYprih+X8IqufqN6TeV33zaEb9joNSydP9OzE7ezuFdDrsOl0mX5ZaN7/bb3VFOLy8qf7UnZs+VimUVdXsJe4V7Ryt9K7uqNKp2Vr2vTqy+XeNc01arWLu9dn4fe9/Qfsf9rXVKdcV17w5wD9yp96jvaNBqqDiIOZh58EljWGPft4xvm5sUmoqbPhziHRo9HHS4t9mqufmI4pHSFrhF2DJ9NProje9cv+tqNWytb6O1FR8Dx4THnn4f+/3wcZ/jPScYJ1p/0Pyhtp3SXtQBdeR0zHYmdo52RXYNnvQ+2dNt293+o9GPh06pnqo5LXu69AzhTMGZT2dzz86dSz83cz7h/HhPTM/9CxEXbvUG9g5c9Ll4+ZL7pQt9Tn1nL9tdPnXF5srJq4yrndcsr3X0W/S3/2TxU/uA5UDHdavrXTesb3QPLh88M+QwdP6m681Lt7xuXbu94vbgcOjwnZHokdE77DtTd1PuvriXeW/h/sYH6AdFD6UeVjxSfNTws+7PbaOWo6fHXMf6Hwc/vj/OGn/2S8Yv7ycKnpCfVEyqTDZPmU2dmnafvvF05dOJZ+nPFmYKf5X+tfa5zvMffnP8rX82YnbiBf/Fp99LXsq/PPRq2aueuYC5R69TXy/MF72Rf3P4LeNt37vwd5MLWe+x7ys/6H7o/ujz8cGn1E+f/gUDmPP8usTo0wAAAAlwSFlzAAAOwwAADsMBx2+oZAAAAKdJREFUOE+lzMEJhTAQBNBUKoKHgAfBQyBEEQRBsIaUYDVC6pn/Z8GLbkDjwPOwE8cA+EQ9vmHGcUQpGQghoJQMeO9xFWPEcRx8gG3bbv1JBpxzyGHWdVU7koG+75HDLMuidiQDXdchh5nnWe1IBtq2RQ4zTZPakQxYa5HDDMOgdiQDTdPgat93+flMSun2hv4xpq5rlJKBqqpQSgb4+UI9vqEen4P5AXrLnKE5yQ1MAAAAAElFTkSuQmCC'
        layoutViewItems:
          type: string
          description: 'Layout xml. The xml defining the layout, can be taken from the Layout xml definition, node *viewitems*'
          example: '<ViewItems><ViewItem><Position><X>0</X><Y>0</Y></Position><Size><Width>600</Width><Height>300</Height></Size></ViewItem><ViewItem><Position><X>0</X><Y>300</Y></Position><Size><Width>600</Width><Height>300</Height></Size></ViewItem></ViewItems>'
        viewItems:
          $ref: '#/components/schemas/viewItems'
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'views'
                id:
                  type: string
                  example: '3800261d-bd75-4d01-a822-e2a0d364d208'
            parent:
              type: object
              properties:
                type:
                  type: string
                  example: 'viewGroups'
                id:
                  type: string
                  example: '5f6aa578-76f5-4cbc-8b05-a078e10512a2'

    viewGroups:
      type: object
      description: 'View groups'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Private'
        id:
          type: string
          readOnly: true
          description: 'ID'
          example: '5f6aa578-76f5-4cbc-8b05-a078e10512a2'
        name:
          type: string
          description: 'Name'
          example: 'TA\TATest'
        description:
          type: string
          description: 'Description'
          example: 'ViewGroup may have a long description'
        lastModified:
          type: string
          readOnly: true
          format: date-time-fraction
          description: 'Last modified'
          example: '2022-05-23T09:24:58.9130000+02:00'
        relations:
          type: object
          properties:
            self:
              type: object
              properties:
                type:
                  type: string
                  example: 'viewGroups'
                id:
                  type: string
                  example: '5f6aa578-76f5-4cbc-8b05-a078e10512a2'

    viewItems:
      type: object
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Index 0'
        viewItemPosition:
          type: integer
          readOnly: true
          description: 'Position'
          example: 0
        viewItemDefinitionXml:
          type: string
          description: 'ViewItem definition (xml)'
          example: '<viewitem id= 2b01fa0d-2635-4ef8-a7ab-9e6b7ed9fa56  displayname= Empty ViewItem  shortcut=   type= VideoOS.RemoteClient.Application.Data.Configuration.EmptyViewItem, VideoOS.RemoteClient.Application ><properties /></viewitem>'
    getInternalUnitPathServerTask:
      type: object
      description: 'Get internal unit path'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Test System'
        externalId:
          type: string
          description: 'External ID'
    setFramerateReductionArchiveStorageServerTask:
      type: object
      description: 'Enable/disable frame rate reduction on archive'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'MyArchive'
        framerateReductionEnabled:
          type: boolean
          description: 'Frame reduction enabled. Specifies if frame rate reduction is enabled or not on the archive'
          example: False
    moveArchiveStorageServerTask:
      type: object
      description: 'Move archive'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'MyArchive'
        diskPath:
          type: string
          description: 'Path. The path to the archive'
    addBasicOwnerInfoServerTask:
      type: object
      description: 'Add basic owner information'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Basic Information'
        tagType:
          type: string
          enum:
          - 'address.Name'
          - 'address.Address'
          - 'address.State'
          - 'address.Phone'
          - 'address.Country'
          - 'address.ZipCode'
          - 'admin.Name'
          - 'admin.Address'
          - 'admin.Phone'
          - 'additional.AdditionalInfo'
          description: |
            Select tag type. .
            Value map to display names: 
            address.Name=Address - Name  
            address.Address=Address - Address  
            address.State=Address - State  
            address.Phone=Address - Phone  
            address.Country=Address - Country  
            address.ZipCode=Address - Zip code  
            admin.Name=Admin - Name  
            admin.Address=Admin - Address  
            admin.Phone=Admin - Phone  
            additional.AdditionalInfo=Additional - Additional  
          example: 'address.Name'
        tagValue:
          type: string
          description: 'Value of selected tag. This property can contain any of the BasicInformation fields. The DisplayName contains the readable name, like *Address*, while the Key is prefixed with the group name, e.g. *address.Address* or *admin.Address*. '
    removeBasicOwnerInfoServerTask:
      type: object
      description: 'Remove basic owner tag'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Basic Information'
        itemSelection:
          type: string
          enum:
          - '90a24225-e8a7-4c75-a0af-e61ede7b95e5'
          - 'dae82bfe-112b-41f9-8439-716178442df2'
          - '27a9672d-fe6b-4997-9c4d-55ebd1026b7d'
          - '9fb3b90b-5f5d-4501-92c0-aed9562af44d'
          - '5d136b25-c4a6-4c3b-9d96-6e5da8b8728f'
          - 'b3d6fb5a-4915-47f3-9a7d-4d66ddec6e19'
          - 'e7835d54-d4c2-4281-872f-6bacc70a57af'
          - '938267cf-9606-43d2-9d9f-3d58fcd6e315'
          - '7ca0af14-ed33-45cd-ab1e-a3d90deada66'
          - 'f507b2aa-2c28-40ff-95e2-ca06ea852086'
          description: 'Select tag to remove. .'
          example: '90a24225-e8a7-4c75-a0af-e61ede7b95e5'
    changePasswordBasicUserServerTask:
      type: object
      description: 'Change basic user password'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'basic'
        password:
          type: string
          description: 'Password'
    retrieveEdgeStorageServerTask:
      type: object
      description: 'Retrieve recordings from edge storage'
      properties:
        enabled:
          type: boolean
          description: ''
          example: true
        displayName:
          type: string
          readOnly: true
          description: ''
          example: '3Tone Camera'
        startTime:
          type: string
          format: date-time-fraction
          description: 'Start time'
          example: '2022-05-23T09:24:58.9130000+02:00'
        endTime:
          type: string
          format: date-time-fraction
          description: 'End time'
          example: '2022-05-23T09:24:58.9130000+02:00'
    truncateStorageOnOtherRecordingServerServerTask:
      type: object
      description: 'Delete all recordings for device on another recording server'
      properties:
        enabled:
          type: boolean
          description: ''
          example: true
        displayName:
          type: string
          readOnly: true
          description: ''
          example: '3Tone Camera'
        itemSelection:
          type: string
          description: 'Select recording server. .'
    changeDeviceRecordingStorageServerTask:
      type: object
      description: 'Change storage for device'
      properties:
        enabled:
          type: boolean
          description: ''
          example: true
        displayName:
          type: string
          readOnly: true
          description: ''
          example: '3Tone Camera'
        itemSelection:
          type: string
          enum:
          - 'Storage[607AED3C-382E-4502-A61F-3AF4897220F1]'
          - 'Storage[1eb5a09f-81e6-4106-9d86-bac63cfe08ca]'
          description: 'Select a storage to move to. .'
          example: 'Storage[607AED3C-382E-4502-A61F-3AF4897220F1]'
        moveData:
          type: boolean
          description: 'This property is deprecated and will be ignored.'
          example: True
    changeSecurityPermissionsServerTask:
      type: object
      description: 'Edit permissions'
      properties:
        enabled:
          type: boolean
          description: ''
          example: true
        displayName:
          type: string
          readOnly: true
          description: ''
          example: '3Tone Camera'
        userPath:
          $ref: '#/components/schemas/path_roles'
    changePasswordHardwareServerTask:
      type: object
      description: 'Change hardware password'
      properties:
        enabled:
          type: boolean
          description: ''
          example: true
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'DirectShow Hardware'
        password:
          type: string
          description: 'Password. Password'
        updatePasswordOnDevice:
          type: boolean
          description: 'Update password also on device. If checked the password will be changed in the system and on the hardware device itself'
          example: False
    updateFirmwareHardwareServerTask:
      type: object
      description: 'Update firmware'
      properties:
        enabled:
          type: boolean
          description: ''
          example: true
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'DirectShow Hardware'
        storageId:
          type: string
          description: 'Storage ID. The storage ID of the uploaded file'
    moveHardwareServerTask:
      type: object
      description: 'Move hardware'
      properties:
        enabled:
          type: boolean
          description: ''
          example: true
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'DirectShow Hardware'
        destinationRecordingServer:
          type: string
          enum:
          - 'RecordingServer[98528409-660B-459F-9691-4160EE9607F7]'
          description: |
            Destination recording server. The recording server that the hardware device is moved to.
            Value map to display names: 
            RecordingServer[98528409-660B-459F-9691-4160EE9607F7]=DKTA-1103SK0008  
          example: 'RecordingServer[98528409-660B-459F-9691-4160EE9607F7]'
    activateLicenseServerTask:
      type: object
      description: 'Activate License'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'XProtect Corporate 2022 R3'
        userName:
          type: string
          description: 'User name'
        password:
          type: string
          description: 'Password'
        activationAutomatic:
          type: boolean
          description: 'Enable automatic license activation'
          example: False
    changeLicenseServerTask:
      type: object
      description: 'Change to a new license '
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'XProtect Corporate 2022 R3'
        license:
          type: string
          description: 'License content base64 encoded'
    updateLicenseServerTask:
      type: object
      description: 'Update license'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'XProtect Corporate 2022 R3'
        license:
          type: string
          description: 'License content base64 encoded'
    methodIdGetCustomFieldsForRegistrationNumberServerTask:
      type: object
      description: 'Get custom fields'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Unlisted license plate'
        registrationNumber:
          type: string
          description: 'Registration number'
    methodIdAddOrEditRegistrationNumbersInfoServerTask:
      type: object
      description: 'Add or edit data for registration numbers'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Unlisted license plate'
        registrationNumbers:
          type: string
          format: list-of-items
          description: 'Semicolon separated list of lists of data for registration numbers. Custom fields are separated with a comma'
    methodIdDeleteRegistrationNumbersServerTask:
      type: object
      description: 'Delete registration numbers'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Unlisted license plate'
        registrationNumbers:
          type: string
          format: list-of-items
          description: 'Semicolon separated list of registration numbers'
    applyCamerasServerTask:
      type: object
      description: 'Apply cameras'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Front desk monitor'
        cameraPaths:
          type: string
          format: list-of-items
          description: 'Camera paths. Paths of cameras to insert in view'
        cameraGroupPaths:
          type: string
          format: list-of-items
          description: 'Camera group paths. Paths of camera groups to insert in view'
        beginPosition:
          type: integer
          description: 'Insert from position. Index in view to insert from'
          example: 1
    applyCamerasAndLayoutServerTask:
      type: object
      description: 'Apply cameras and layout'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Front desk monitor'
        cameraPaths:
          type: string
          format: list-of-items
          description: 'Camera paths. Paths of cameras to insert in view'
        cameraGroupPaths:
          type: string
          format: list-of-items
          description: 'Camera group paths. Paths of camera groups to insert in view'
        beginPosition:
          type: integer
          description: 'Insert from position. Index in view to insert from'
          example: 1
        layoutPath:
          $ref: '#/components/schemas/path_layouts'
    removeCamerasServerTask:
      type: object
      description: 'Remove cameras'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Front desk monitor'
        cameraPaths:
          type: string
          format: list-of-items
          description: 'Camera paths. Paths of cameras to insert in view'
        cameraGroupPaths:
          type: string
          format: list-of-items
          description: 'Camera group paths. Paths of camera groups to insert in view'
    applyViewItemsXmlServerTask:
      type: object
      description: 'Apply view items XML'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Front desk monitor'
        viewItemsXml:
          type: string
          description: 'View items (XML). XML-formatted <viewitems> node containing one or more view items'
        beginPosition:
          type: integer
          description: 'Insert from position. Index in view to insert from'
          example: 1
    applyMonitorStateServerTask:
      type: object
      description: 'Apply monitor state'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Front desk monitor'
        monitorState:
          type: string
          description: 'Monitor state. Current monitor state'
    applyLayoutServerTask:
      type: object
      description: 'Apply layout'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Front desk monitor'
        layoutPath:
          $ref: '#/components/schemas/path_layouts'
    applyTextAndLayoutServerTask:
      type: object
      description: 'Apply text and layout'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Front desk monitor'
        textMessage:
          type: string
          description: 'Text message. The text message to be shown in the view item'
        beginPosition:
          type: integer
          description: 'Insert from position. Index in view to insert from'
          example: 1
        layoutPath:
          $ref: '#/components/schemas/path_layouts'
    addPatrollingEntryServerTask:
      type: object
      description: 'Add patrolling entry'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Profile 1'
        order:
          type: integer
          description: 'Order. Defines the order in which the presets are used. Value from 0 to x.'
          example: 2
        presetId:
          type: string
          enum:
          - '5d4cc62f-6473-44da-8a72-98378d42d02d'
          - '30f7d653-08f3-4c11-9b43-e02a79972fe3'
          description: |
            Preset ID. .
            Value map to display names: 
            5d4cc62f-6473-44da-8a72-98378d42d02d=Ptz Preset 1  
            30f7d653-08f3-4c11-9b43-e02a79972fe3=Ptz Preset 2  
          example: '5d4cc62f-6473-44da-8a72-98378d42d02d'
        waitTime:
          type: number
          format: double
          description: 'Wait time. The number of seconds the camera should stay at this preset position'
          example: 3
    removePatrollingEntryServerTask:
      type: object
      description: 'Remove patrolling entry'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Profile 1'
        itemSelection:
          type: string
          enum:
          - 'PatrollingEntry[0]'
          - 'PatrollingEntry[1]'
          description: 'Remove patrolling entry. .'
          example: 'PatrollingEntry[0]'
    addHardwareServerTask:
      type: object
      description: 'Add new hardware. Be aware that newly added hardware, and the devices it contains, will be disabled initially.'
      properties:
        enabled:
          type: boolean
          description: ''
          example: true
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'DKTA-1103SK0008'
        hardwareAddress:
          type: string
          description: 'Address. Contains the IP address of a piece of hardware'
        hardwareDriverPath:
          $ref: '#/components/schemas/path_hardwareDrivers'
        userName:
          type: string
          description: 'User name. User name for the hardware'
        password:
          type: string
          description: 'Password. Password for hardware'
        customData:
          type: string
          description: 'Custom data. Data to be passed on to driver during add hardware process'
    hardwareScanServerTask:
      type: object
      description: 'Detect hardware driver'
      properties:
        enabled:
          type: boolean
          description: ''
          example: true
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'DKTA-1103SK0008'
        hardwareAddress:
          type: string
          description: 'Address. Contains the IP address of a piece of hardware'
        hardwareDriverIds:
          type: string
          format: list-of-items
          description: 'Hardware driver IDs. Hardware driver IDs separated by *;*. Example: "48;13;25". Specify an empty string to include all drivers.'
        userName:
          type: string
          description: 'User name. User name for the hardware'
        password:
          type: string
          description: 'Password. Password for hardware'
        useDefaultCredentials:
          type: boolean
          description: 'Use default credentials. Specify if you want to use the default hardware credentials or use another one.'
          example: False
    hardwareScanExpressServerTask:
      type: object
      description: 'Detect hardware'
      properties:
        enabled:
          type: boolean
          description: ''
          example: true
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'DKTA-1103SK0008'
        primaryUserName:
          type: string
          description: 'User name. User name for the hardware'
        primaryPassword:
          type: string
          description: 'Password. Password for hardware'
        secondaryUserName:
          type: string
          description: 'User name. User name for the hardware'
        secondaryPassword:
          type: string
          description: 'Password. Password for hardware'
        tertiaryUserName:
          type: string
          description: 'User name. User name for the hardware'
        tertiaryPassword:
          type: string
          description: 'Password. Password for hardware'
        useDefaultCredentials:
          type: boolean
          description: 'Use default credentials. Specify if you want to use the default hardware credentials or use another one.'
          example: False
        useSecurePort:
          type: boolean
          description: 'Use HTTPS. Specify if you want to use the HTTPS protocol to connect to the hardware.'
          example: False
    setClientTimeProfileServerTask:
      type: object
      description: 'Set client login time profile'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Default Role'
        itemSelection:
          type: string
          enum:
          - '69A94F28-36D7-4C05-ABAB-FF33FBB76A63'
          - '860B0143-B6B5-4F04-8F0E-316C1C06095C'
          - '00000000-0000-0000-0000-000000000000'
          description: 'Client login time profile. .'
          example: 'Always'
    setClientProfileServerTask:
      type: object
      description: 'Set client profile on role'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Default Role'
        itemSelection:
          type: string
          enum:
          - 'ClientProfile[803A5BC0-0637-4CCC-9CC5-05CAE5F7EA7B]'
          - 'ClientProfile[530DE72A-0C41-4F15-8F15-2D115E16651A]'
          description: 'Client profile. .'
          example: 'ClientProfile[803A5BC0-0637-4CCC-9CC5-05CAE5F7EA7B]'
    changeOverallSecurityPermissionsServerTask:
      type: object
      description: 'Edit overall security permissions'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Default Role'
        securityNamespace:
          type: string
          enum:
          - 'e9914e39-a67a-496c-a3c1-5b4aaab28f15'
          - '9710735d-eb10-44ea-888d-fa8ab05a6433'
          - '6339122c-04f5-41f2-b3e3-3555997cfcef'
          - 'f97772d8-7b6d-4ea4-b6b5-ee4ea010fa2c'
          - '623d03f8-c5d5-46bc-a2f4-4c03562d4f85'
          - '15f48f88-ca89-4926-9a84-2b02864ec77a'
          - '48b602bc-e752-4bbf-8e2a-7de01f53a6dd'
          - 'ede4d51c-f691-4894-9c0b-c3ae096dc04d'
          - '3ed79ef0-ee2f-40b8-a49a-17e9380c5932'
          - 'a95fce90-753d-4cb7-86fb-f8cad9f93b67'
          - '8732fcac-a63c-46ea-9683-532b4c6644e7'
          - 'ec543c56-adf7-4600-b9ad-97e166552be9'
          - 'd4ff31cd-d9ac-46df-8e92-5b545d191baf'
          - '2e319f3e-0350-4df1-90c6-633ead31c117'
          - 'd4d19c01-03f2-4ac6-9d2b-5356b5de62f1'
          - '988d493d-1597-4be6-aff0-396bfd5d047a'
          - 'c24c91a7-7d89-459b-b78e-c4548c74640d'
          - '875f4a4e-4d78-4a8d-a978-290227253475'
          - '2d4048fa-41da-435a-a800-2419137e4a3e'
          - '46bb0392-fd06-465b-8776-b90ac16639b3'
          - '55bf1320-0224-48c7-8f57-bd41090576c8'
          - 'd2d396e4-819e-4226-aa7f-af36896d78bc'
          - 'c201ae6f-6ff3-41d4-bcbf-0f9db5049988'
          - '9a1492d1-fca0-44d7-ba9c-3699c99063a7'
          - 'b4ee79cc-7d0b-449f-a53a-ebf0a3d1f14b'
          - '77fa1106-fa1d-4c52-a945-b6f87f89deec'
          - '743c1a10-c864-4f9f-8a56-57f31e42d1db'
          - '567a4819-a38c-4e17-a982-45c780485c13'
          - '77f8f2a9-9de8-4048-8d63-26bf44dcced1'
          - '32979a29-2887-4ff5-b568-3876967f1730'
          - 'fbfb0321-ab7e-416d-8b8d-a558d24166fb'
          - '76de2b27-de9c-4f46-865a-e7445d47e70e'
          - '14d0e992-e258-4582-8ee3-ae8e42966c66'
          - 'b0650ff4-06bd-4076-9f30-bba7df90ceb4'
          description: |
            Namespace. Security namespace specifies a group of security settings associated to the same area.
            Value map to display names: 
            e9914e39-a67a-496c-a3c1-5b4aaab28f15=Management Server  
            9710735d-eb10-44ea-888d-fa8ab05a6433=Recording Servers  
            6339122c-04f5-41f2-b3e3-3555997cfcef=Failover Servers  
            f97772d8-7b6d-4ea4-b6b5-ee4ea010fa2c=Hardware  
            623d03f8-c5d5-46bc-a2f4-4c03562d4f85=Cameras  
            15f48f88-ca89-4926-9a84-2b02864ec77a=Microphones  
            48b602bc-e752-4bbf-8e2a-7de01f53a6dd=Speakers  
            ede4d51c-f691-4894-9c0b-c3ae096dc04d=Metadata  
            3ed79ef0-ee2f-40b8-a49a-17e9380c5932=Input  
            a95fce90-753d-4cb7-86fb-f8cad9f93b67=Output  
            8732fcac-a63c-46ea-9683-532b4c6644e7=Smart Wall  
            ec543c56-adf7-4600-b9ad-97e166552be9=View Groups  
            d4ff31cd-d9ac-46df-8e92-5b545d191baf=User-defined Events  
            2e319f3e-0350-4df1-90c6-633ead31c117=Analytics Events  
            d4d19c01-03f2-4ac6-9d2b-5356b5de62f1=Generic Events  
            988d493d-1597-4be6-aff0-396bfd5d047a=Matrix  
            c24c91a7-7d89-459b-b78e-c4548c74640d=Rules  
            875f4a4e-4d78-4a8d-a978-290227253475=Sites  
            2d4048fa-41da-435a-a800-2419137e4a3e=System monitor  
            46bb0392-fd06-465b-8776-b90ac16639b3=Alarms  
            55bf1320-0224-48c7-8f57-bd41090576c8=Metadata Search  
            d2d396e4-819e-4226-aa7f-af36896d78bc=Search  
            c201ae6f-6ff3-41d4-bcbf-0f9db5049988=Server Logs  
            9a1492d1-fca0-44d7-ba9c-3699c99063a7=Transaction sources  
            b4ee79cc-7d0b-449f-a53a-ebf0a3d1f14b=Transaction definitions  
            77fa1106-fa1d-4c52-a945-b6f87f89deec=Incident properties  
            743c1a10-c864-4f9f-8a56-57f31e42d1db=Incident projects  
            567a4819-a38c-4e17-a982-45c780485c13=Comments  
            77f8f2a9-9de8-4048-8d63-26bf44dcced1=Sequence list  
            32979a29-2887-4ff5-b568-3876967f1730=Calls  
            fbfb0321-ab7e-416d-8b8d-a558d24166fb=Activity logs  
            76de2b27-de9c-4f46-865a-e7445d47e70e=Draft sequence list  
            14d0e992-e258-4582-8ee3-ae8e42966c66=Reports  
            b0650ff4-06bd-4076-9f30-bba7df90ceb4=DLNA Servers  
          example: 'e9914e39-a67a-496c-a3c1-5b4aaab28f15'
    enableEncryptionServerTask:
      type: object
      description: 'Enable encryption on recording storage'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'encryptedStorage'
        password:
          type: string
          description: 'Encryption password. Encryption password for recording storage'
        encryptionMethod:
          type: string
          enum:
          - 'None'
          - 'Light'
          - 'Strong'
          description: |
            Encryption. Specifies the strength of the encryption.
            Value map to display names: 
            None=None  
            Light=Light  
            Strong=Strong  
          example: 'Light'
    moveRecordingStorageServerTask:
      type: object
      description: 'Move storage'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'encryptedStorage'
        diskPath:
          type: string
          description: 'Path. Contains the path to the storage disk'
    changeEncryptionMethodServerTask:
      type: object
      description: 'Change encryption method'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'encryptedStorage'
        encryptionMethod:
          type: string
          enum:
          - 'None'
          - 'Light'
          - 'Strong'
          description: |
            Encryption. Specifies the strength of the encryption.
            Value map to display names: 
            None=None  
            Light=Light  
            Strong=Strong  
          example: 'Strong'
        password:
          type: string
          description: 'Encryption password. Encryption password for recording storage'
    validateStorageEncryptionPasswordServerTask:
      type: object
      description: 'Validate encryption password on recording storage'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'encryptedStorage'
        password:
          type: string
          description: 'Encryption password. Encryption password for recording storage'
    disableEncryptionServerTask:
      type: object
      description: 'Disable encryption on recording storage'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'encryptedStorage'
        password:
          type: string
          description: 'Encryption password. Encryption password for recording storage'
    changePasswordStorageEncryptionServerTask:
      type: object
      description: 'Change encryption password for recording storage'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'encryptedStorage'
        oldPassword:
          type: string
          description: 'Old encryption password. The old encryption password for recording storage'
        newPassword:
          type: string
          description: 'New encryption password. New encryption password for recording storage'
    removeStreamServerTask:
      type: object
      description: 'Remove stream'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Streams'
        itemSelection:
          type: string
          enum:
          - '28DC44C3-079E-4C94-8EC9-60363451EB40'
          description: 'Select stream to remove. .'
          example: '28DC44C3-079E-4C94-8EC9-60363451EB40'
    clientLogOnSupportedServerTask:
      type: object
      description: 'Client application login supported'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'DKTA-1103SK0008'
        clientApplicationType:
          type: string
          enum:
          - 'MobileClient'
          - 'WebClient'
          - 'SmartClient'
          description: |
            Client application type. Specifies the type of client application.
            Value map to display names: 
            MobileClient=MobileClient  
            WebClient=WebClient  
            SmartClient=SmartClient  
          example: 'SmartClient'
        userName:
          type: string
          description: 'User name. User name for the hardware'
          example: 'TA\TATest'
    uploadFileChunkServerTask:
      type: object
      description: 'Upload file chunk'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'DKTA-1103SK0008'
        transferId:
          type: string
          description: 'Transfer ID. The transfer ID used to identify the file transfer'
          example: 'B63A8772-8AC1-4DCA-A8C5-D2616D982147'
        chunkData:
          type: string
          description: 'Chunk data. The chunk data as a base64 encoded string'
        offset:
          type: integer
          description: 'Offset (bytes). The chunk offset in bytes'
          example: 0
        size:
          type: integer
          description: 'File size (bytes). The total file size in bytes'
          example: 0
        checksum:
          type: string
          description: 'Checksum. The checksum as a base64 encoded string'
    moveFailoverGroupServerTask:
      type: object
      description: 'Move failover server'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Failover groups'
        failoverServer:
          $ref: '#/components/schemas/path_failoverRecorders'
        failoverGroup:
          $ref: '#/components/schemas/path_failoverGroups'
        position:
          type: integer
          description: 'Group position. Defines the order this failover server has in the group'
          example: -1
    getMIPOptionPropertyServerTask:
      type: object
      description: 'Get option menu XML properties'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'MIP kinds'
        optionId:
          type: string
          description: 'Option ID'
          example: '00000000-0000-0000-0000-000000000000'
    setMIPOptionPropertyServerTask:
      type: object
      description: 'Set option menu XML properties'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'MIP kinds'
        optionId:
          type: string
          description: 'Option ID'
          example: '00000000-0000-0000-0000-000000000000'
        dataVersion:
          type: integer
          description: 'Option data version'
          example: 0
        XML:
          type: string
          description: 'Option xml'
    defaultPtzPresetServerTask:
      type: object
      description: 'Set default PTZ preset'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'PTZ presets'
        itemSelection:
          type: string
          enum:
          - 'PtzPreset[5D4CC62F-6473-44DA-8A72-98378D42D02D]'
          - 'PtzPreset[30F7D653-08F3-4C11-9B43-E02A79972FE3]'
          description: 'Default PTZ preset. .'
          example: 'PtzPreset[5D4CC62F-6473-44DA-8A72-98378D42D02D]'
    getDevicePresetsServerTask:
      type: object
      description: 'Get presets from camera'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'PTZ presets'
        sessionDataId:
          type: integer
          description: 'Session data ID to be used in next step. Session data ID to be used in next step'
          example: 0
    copyRoleServerTask:
      type: object
      description: 'Copy role'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Roles'
        itemSelection:
          type: string
          enum:
          - 'Role[1f30d14b-ba91-4e8a-8838-eda17931f8fc]'
          - 'Role[4F473C14-97F7-4917-A700-7E4D557D4CF1]'
          - 'Role[68F5D326-2F0F-4FD1-8B56-EAEE19F033C9]'
          - 'Role[9C3C6EC5-8280-4B04-98AE-942D7EB2C690]'
          - 'Role[ACD480FD-5BCB-40AC-9B56-F705C4B0EED6]'
          description: 'Copy role. .'
          example: 'Role[1f30d14b-ba91-4e8a-8838-eda17931f8fc]'
        name:
          type: string
          description: 'Name'
        description:
          type: string
          description: 'Description'
          example: 'RoleFolder may have a long description'
    updateSaveSearchServerTask:
      type: object
      description: 'Edit search'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Save searches'
        id:
          type: string
          description: 'ID'
          example: 'abf39fca-d44d-4a47-b7c3-6266bcb4418a'
        name:
          type: string
          description: 'Name'
        description:
          type: string
          description: 'Description'
          example: 'SaveSearchesFolder may have a long description'
        searchQuery:
          type: string
          description: 'Search query'
        availability:
          type: string
          enum:
          - 'Private'
          - 'Public'
          description: |
            Availability.
            Value map to display names: 
            Private=Private  
            Public=Public  
          example: 'Public'
        includesScopeItems:
          type: boolean
          readOnly: true
          description: 'Devices are included in the search query'
          example: False
    getSaveSearchServerTask:
      type: object
      description: 'Open search'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Save searches'
        id:
          type: string
          description: 'ID'
          example: '671d2c4c-22d8-45d7-bff2-2face8006fb0'
    findSaveSearchesServerTask:
      type: object
      description: 'Find searches'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Save searches'
        count:
          type: integer
          description: 'Count'
          example: 1000
        startIndex:
          type: integer
          description: 'Start index'
          example: 0
        keywordFilter:
          type: string
          description: 'Keyword filter'
        privateOnly:
          type: boolean
          description: 'Private only'
          example: False
    addRoleMemberServerTask:
      type: object
      description: 'Add new user or group to role'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Role members'
        sid:
          type: string
          description: 'SID'
    removeRoleMemberServerTask:
      type: object
      description: 'Remove role member'
      properties:
        displayName:
          type: string
          readOnly: true
          description: ''
          example: 'Role members'
        itemSelection:
          type: string
          enum:
          - 'User[439E379B-46A1-4A80-9A8A-C0C78618E25D]'
          - 'User[8B9B96AF-C2EB-47B4-8EBA-635BC09F7B6E]'
          - 'User[E725200D-0B40-4399-9A4A-22EDDE09D394]'
          description: 'Remove role member. .'
          example: 'User[439E379B-46A1-4A80-9A8A-C0C78618E25D]'
    getInternalUnitPath_RequestBody:
      type: object
      description: 'Body parameters for the GetInternalUnitPath task'
      properties:
        externalId:
          type: string
          description: 'External ID'
    setFramerateReductionArchiveStorage_RequestBody:
      type: object
      description: 'Body parameters for the SetFramerateReductionArchiveStorage task'
      properties:
        framerateReductionEnabled:
          type: boolean
          description: 'Frame reduction enabled'
    moveArchiveStorage_RequestBody:
      type: object
      description: 'Body parameters for the MoveArchiveStorage task'
      properties:
        diskPath:
          type: string
          description: 'Path'
    addBasicOwnerInfo_RequestBody:
      type: object
      description: 'Body parameters for the AddBasicOwnerInfo task'
      properties:
        tagType:
          type: string
          description: 'Select tag type'
        tagValue:
          type: string
          description: 'Value of selected tag'
    removeBasicOwnerInfo_RequestBody:
      type: object
      description: 'Body parameters for the RemoveBasicOwnerInfo task'
      properties:
        itemSelection:
          type: string
          description: 'Select tag to remove'
    changePasswordBasicUser_RequestBody:
      type: object
      description: 'Body parameters for the ChangePasswordBasicUser task'
      properties:
        password:
          type: string
          format: password
          description: 'Password'
    retrieveEdgeStorage_RequestBody:
      type: object
      description: 'Body parameters for the RetrieveEdgeStorage task'
      properties:
        startTime:
          type: string
          format: date-time-fraction
          description: 'Start time'
          example: '2022-05-23T09:24:58.9130000+02:00'
        endTime:
          type: string
          format: date-time-fraction
          description: 'End time'
          example: '2022-05-23T09:24:58.9130000+02:00'
    truncateStorageOnOtherRecordingServer_RequestBody:
      type: object
      description: 'Body parameters for the TruncateStorageOnOtherRecordingServer task'
      properties:
        itemSelection:
          type: string
          description: 'Select recording server'
    changeDeviceRecordingStorage_RequestBody:
      type: object
      description: 'Body parameters for the ChangeDeviceRecordingStorage task'
      properties:
        itemSelection:
          type: string
          description: 'Select a storage to move to'
        moveData:
          type: boolean
          description: 'This property is deprecated and will be ignored.'
    changeSecurityPermissions_RequestBody:
      type: object
      description: 'Body parameters for the ChangeSecurityPermissions task'
      properties:
        userPath:
          type: string
          description: 'User path'
    changePasswordHardware_RequestBody:
      type: object
      description: 'Body parameters for the ChangePasswordHardware task'
      properties:
        password:
          type: string
          format: password
          description: 'Password'
        updatePasswordOnDevice:
          type: boolean
          description: 'Update password also on device'
    updateFirmwareHardware_RequestBody:
      type: object
      description: 'Body parameters for the UpdateFirmwareHardware task'
      properties:
        storageId:
          type: string
          description: 'Storage ID'
    moveHardware_RequestBody:
      type: object
      description: 'Body parameters for the MoveHardware task'
      properties:
        destinationRecordingServer:
          type: string
          description: 'Destination recording server'
    activateLicense_RequestBody:
      type: object
      description: 'Body parameters for the ActivateLicense task'
      properties:
        userName:
          type: string
          description: 'User name'
        password:
          type: string
          format: password
          description: 'Password'
        activationAutomatic:
          type: boolean
          description: 'Enable automatic license activation'
    changeLicense_RequestBody:
      type: object
      description: 'Body parameters for the ChangeLicense task'
      properties:
        license:
          type: string
          description: 'License content base64 encoded'
    updateLicense_RequestBody:
      type: object
      description: 'Body parameters for the UpdateLicense task'
      properties:
        license:
          type: string
          description: 'License content base64 encoded'
    methodIdGetCustomFieldsForRegistrationNumber_RequestBody:
      type: object
      description: 'Body parameters for the MethodIdGetCustomFieldsForRegistrationNumber task'
      properties:
        registrationNumber:
          type: string
          description: 'Registration number'
    methodIdAddOrEditRegistrationNumbersInfo_RequestBody:
      type: object
      description: 'Body parameters for the MethodIdAddOrEditRegistrationNumbersInfo task'
      properties:
        registrationNumbers:
          type: string
          description: 'Semicolon separated list of lists of data for registration numbers. Custom fields are separated with a comma'
    methodIdDeleteRegistrationNumbers_RequestBody:
      type: object
      description: 'Body parameters for the MethodIdDeleteRegistrationNumbers task'
      properties:
        registrationNumbers:
          type: string
          description: 'Semicolon separated list of registration numbers'
    applyCameras_RequestBody:
      type: object
      description: 'Body parameters for the ApplyCameras task'
      properties:
        cameraPaths:
          type: string
          description: 'Camera paths'
        cameraGroupPaths:
          type: string
          description: 'Camera group paths'
        beginPosition:
          type: integer
          description: 'Insert from position'
    applyCamerasAndLayout_RequestBody:
      type: object
      description: 'Body parameters for the ApplyCamerasAndLayout task'
      properties:
        cameraPaths:
          type: string
          description: 'Camera paths'
        cameraGroupPaths:
          type: string
          description: 'Camera group paths'
        beginPosition:
          type: integer
          description: 'Insert from position'
        layoutPath:
          type: string
          description: 'Layout path'
    removeCameras_RequestBody:
      type: object
      description: 'Body parameters for the RemoveCameras task'
      properties:
        cameraPaths:
          type: string
          description: 'Camera paths'
        cameraGroupPaths:
          type: string
          description: 'Camera group paths'
    applyViewItemsXml_RequestBody:
      type: object
      description: 'Body parameters for the ApplyViewItemsXml task'
      properties:
        viewItemsXml:
          type: string
          description: 'View items (XML)'
        beginPosition:
          type: integer
          description: 'Insert from position'
    applyMonitorState_RequestBody:
      type: object
      description: 'Body parameters for the ApplyMonitorState task'
      properties:
        monitorState:
          type: string
          description: 'Monitor state'
    applyLayout_RequestBody:
      type: object
      description: 'Body parameters for the ApplyLayout task'
      properties:
        layoutPath:
          type: string
          description: 'Layout path'
    applyTextAndLayout_RequestBody:
      type: object
      description: 'Body parameters for the ApplyTextAndLayout task'
      properties:
        textMessage:
          type: string
          description: 'Text message'
        beginPosition:
          type: integer
          description: 'Insert from position'
        layoutPath:
          type: string
          description: 'Layout path'
    addPatrollingEntry_RequestBody:
      type: object
      description: 'Body parameters for the AddPatrollingEntry task'
      properties:
        order:
          type: integer
          description: 'Order'
        presetId:
          type: string
          description: 'Preset ID'
        waitTime:
          type: number
          format: double
          description: 'Wait time'
    removePatrollingEntry_RequestBody:
      type: object
      description: 'Body parameters for the RemovePatrollingEntry task'
      properties:
        itemSelection:
          type: string
          description: 'Remove patrolling entry'
    addHardware_RequestBody:
      type: object
      description: 'Body parameters for the AddHardware task'
      properties:
        hardwareAddress:
          type: string
          description: 'Address'
        hardwareDriverPath:
          type: string
          description: 'Hardware driver'
        userName:
          type: string
          description: 'User name'
        password:
          type: string
          format: password
          description: 'Password'
        customData:
          type: string
          description: 'Custom data'
    hardwareScan_RequestBody:
      type: object
      description: 'Body parameters for the HardwareScan task'
      properties:
        hardwareAddress:
          type: string
          description: 'Address'
        hardwareDriverIds:
          type: string
          description: 'Hardware driver IDs'
        userName:
          type: string
          description: 'User name'
        password:
          type: string
          format: password
          description: 'Password'
        useDefaultCredentials:
          type: boolean
          description: 'Use default credentials'
    hardwareScanExpress_RequestBody:
      type: object
      description: 'Body parameters for the HardwareScanExpress task'
      properties:
        primaryUserName:
          type: string
          description: 'User name'
        primaryPassword:
          type: string
          description: 'Password'
        secondaryUserName:
          type: string
          description: 'User name'
        secondaryPassword:
          type: string
          description: 'Password'
        tertiaryUserName:
          type: string
          description: 'User name'
        tertiaryPassword:
          type: string
          description: 'Password'
        useDefaultCredentials:
          type: boolean
          description: 'Use default credentials'
        useSecurePort:
          type: boolean
          description: 'Use HTTPS'
    setClientTimeProfile_RequestBody:
      type: object
      description: 'Body parameters for the SetClientTimeProfile task'
      properties:
        itemSelection:
          type: string
          description: 'Client login time profile'
    setClientProfile_RequestBody:
      type: object
      description: 'Body parameters for the SetClientProfile task'
      properties:
        itemSelection:
          type: string
          description: 'Client profile'
    changeOverallSecurityPermissions_RequestBody:
      type: object
      description: 'Body parameters for the ChangeOverallSecurityPermissions task'
      properties:
        securityNamespace:
          type: string
          description: 'Namespace'
    enableEncryption_RequestBody:
      type: object
      description: 'Body parameters for the EnableEncryption task'
      properties:
        password:
          type: string
          format: password
          description: 'Encryption password'
        encryptionMethod:
          type: string
          description: 'Encryption'
    moveRecordingStorage_RequestBody:
      type: object
      description: 'Body parameters for the MoveRecordingStorage task'
      properties:
        diskPath:
          type: string
          description: 'Path'
    changeEncryptionMethod_RequestBody:
      type: object
      description: 'Body parameters for the ChangeEncryptionMethod task'
      properties:
        encryptionMethod:
          type: string
          description: 'Encryption'
        password:
          type: string
          format: password
          description: 'Encryption password'
    validateStorageEncryptionPassword_RequestBody:
      type: object
      description: 'Body parameters for the ValidateStorageEncryptionPassword task'
      properties:
        password:
          type: string
          format: password
          description: 'Encryption password'
    disableEncryption_RequestBody:
      type: object
      description: 'Body parameters for the DisableEncryption task'
      properties:
        password:
          type: string
          format: password
          description: 'Encryption password'
    changePasswordStorageEncryption_RequestBody:
      type: object
      description: 'Body parameters for the ChangePasswordStorageEncryption task'
      properties:
        oldPassword:
          type: string
          description: 'Old encryption password'
        newPassword:
          type: string
          description: 'New encryption password'
    removeStream_RequestBody:
      type: object
      description: 'Body parameters for the RemoveStream task'
      properties:
        itemSelection:
          type: string
          description: 'Select stream to remove'
    clientLogOnSupported_RequestBody:
      type: object
      description: 'Body parameters for the ClientLogOnSupported task'
      properties:
        clientApplicationType:
          type: string
          description: 'Client application type'
        userName:
          type: string
          description: 'User name'
    uploadFileChunk_RequestBody:
      type: object
      description: 'Body parameters for the UploadFileChunk task'
      properties:
        transferId:
          type: string
          description: 'Transfer ID'
        chunkData:
          type: string
          description: 'Chunk data'
        offset:
          type: integer
          description: 'Offset (bytes)'
        size:
          type: integer
          description: 'File size (bytes)'
        checksum:
          type: string
          description: 'Checksum'
    moveFailoverGroup_RequestBody:
      type: object
      description: 'Body parameters for the MoveFailoverGroup task'
      properties:
        failoverServer:
          type: string
          description: 'Failover server path'
        failoverGroup:
          type: string
          description: 'Target failover group'
        position:
          type: integer
          description: 'Group position'
    getMIPOptionProperty_RequestBody:
      type: object
      description: 'Body parameters for the GetMIPOptionProperty task'
      properties:
        optionId:
          type: string
          description: 'Option ID'
    setMIPOptionProperty_RequestBody:
      type: object
      description: 'Body parameters for the SetMIPOptionProperty task'
      properties:
        optionId:
          type: string
          description: 'Option ID'
        dataVersion:
          type: integer
          description: 'Option data version'
        xML:
          type: string
          description: 'Option xml'
    defaultPtzPreset_RequestBody:
      type: object
      description: 'Body parameters for the DefaultPtzPreset task'
      properties:
        itemSelection:
          type: string
          description: 'Default PTZ preset'
    getDevicePresets_RequestBody:
      type: object
      description: 'Body parameters for the GetDevicePresets task'
      properties:
        sessionDataId:
          type: integer
          description: 'Session data ID to be used in next step'
    copyRole_RequestBody:
      type: object
      description: 'Body parameters for the CopyRole task'
      properties:
        itemSelection:
          type: string
          description: 'Copy role'
        name:
          type: string
          description: 'Name'
        description:
          type: string
          description: 'Description'
          example: ' may have a long description'
    updateSaveSearch_RequestBody:
      type: object
      description: 'Body parameters for the UpdateSaveSearch task'
      properties:
        id:
          type: string
          description: 'ID'
          example: '28494349-a991-4ceb-bbf2-72a1251a6ca2'
        name:
          type: string
          description: 'Name'
        description:
          type: string
          description: 'Description'
          example: ' may have a long description'
        searchQuery:
          type: string
          description: 'Search query'
        availability:
          type: string
          description: 'Availability'
    getSaveSearch_RequestBody:
      type: object
      description: 'Body parameters for the GetSaveSearch task'
      properties:
        id:
          type: string
          description: 'ID'
          example: '482ed657-e9c5-4d37-bf7e-0129a0d03349'
    findSaveSearches_RequestBody:
      type: object
      description: 'Body parameters for the FindSaveSearches task'
      properties:
        count:
          type: integer
          description: 'Count'
        startIndex:
          type: integer
          description: 'Start index'
        keywordFilter:
          type: string
          description: 'Keyword filter'
        privateOnly:
          type: boolean
          description: 'Private only'
    addRoleMember_RequestBody:
      type: object
      description: 'Body parameters for the AddRoleMember task'
      properties:
        sid:
          type: string
          description: 'SID'
    removeRoleMember_RequestBody:
      type: object
      description: 'Body parameters for the RemoveRoleMember task'
      properties:
        itemSelection:
          type: string
          description: 'Remove role member'
    path_userDefinedEvents:
      type: object
      description: 'Events triggered by alarm. Defines a list of events to trigger when alarm is created.  List is a comma separated set of Paths.'
      properties:
        type:
          type: string
          example: 'userDefinedEvents'
        id:
          type: string
          example: '1fee4fca-db4d-4747-b793-7fc6a6f81fa1'

    path_timeProfiles:
      type: object
      description: 'Time profile. Defines what TimeProfile to be used when checking when the alarm is enabled.  Property is only valid when EnableRule is set to TimeProfile.'
      properties:
        type:
          type: string
          example: 'timeProfiles'
        id:
          type: string
          example: '3a9a3f27-feb0-4781-85ba-0f6e7251eef1'

    path_cameras:
      type: object
      description: 'Related cameras. The list of additional cameras to associate with the alarm. The list is a comma separated set of Paths.'
      properties:
        type:
          type: string
          example: 'cameras'
        id:
          type: string
          example: 'abbe8d6b-765d-4a42-8e5c-14a2e5262df1'

    path_storages:
      type: object
      description: 'Path. Contains the path to the related recording storage'
      properties:
        type:
          type: string
          example: 'storages'
        id:
          type: string
          example: '2f947aeb-c59d-4ea6-9586-c4cf72e3f477'

    path_layouts:
      type: object
      description: 'Layout path. Path of layout to apply to monitor'
      properties:
        type:
          type: string
          example: 'layouts'
        id:
          type: string
          example: '4514ed40-a3ee-4b47-94ca-3bb7e9f14249'

    path_microphones:
      type: object
      description: 'Related device paths. Comma separated list of device paths'
      properties:
        type:
          type: string
          example: 'microphones'
        id:
          type: string
          example: 'c421fff5-c99a-4d36-9058-348930311e78'

    path_hardwareDrivers:
      type: object
      description: 'Hardware driver. Contains the path/ID of the device driver used for the hardware. Driver can be looked up under the recording server.'
      properties:
        type:
          type: string
          example: 'hardwareDrivers'
        id:
          type: string
          example: '699dd024-4119-4e3d-b7dd-e2b371d18d79'

    path_outputs:
      type: object
      description: 'The list of triggered events. Defines a list of events to trigger when match is detected. List is a comma separated set of Paths'
      properties:
        type:
          type: string
          example: 'outputs'
        id:
          type: string
          example: 'aa25e56d-5065-4449-beed-bb724fb55ecc'

    path_roles:
      type: object
      description: 'User path. User path format: /User[SID]. *SID* can contain role ID.'
      properties:
        type:
          type: string
          example: 'roles'
        id:
          type: string
          example: '9b9cd381-00ab-41a6-a0a5-be8c705bc26b'

    path_failoverRecorders:
      type: object
      description: 'Failover server path'
      properties:
        type:
          type: string
          example: 'failoverRecorders'
        id:
          type: string
          example: '81c874cb-8eb2-4d7c-a6b7-4870c3930221'

    path_failoverGroups:
      type: object
      description: 'Target failover group'
      properties:
        type:
          type: string
          example: 'failoverGroups'
        id:
          type: string
          example: '8e28bd1f-f94c-49c9-a69e-3f5cd5d32ad5'

    resourceList:
      type: object
      properties:
        type:
          type: string
          example: 'recordingServers'
        displayName:
          type: string
          example: 'Recording Servers'

    taskList:
      type: object
      properties:
        name:
          type: string
          example: 'MoveHardwareId'
        displayName:
          type: string
          example: 'move it'

    translations:
      type: object
      properties:
        id:
          type: string
          example: '2f8b6325-9c48-44b9-9868-27db64a71d51'
        text:
          type: string
          example: 'MPEG-4 frames per second'

    error400:
      type: object
      properties:
        httpCode:
          type: integer
          example: '400'
        details:
          type: array
          items:
            type: object
            properties:
              errorText:
                type: string
                example: 'Bad Request - FPS out of range'
              property:
                type: string
                example: 'FPS'
              errorTextId:
                type: string
                example: 'BadFPSTextId'

    error401:
      type: object
      properties:
        httpCode:
          type: integer
          example: '401'
        details:
          type: array
          items:
            type: object
            properties:
              errorText:
                type: string
                example: 'Unauthorized'

    error403:
      type: object
      properties:
        httpCode:
          type: integer
          example: '403'
        details:
          type: array
          items:
            type: object
            properties:
              errorText:
                type: string
                example: 'Forbidden, you are not authorized to access this object'

    error404:
      type: object
      properties:
        httpCode:
          type: integer
          example: '404'
        details:
          type: array
          items:
            type: object
            properties:
              errorText:
                type: string
                example: 'Not Found, the requested id does not exist'

    serverTask:
      type: object
      properties:
        state:
          type: string
          example: 'Success'

    status:
      type: string
      example: 'Success'

    classCollectionServerTask:
      type: object
      properties:
        state:
          type: string
          example: 'Success'
        cameras:
          type: array
          items:
            $ref: '#/components/schemas/cameras'
        microphones:
          type: array
          items:
            $ref: '#/components/schemas/microphones'
        speakers:
          type: array
          items:
            $ref: '#/components/schemas/speakers'
        metadata:
          type: array
          items:
            $ref: '#/components/schemas/metadata'
        inputEvents:
          type: array
          items:
            $ref: '#/components/schemas/inputEvents'
        outputs:
          type: array
          items:
            $ref: '#/components/schemas/outputs'
        storages:
          type: array
          items:
            $ref: '#/components/schemas/storages'
        recordingServers:
          type: array
          items:
            $ref: '#/components/schemas/recordingServers'
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/tasks'

    tasks:
      type: object
      properties:
        result:
          type: object
          properties:
            progress:
              type: integer
              example: '25'
            errorCode:
              type: integer
              example: '61002'
            errorText:
              type: string
              example: 'Something went wrong'
            state:
              type: string
              example: 'Error'
            path:
              type: string
              example: 'hardware/F29FEF78-E5EA-4DCF-B654-8F76886DD873'

